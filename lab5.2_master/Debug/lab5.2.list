
lab5.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023ac  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002544  08002544  00012544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002560  08002560  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002560  08002560  00012560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002568  08002568  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002568  08002568  00012568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800256c  0800256c  0001256c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  0800257c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  0800257c  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008c31  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001555  00000000  00000000  00028cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000800  00000000  00000000  0002a208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000629  00000000  00000000  0002aa08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014cbf  00000000  00000000  0002b031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000964d  00000000  00000000  0003fcf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000838eb  00000000  00000000  0004933d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000207c  00000000  00000000  000ccc28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000ceca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800252c 	.word	0x0800252c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	0800252c 	.word	0x0800252c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fac6 	bl	8000a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f828 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f8f0 	bl	80006c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f8c4 	bl	8000670 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80004e8:	f000 f88c 	bl	8000604 <MX_SPI2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 80004ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f0:	480c      	ldr	r0, [pc, #48]	; (8000524 <main+0x50>)
 80004f2:	f000 fdb9 	bl	8001068 <HAL_GPIO_ReadPin>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d1f7      	bne.n	80004ec <main+0x18>
	  		   HAL_SPI_Transmit(&hspi2, "a", 1, 100);
 80004fc:	2364      	movs	r3, #100	; 0x64
 80004fe:	2201      	movs	r2, #1
 8000500:	4909      	ldr	r1, [pc, #36]	; (8000528 <main+0x54>)
 8000502:	480a      	ldr	r0, [pc, #40]	; (800052c <main+0x58>)
 8000504:	f001 fb03 	bl	8001b0e <HAL_SPI_Transmit>
	  		   HAL_Delay(50);
 8000508:	2032      	movs	r0, #50	; 0x32
 800050a:	f000 fb1f 	bl	8000b4c <HAL_Delay>
	  		   while(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {}
 800050e:	bf00      	nop
 8000510:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <main+0x50>)
 8000516:	f000 fda7 	bl	8001068 <HAL_GPIO_ReadPin>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d0f7      	beq.n	8000510 <main+0x3c>
	  if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8000520:	e7e4      	b.n	80004ec <main+0x18>
 8000522:	bf00      	nop
 8000524:	40020800 	.word	0x40020800
 8000528:	08002544 	.word	0x08002544
 800052c:	20000028 	.word	0x20000028

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f001 ffc8 	bl	80024d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b28      	ldr	r3, [pc, #160]	; (80005fc <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	4a27      	ldr	r2, [pc, #156]	; (80005fc <SystemClock_Config+0xcc>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	; 0x40
 8000564:	4b25      	ldr	r3, [pc, #148]	; (80005fc <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b22      	ldr	r3, [pc, #136]	; (8000600 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a21      	ldr	r2, [pc, #132]	; (8000600 <SystemClock_Config+0xd0>)
 800057a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058c:	2302      	movs	r3, #2
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000594:	2310      	movs	r3, #16
 8000596:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000598:	2302      	movs	r3, #2
 800059a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059c:	2300      	movs	r3, #0
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005a0:	2310      	movs	r3, #16
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005aa:	2304      	movs	r3, #4
 80005ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005ae:	2304      	movs	r3, #4
 80005b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fd88 	bl	80010cc <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005c2:	f000 f8ed 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2302      	movs	r3, #2
 80005cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2102      	movs	r1, #2
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 ffea 	bl	80015bc <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ee:	f000 f8d7 	bl	80007a0 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3750      	adds	r7, #80	; 0x50
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <MX_SPI2_Init+0x64>)
 800060a:	4a18      	ldr	r2, [pc, #96]	; (800066c <MX_SPI2_Init+0x68>)
 800060c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800060e:	4b16      	ldr	r3, [pc, #88]	; (8000668 <MX_SPI2_Init+0x64>)
 8000610:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000614:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <MX_SPI2_Init+0x64>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_SPI2_Init+0x64>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_SPI2_Init+0x64>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_SPI2_Init+0x64>)
 800062a:	2200      	movs	r2, #0
 800062c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_SPI2_Init+0x64>)
 8000630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000634:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_SPI2_Init+0x64>)
 8000638:	2200      	movs	r2, #0
 800063a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <MX_SPI2_Init+0x64>)
 800063e:	2200      	movs	r2, #0
 8000640:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_SPI2_Init+0x64>)
 8000644:	2200      	movs	r2, #0
 8000646:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <MX_SPI2_Init+0x64>)
 800064a:	2200      	movs	r2, #0
 800064c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_SPI2_Init+0x64>)
 8000650:	220a      	movs	r2, #10
 8000652:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <MX_SPI2_Init+0x64>)
 8000656:	f001 f9d1 	bl	80019fc <HAL_SPI_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000660:	f000 f89e 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000028 	.word	0x20000028
 800066c:	40003800 	.word	0x40003800

08000670 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 8000676:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <MX_USART2_UART_Init+0x50>)
 8000678:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 800067c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000680:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 8000696:	220c      	movs	r2, #12
 8000698:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_USART2_UART_Init+0x4c>)
 80006a8:	f001 fc50 	bl	8001f4c <HAL_UART_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006b2:	f000 f875 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000080 	.word	0x20000080
 80006c0:	40004400 	.word	0x40004400

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <MX_GPIO_Init+0xd0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a2c      	ldr	r2, [pc, #176]	; (8000794 <MX_GPIO_Init+0xd0>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <MX_GPIO_Init+0xd0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <MX_GPIO_Init+0xd0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a25      	ldr	r2, [pc, #148]	; (8000794 <MX_GPIO_Init+0xd0>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b23      	ldr	r3, [pc, #140]	; (8000794 <MX_GPIO_Init+0xd0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <MX_GPIO_Init+0xd0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <MX_GPIO_Init+0xd0>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <MX_GPIO_Init+0xd0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a17      	ldr	r2, [pc, #92]	; (8000794 <MX_GPIO_Init+0xd0>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_GPIO_Init+0xd0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2120      	movs	r1, #32
 800074e:	4812      	ldr	r0, [pc, #72]	; (8000798 <MX_GPIO_Init+0xd4>)
 8000750:	f000 fca2 	bl	8001098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800075a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800075e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	480c      	ldr	r0, [pc, #48]	; (800079c <MX_GPIO_Init+0xd8>)
 800076c:	f000 faf8 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000770:	2320      	movs	r3, #32
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_GPIO_Init+0xd4>)
 8000788:	f000 faea 	bl	8000d60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800078c:	bf00      	nop
 800078e:	3728      	adds	r7, #40	; 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40023800 	.word	0x40023800
 8000798:	40020000 	.word	0x40020000
 800079c:	40020800 	.word	0x40020800

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 80007a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ac:	480c      	ldr	r0, [pc, #48]	; (80007e0 <Error_Handler+0x40>)
 80007ae:	f000 fc5b 	bl	8001068 <HAL_GPIO_ReadPin>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1f7      	bne.n	80007a8 <Error_Handler+0x8>
	  	  		   HAL_SPI_Transmit(&hspi2, "a", 1, 100);
 80007b8:	2364      	movs	r3, #100	; 0x64
 80007ba:	2201      	movs	r2, #1
 80007bc:	4909      	ldr	r1, [pc, #36]	; (80007e4 <Error_Handler+0x44>)
 80007be:	480a      	ldr	r0, [pc, #40]	; (80007e8 <Error_Handler+0x48>)
 80007c0:	f001 f9a5 	bl	8001b0e <HAL_SPI_Transmit>
	  	  		   HAL_Delay(50);
 80007c4:	2032      	movs	r0, #50	; 0x32
 80007c6:	f000 f9c1 	bl	8000b4c <HAL_Delay>
	  	  		   while(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {}
 80007ca:	bf00      	nop
 80007cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d0:	4803      	ldr	r0, [pc, #12]	; (80007e0 <Error_Handler+0x40>)
 80007d2:	f000 fc49 	bl	8001068 <HAL_GPIO_ReadPin>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d0f7      	beq.n	80007cc <Error_Handler+0x2c>
	  if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 80007dc:	e7e4      	b.n	80007a8 <Error_Handler+0x8>
 80007de:	bf00      	nop
 80007e0:	40020800 	.word	0x40020800
 80007e4:	08002544 	.word	0x08002544
 80007e8:	20000028 	.word	0x20000028

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <HAL_MspInit+0x4c>)
 80007f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fa:	4a0f      	ldr	r2, [pc, #60]	; (8000838 <HAL_MspInit+0x4c>)
 80007fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000800:	6453      	str	r3, [r2, #68]	; 0x44
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <HAL_MspInit+0x4c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <HAL_MspInit+0x4c>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	4a08      	ldr	r2, [pc, #32]	; (8000838 <HAL_MspInit+0x4c>)
 8000818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081c:	6413      	str	r3, [r2, #64]	; 0x40
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <HAL_MspInit+0x4c>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800082a:	2007      	movs	r0, #7
 800082c:	f000 fa64 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800

0800083c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a28      	ldr	r2, [pc, #160]	; (80008fc <HAL_SPI_MspInit+0xc0>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d14a      	bne.n	80008f4 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b27      	ldr	r3, [pc, #156]	; (8000900 <HAL_SPI_MspInit+0xc4>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	4a26      	ldr	r2, [pc, #152]	; (8000900 <HAL_SPI_MspInit+0xc4>)
 8000868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086c:	6413      	str	r3, [r2, #64]	; 0x40
 800086e:	4b24      	ldr	r3, [pc, #144]	; (8000900 <HAL_SPI_MspInit+0xc4>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b20      	ldr	r3, [pc, #128]	; (8000900 <HAL_SPI_MspInit+0xc4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a1f      	ldr	r2, [pc, #124]	; (8000900 <HAL_SPI_MspInit+0xc4>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <HAL_SPI_MspInit+0xc4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <HAL_SPI_MspInit+0xc4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a18      	ldr	r2, [pc, #96]	; (8000900 <HAL_SPI_MspInit+0xc4>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <HAL_SPI_MspInit+0xc4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008b2:	2308      	movs	r3, #8
 80008b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c2:	2305      	movs	r3, #5
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <HAL_SPI_MspInit+0xc8>)
 80008ce:	f000 fa47 	bl	8000d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e4:	2305      	movs	r3, #5
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	4806      	ldr	r0, [pc, #24]	; (8000908 <HAL_SPI_MspInit+0xcc>)
 80008f0:	f000 fa36 	bl	8000d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	; 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40003800 	.word	0x40003800
 8000900:	40023800 	.word	0x40023800
 8000904:	40020800 	.word	0x40020800
 8000908:	40020400 	.word	0x40020400

0800090c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a19      	ldr	r2, [pc, #100]	; (8000990 <HAL_UART_MspInit+0x84>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d12b      	bne.n	8000986 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a17      	ldr	r2, [pc, #92]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a10      	ldr	r2, [pc, #64]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <HAL_UART_MspInit+0x88>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000966:	230c      	movs	r3, #12
 8000968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000972:	2303      	movs	r3, #3
 8000974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000976:	2307      	movs	r3, #7
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <HAL_UART_MspInit+0x8c>)
 8000982:	f000 f9ed 	bl	8000d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000986:	bf00      	nop
 8000988:	3728      	adds	r7, #40	; 0x28
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40004400 	.word	0x40004400
 8000994:	40023800 	.word	0x40023800
 8000998:	40020000 	.word	0x40020000

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a0:	e7fe      	b.n	80009a0 <NMI_Handler+0x4>

080009a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <MemManage_Handler+0x4>

080009ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <BusFault_Handler+0x4>

080009b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <UsageFault_Handler+0x4>

080009ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e8:	f000 f890 	bl	8000b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <SystemInit+0x20>)
 80009f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fa:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <SystemInit+0x20>)
 80009fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a18:	f7ff ffea 	bl	80009f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a1c:	480c      	ldr	r0, [pc, #48]	; (8000a50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a1e:	490d      	ldr	r1, [pc, #52]	; (8000a54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a20:	4a0d      	ldr	r2, [pc, #52]	; (8000a58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a24:	e002      	b.n	8000a2c <LoopCopyDataInit>

08000a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2a:	3304      	adds	r3, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a30:	d3f9      	bcc.n	8000a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a34:	4c0a      	ldr	r4, [pc, #40]	; (8000a60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a38:	e001      	b.n	8000a3e <LoopFillZerobss>

08000a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3c:	3204      	adds	r2, #4

08000a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a40:	d3fb      	bcc.n	8000a3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a42:	f001 fd4f 	bl	80024e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a46:	f7ff fd45 	bl	80004d4 <main>
  bx  lr    
 8000a4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a54:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a58:	08002570 	.word	0x08002570
  ldr r2, =_sbss
 8000a5c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a60:	200000cc 	.word	0x200000cc

08000a64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a64:	e7fe      	b.n	8000a64 <ADC_IRQHandler>
	...

08000a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <HAL_Init+0x40>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <HAL_Init+0x40>)
 8000a72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <HAL_Init+0x40>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <HAL_Init+0x40>)
 8000a7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <HAL_Init+0x40>)
 8000a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a90:	2003      	movs	r0, #3
 8000a92:	f000 f931 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a96:	2000      	movs	r0, #0
 8000a98:	f000 f808 	bl	8000aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a9c:	f7ff fea6 	bl	80007ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023c00 	.word	0x40023c00

08000aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <HAL_InitTick+0x54>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_InitTick+0x58>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4619      	mov	r1, r3
 8000abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f93b 	bl	8000d46 <HAL_SYSTICK_Config>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e00e      	b.n	8000af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b0f      	cmp	r3, #15
 8000ade:	d80a      	bhi.n	8000af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	f000 f911 	bl	8000d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aec:	4a06      	ldr	r2, [pc, #24]	; (8000b08 <HAL_InitTick+0x5c>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000af2:	2300      	movs	r3, #0
 8000af4:	e000      	b.n	8000af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000008 	.word	0x20000008
 8000b08:	20000004 	.word	0x20000004

08000b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_IncTick+0x20>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_IncTick+0x24>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <HAL_IncTick+0x24>)
 8000b1e:	6013      	str	r3, [r2, #0]
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	200000c8 	.word	0x200000c8

08000b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <HAL_GetTick+0x14>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	200000c8 	.word	0x200000c8

08000b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b54:	f7ff ffee 	bl	8000b34 <HAL_GetTick>
 8000b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b64:	d005      	beq.n	8000b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <HAL_Delay+0x44>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4413      	add	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b72:	bf00      	nop
 8000b74:	f7ff ffde 	bl	8000b34 <HAL_GetTick>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d8f7      	bhi.n	8000b74 <HAL_Delay+0x28>
  {
  }
}
 8000b84:	bf00      	nop
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000008 	.word	0x20000008

08000b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc6:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	60d3      	str	r3, [r2, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	f003 0307 	and.w	r3, r3, #7
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db0a      	blt.n	8000c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	490c      	ldr	r1, [pc, #48]	; (8000c44 <__NVIC_SetPriority+0x4c>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c20:	e00a      	b.n	8000c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4908      	ldr	r1, [pc, #32]	; (8000c48 <__NVIC_SetPriority+0x50>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	3b04      	subs	r3, #4
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	761a      	strb	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f1c3 0307 	rsb	r3, r3, #7
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	bf28      	it	cs
 8000c6a:	2304      	movcs	r3, #4
 8000c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d902      	bls.n	8000c7c <NVIC_EncodePriority+0x30>
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3b03      	subs	r3, #3
 8000c7a:	e000      	b.n	8000c7e <NVIC_EncodePriority+0x32>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43d9      	mvns	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	4313      	orrs	r3, r2
         );
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3724      	adds	r7, #36	; 0x24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc4:	d301      	bcc.n	8000cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00f      	b.n	8000cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <SysTick_Config+0x40>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f7ff ff8e 	bl	8000bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <SysTick_Config+0x40>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <SysTick_Config+0x40>)
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff47 	bl	8000b94 <__NVIC_SetPriorityGrouping>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d20:	f7ff ff5c 	bl	8000bdc <__NVIC_GetPriorityGrouping>
 8000d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	6978      	ldr	r0, [r7, #20]
 8000d2c:	f7ff ff8e 	bl	8000c4c <NVIC_EncodePriority>
 8000d30:	4602      	mov	r2, r0
 8000d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff5d 	bl	8000bf8 <__NVIC_SetPriority>
}
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ffb0 	bl	8000cb4 <SysTick_Config>
 8000d54:	4603      	mov	r3, r0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	; 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
 8000d7a:	e159      	b.n	8001030 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	f040 8148 	bne.w	800102a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d005      	beq.n	8000db2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d130      	bne.n	8000e14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	68da      	ldr	r2, [r3, #12]
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000de8:	2201      	movs	r2, #1
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	091b      	lsrs	r3, r3, #4
 8000dfe:	f003 0201 	and.w	r2, r3, #1
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	d017      	beq.n	8000e50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d123      	bne.n	8000ea4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	08da      	lsrs	r2, r3, #3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3208      	adds	r2, #8
 8000e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	f003 0307 	and.w	r3, r3, #7
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	220f      	movs	r2, #15
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	691a      	ldr	r2, [r3, #16]
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	08da      	lsrs	r2, r3, #3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3208      	adds	r2, #8
 8000e9e:	69b9      	ldr	r1, [r7, #24]
 8000ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	2203      	movs	r2, #3
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0203 	and.w	r2, r3, #3
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f000 80a2 	beq.w	800102a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b57      	ldr	r3, [pc, #348]	; (8001048 <HAL_GPIO_Init+0x2e8>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	4a56      	ldr	r2, [pc, #344]	; (8001048 <HAL_GPIO_Init+0x2e8>)
 8000ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef6:	4b54      	ldr	r3, [pc, #336]	; (8001048 <HAL_GPIO_Init+0x2e8>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f02:	4a52      	ldr	r2, [pc, #328]	; (800104c <HAL_GPIO_Init+0x2ec>)
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	089b      	lsrs	r3, r3, #2
 8000f08:	3302      	adds	r3, #2
 8000f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	220f      	movs	r2, #15
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4013      	ands	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a49      	ldr	r2, [pc, #292]	; (8001050 <HAL_GPIO_Init+0x2f0>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d019      	beq.n	8000f62 <HAL_GPIO_Init+0x202>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a48      	ldr	r2, [pc, #288]	; (8001054 <HAL_GPIO_Init+0x2f4>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d013      	beq.n	8000f5e <HAL_GPIO_Init+0x1fe>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a47      	ldr	r2, [pc, #284]	; (8001058 <HAL_GPIO_Init+0x2f8>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d00d      	beq.n	8000f5a <HAL_GPIO_Init+0x1fa>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a46      	ldr	r2, [pc, #280]	; (800105c <HAL_GPIO_Init+0x2fc>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d007      	beq.n	8000f56 <HAL_GPIO_Init+0x1f6>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a45      	ldr	r2, [pc, #276]	; (8001060 <HAL_GPIO_Init+0x300>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d101      	bne.n	8000f52 <HAL_GPIO_Init+0x1f2>
 8000f4e:	2304      	movs	r3, #4
 8000f50:	e008      	b.n	8000f64 <HAL_GPIO_Init+0x204>
 8000f52:	2307      	movs	r3, #7
 8000f54:	e006      	b.n	8000f64 <HAL_GPIO_Init+0x204>
 8000f56:	2303      	movs	r3, #3
 8000f58:	e004      	b.n	8000f64 <HAL_GPIO_Init+0x204>
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	e002      	b.n	8000f64 <HAL_GPIO_Init+0x204>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e000      	b.n	8000f64 <HAL_GPIO_Init+0x204>
 8000f62:	2300      	movs	r3, #0
 8000f64:	69fa      	ldr	r2, [r7, #28]
 8000f66:	f002 0203 	and.w	r2, r2, #3
 8000f6a:	0092      	lsls	r2, r2, #2
 8000f6c:	4093      	lsls	r3, r2
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f74:	4935      	ldr	r1, [pc, #212]	; (800104c <HAL_GPIO_Init+0x2ec>)
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	089b      	lsrs	r3, r3, #2
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f82:	4b38      	ldr	r3, [pc, #224]	; (8001064 <HAL_GPIO_Init+0x304>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fa6:	4a2f      	ldr	r2, [pc, #188]	; (8001064 <HAL_GPIO_Init+0x304>)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fac:	4b2d      	ldr	r3, [pc, #180]	; (8001064 <HAL_GPIO_Init+0x304>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fd0:	4a24      	ldr	r2, [pc, #144]	; (8001064 <HAL_GPIO_Init+0x304>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fd6:	4b23      	ldr	r3, [pc, #140]	; (8001064 <HAL_GPIO_Init+0x304>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ffa:	4a1a      	ldr	r2, [pc, #104]	; (8001064 <HAL_GPIO_Init+0x304>)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001000:	4b18      	ldr	r3, [pc, #96]	; (8001064 <HAL_GPIO_Init+0x304>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001024:	4a0f      	ldr	r2, [pc, #60]	; (8001064 <HAL_GPIO_Init+0x304>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3301      	adds	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	2b0f      	cmp	r3, #15
 8001034:	f67f aea2 	bls.w	8000d7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800
 800104c:	40013800 	.word	0x40013800
 8001050:	40020000 	.word	0x40020000
 8001054:	40020400 	.word	0x40020400
 8001058:	40020800 	.word	0x40020800
 800105c:	40020c00 	.word	0x40020c00
 8001060:	40021000 	.word	0x40021000
 8001064:	40013c00 	.word	0x40013c00

08001068 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	691a      	ldr	r2, [r3, #16]
 8001078:	887b      	ldrh	r3, [r7, #2]
 800107a:	4013      	ands	r3, r2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	e001      	b.n	800108a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
 80010a4:	4613      	mov	r3, r2
 80010a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a8:	787b      	ldrb	r3, [r7, #1]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ae:	887a      	ldrh	r2, [r7, #2]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010b4:	e003      	b.n	80010be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010b6:	887b      	ldrh	r3, [r7, #2]
 80010b8:	041a      	lsls	r2, r3, #16
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	619a      	str	r2, [r3, #24]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e267      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d075      	beq.n	80011d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ea:	4b88      	ldr	r3, [pc, #544]	; (800130c <HAL_RCC_OscConfig+0x240>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 030c 	and.w	r3, r3, #12
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	d00c      	beq.n	8001110 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010f6:	4b85      	ldr	r3, [pc, #532]	; (800130c <HAL_RCC_OscConfig+0x240>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010fe:	2b08      	cmp	r3, #8
 8001100:	d112      	bne.n	8001128 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001102:	4b82      	ldr	r3, [pc, #520]	; (800130c <HAL_RCC_OscConfig+0x240>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800110a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800110e:	d10b      	bne.n	8001128 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001110:	4b7e      	ldr	r3, [pc, #504]	; (800130c <HAL_RCC_OscConfig+0x240>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d05b      	beq.n	80011d4 <HAL_RCC_OscConfig+0x108>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d157      	bne.n	80011d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e242      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001130:	d106      	bne.n	8001140 <HAL_RCC_OscConfig+0x74>
 8001132:	4b76      	ldr	r3, [pc, #472]	; (800130c <HAL_RCC_OscConfig+0x240>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a75      	ldr	r2, [pc, #468]	; (800130c <HAL_RCC_OscConfig+0x240>)
 8001138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e01d      	b.n	800117c <HAL_RCC_OscConfig+0xb0>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001148:	d10c      	bne.n	8001164 <HAL_RCC_OscConfig+0x98>
 800114a:	4b70      	ldr	r3, [pc, #448]	; (800130c <HAL_RCC_OscConfig+0x240>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a6f      	ldr	r2, [pc, #444]	; (800130c <HAL_RCC_OscConfig+0x240>)
 8001150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	4b6d      	ldr	r3, [pc, #436]	; (800130c <HAL_RCC_OscConfig+0x240>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a6c      	ldr	r2, [pc, #432]	; (800130c <HAL_RCC_OscConfig+0x240>)
 800115c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e00b      	b.n	800117c <HAL_RCC_OscConfig+0xb0>
 8001164:	4b69      	ldr	r3, [pc, #420]	; (800130c <HAL_RCC_OscConfig+0x240>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a68      	ldr	r2, [pc, #416]	; (800130c <HAL_RCC_OscConfig+0x240>)
 800116a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b66      	ldr	r3, [pc, #408]	; (800130c <HAL_RCC_OscConfig+0x240>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a65      	ldr	r2, [pc, #404]	; (800130c <HAL_RCC_OscConfig+0x240>)
 8001176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d013      	beq.n	80011ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff fcd6 	bl	8000b34 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800118c:	f7ff fcd2 	bl	8000b34 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b64      	cmp	r3, #100	; 0x64
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e207      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119e:	4b5b      	ldr	r3, [pc, #364]	; (800130c <HAL_RCC_OscConfig+0x240>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0f0      	beq.n	800118c <HAL_RCC_OscConfig+0xc0>
 80011aa:	e014      	b.n	80011d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ac:	f7ff fcc2 	bl	8000b34 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b4:	f7ff fcbe 	bl	8000b34 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b64      	cmp	r3, #100	; 0x64
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e1f3      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c6:	4b51      	ldr	r3, [pc, #324]	; (800130c <HAL_RCC_OscConfig+0x240>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f0      	bne.n	80011b4 <HAL_RCC_OscConfig+0xe8>
 80011d2:	e000      	b.n	80011d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d063      	beq.n	80012aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011e2:	4b4a      	ldr	r3, [pc, #296]	; (800130c <HAL_RCC_OscConfig+0x240>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f003 030c 	and.w	r3, r3, #12
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00b      	beq.n	8001206 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ee:	4b47      	ldr	r3, [pc, #284]	; (800130c <HAL_RCC_OscConfig+0x240>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011f6:	2b08      	cmp	r3, #8
 80011f8:	d11c      	bne.n	8001234 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011fa:	4b44      	ldr	r3, [pc, #272]	; (800130c <HAL_RCC_OscConfig+0x240>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d116      	bne.n	8001234 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001206:	4b41      	ldr	r3, [pc, #260]	; (800130c <HAL_RCC_OscConfig+0x240>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d005      	beq.n	800121e <HAL_RCC_OscConfig+0x152>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d001      	beq.n	800121e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e1c7      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121e:	4b3b      	ldr	r3, [pc, #236]	; (800130c <HAL_RCC_OscConfig+0x240>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	4937      	ldr	r1, [pc, #220]	; (800130c <HAL_RCC_OscConfig+0x240>)
 800122e:	4313      	orrs	r3, r2
 8001230:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001232:	e03a      	b.n	80012aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d020      	beq.n	800127e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800123c:	4b34      	ldr	r3, [pc, #208]	; (8001310 <HAL_RCC_OscConfig+0x244>)
 800123e:	2201      	movs	r2, #1
 8001240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001242:	f7ff fc77 	bl	8000b34 <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800124a:	f7ff fc73 	bl	8000b34 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e1a8      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800125c:	4b2b      	ldr	r3, [pc, #172]	; (800130c <HAL_RCC_OscConfig+0x240>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0f0      	beq.n	800124a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001268:	4b28      	ldr	r3, [pc, #160]	; (800130c <HAL_RCC_OscConfig+0x240>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	4925      	ldr	r1, [pc, #148]	; (800130c <HAL_RCC_OscConfig+0x240>)
 8001278:	4313      	orrs	r3, r2
 800127a:	600b      	str	r3, [r1, #0]
 800127c:	e015      	b.n	80012aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800127e:	4b24      	ldr	r3, [pc, #144]	; (8001310 <HAL_RCC_OscConfig+0x244>)
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001284:	f7ff fc56 	bl	8000b34 <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800128c:	f7ff fc52 	bl	8000b34 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e187      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <HAL_RCC_OscConfig+0x240>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f0      	bne.n	800128c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d036      	beq.n	8001324 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d016      	beq.n	80012ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <HAL_RCC_OscConfig+0x248>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c4:	f7ff fc36 	bl	8000b34 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012cc:	f7ff fc32 	bl	8000b34 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e167      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_RCC_OscConfig+0x240>)
 80012e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0x200>
 80012ea:	e01b      	b.n	8001324 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_RCC_OscConfig+0x248>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f2:	f7ff fc1f 	bl	8000b34 <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f8:	e00e      	b.n	8001318 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012fa:	f7ff fc1b 	bl	8000b34 <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d907      	bls.n	8001318 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e150      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
 800130c:	40023800 	.word	0x40023800
 8001310:	42470000 	.word	0x42470000
 8001314:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001318:	4b88      	ldr	r3, [pc, #544]	; (800153c <HAL_RCC_OscConfig+0x470>)
 800131a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1ea      	bne.n	80012fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 8097 	beq.w	8001460 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001336:	4b81      	ldr	r3, [pc, #516]	; (800153c <HAL_RCC_OscConfig+0x470>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10f      	bne.n	8001362 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	4b7d      	ldr	r3, [pc, #500]	; (800153c <HAL_RCC_OscConfig+0x470>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	4a7c      	ldr	r2, [pc, #496]	; (800153c <HAL_RCC_OscConfig+0x470>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001350:	6413      	str	r3, [r2, #64]	; 0x40
 8001352:	4b7a      	ldr	r3, [pc, #488]	; (800153c <HAL_RCC_OscConfig+0x470>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800135e:	2301      	movs	r3, #1
 8001360:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001362:	4b77      	ldr	r3, [pc, #476]	; (8001540 <HAL_RCC_OscConfig+0x474>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136a:	2b00      	cmp	r3, #0
 800136c:	d118      	bne.n	80013a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800136e:	4b74      	ldr	r3, [pc, #464]	; (8001540 <HAL_RCC_OscConfig+0x474>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a73      	ldr	r2, [pc, #460]	; (8001540 <HAL_RCC_OscConfig+0x474>)
 8001374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800137a:	f7ff fbdb 	bl	8000b34 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001382:	f7ff fbd7 	bl	8000b34 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e10c      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001394:	4b6a      	ldr	r3, [pc, #424]	; (8001540 <HAL_RCC_OscConfig+0x474>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f0      	beq.n	8001382 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d106      	bne.n	80013b6 <HAL_RCC_OscConfig+0x2ea>
 80013a8:	4b64      	ldr	r3, [pc, #400]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80013aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ac:	4a63      	ldr	r2, [pc, #396]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6713      	str	r3, [r2, #112]	; 0x70
 80013b4:	e01c      	b.n	80013f0 <HAL_RCC_OscConfig+0x324>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	2b05      	cmp	r3, #5
 80013bc:	d10c      	bne.n	80013d8 <HAL_RCC_OscConfig+0x30c>
 80013be:	4b5f      	ldr	r3, [pc, #380]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80013c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c2:	4a5e      	ldr	r2, [pc, #376]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	6713      	str	r3, [r2, #112]	; 0x70
 80013ca:	4b5c      	ldr	r3, [pc, #368]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80013cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ce:	4a5b      	ldr	r2, [pc, #364]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6713      	str	r3, [r2, #112]	; 0x70
 80013d6:	e00b      	b.n	80013f0 <HAL_RCC_OscConfig+0x324>
 80013d8:	4b58      	ldr	r3, [pc, #352]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80013da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013dc:	4a57      	ldr	r2, [pc, #348]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80013de:	f023 0301 	bic.w	r3, r3, #1
 80013e2:	6713      	str	r3, [r2, #112]	; 0x70
 80013e4:	4b55      	ldr	r3, [pc, #340]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80013e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e8:	4a54      	ldr	r2, [pc, #336]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80013ea:	f023 0304 	bic.w	r3, r3, #4
 80013ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d015      	beq.n	8001424 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f8:	f7ff fb9c 	bl	8000b34 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013fe:	e00a      	b.n	8001416 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001400:	f7ff fb98 	bl	8000b34 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	f241 3288 	movw	r2, #5000	; 0x1388
 800140e:	4293      	cmp	r3, r2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e0cb      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001416:	4b49      	ldr	r3, [pc, #292]	; (800153c <HAL_RCC_OscConfig+0x470>)
 8001418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0ee      	beq.n	8001400 <HAL_RCC_OscConfig+0x334>
 8001422:	e014      	b.n	800144e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001424:	f7ff fb86 	bl	8000b34 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800142a:	e00a      	b.n	8001442 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800142c:	f7ff fb82 	bl	8000b34 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	f241 3288 	movw	r2, #5000	; 0x1388
 800143a:	4293      	cmp	r3, r2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e0b5      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001442:	4b3e      	ldr	r3, [pc, #248]	; (800153c <HAL_RCC_OscConfig+0x470>)
 8001444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1ee      	bne.n	800142c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800144e:	7dfb      	ldrb	r3, [r7, #23]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d105      	bne.n	8001460 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001454:	4b39      	ldr	r3, [pc, #228]	; (800153c <HAL_RCC_OscConfig+0x470>)
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	4a38      	ldr	r2, [pc, #224]	; (800153c <HAL_RCC_OscConfig+0x470>)
 800145a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800145e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80a1 	beq.w	80015ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800146a:	4b34      	ldr	r3, [pc, #208]	; (800153c <HAL_RCC_OscConfig+0x470>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	2b08      	cmp	r3, #8
 8001474:	d05c      	beq.n	8001530 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d141      	bne.n	8001502 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800147e:	4b31      	ldr	r3, [pc, #196]	; (8001544 <HAL_RCC_OscConfig+0x478>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001484:	f7ff fb56 	bl	8000b34 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800148c:	f7ff fb52 	bl	8000b34 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e087      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800149e:	4b27      	ldr	r3, [pc, #156]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69da      	ldr	r2, [r3, #28]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	019b      	lsls	r3, r3, #6
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c0:	085b      	lsrs	r3, r3, #1
 80014c2:	3b01      	subs	r3, #1
 80014c4:	041b      	lsls	r3, r3, #16
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014cc:	061b      	lsls	r3, r3, #24
 80014ce:	491b      	ldr	r1, [pc, #108]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <HAL_RCC_OscConfig+0x478>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014da:	f7ff fb2b 	bl	8000b34 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e2:	f7ff fb27 	bl	8000b34 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e05c      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <HAL_RCC_OscConfig+0x470>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0f0      	beq.n	80014e2 <HAL_RCC_OscConfig+0x416>
 8001500:	e054      	b.n	80015ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <HAL_RCC_OscConfig+0x478>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fb14 	bl	8000b34 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001510:	f7ff fb10 	bl	8000b34 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e045      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_RCC_OscConfig+0x470>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x444>
 800152e:	e03d      	b.n	80015ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d107      	bne.n	8001548 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e038      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
 800153c:	40023800 	.word	0x40023800
 8001540:	40007000 	.word	0x40007000
 8001544:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <HAL_RCC_OscConfig+0x4ec>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d028      	beq.n	80015a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001560:	429a      	cmp	r2, r3
 8001562:	d121      	bne.n	80015a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800156e:	429a      	cmp	r2, r3
 8001570:	d11a      	bne.n	80015a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001578:	4013      	ands	r3, r2
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800157e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001580:	4293      	cmp	r3, r2
 8001582:	d111      	bne.n	80015a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158e:	085b      	lsrs	r3, r3, #1
 8001590:	3b01      	subs	r3, #1
 8001592:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001594:	429a      	cmp	r2, r3
 8001596:	d107      	bne.n	80015a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d001      	beq.n	80015ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800

080015bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e0cc      	b.n	800176a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015d0:	4b68      	ldr	r3, [pc, #416]	; (8001774 <HAL_RCC_ClockConfig+0x1b8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d90c      	bls.n	80015f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015de:	4b65      	ldr	r3, [pc, #404]	; (8001774 <HAL_RCC_ClockConfig+0x1b8>)
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e6:	4b63      	ldr	r3, [pc, #396]	; (8001774 <HAL_RCC_ClockConfig+0x1b8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d001      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0b8      	b.n	800176a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d020      	beq.n	8001646 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001610:	4b59      	ldr	r3, [pc, #356]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	4a58      	ldr	r2, [pc, #352]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800161a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	2b00      	cmp	r3, #0
 8001626:	d005      	beq.n	8001634 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001628:	4b53      	ldr	r3, [pc, #332]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	4a52      	ldr	r2, [pc, #328]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001632:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001634:	4b50      	ldr	r3, [pc, #320]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	494d      	ldr	r1, [pc, #308]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	4313      	orrs	r3, r2
 8001644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d044      	beq.n	80016dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d107      	bne.n	800166a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165a:	4b47      	ldr	r3, [pc, #284]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d119      	bne.n	800169a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e07f      	b.n	800176a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d003      	beq.n	800167a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001676:	2b03      	cmp	r3, #3
 8001678:	d107      	bne.n	800168a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167a:	4b3f      	ldr	r3, [pc, #252]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d109      	bne.n	800169a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e06f      	b.n	800176a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168a:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e067      	b.n	800176a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800169a:	4b37      	ldr	r3, [pc, #220]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f023 0203 	bic.w	r2, r3, #3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	4934      	ldr	r1, [pc, #208]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016ac:	f7ff fa42 	bl	8000b34 <HAL_GetTick>
 80016b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b2:	e00a      	b.n	80016ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b4:	f7ff fa3e 	bl	8000b34 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e04f      	b.n	800176a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ca:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 020c 	and.w	r2, r3, #12
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	429a      	cmp	r2, r3
 80016da:	d1eb      	bne.n	80016b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016dc:	4b25      	ldr	r3, [pc, #148]	; (8001774 <HAL_RCC_ClockConfig+0x1b8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d20c      	bcs.n	8001704 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ea:	4b22      	ldr	r3, [pc, #136]	; (8001774 <HAL_RCC_ClockConfig+0x1b8>)
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <HAL_RCC_ClockConfig+0x1b8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e032      	b.n	800176a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d008      	beq.n	8001722 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	4916      	ldr	r1, [pc, #88]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	4313      	orrs	r3, r2
 8001720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d009      	beq.n	8001742 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	490e      	ldr	r1, [pc, #56]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	4313      	orrs	r3, r2
 8001740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001742:	f000 f821 	bl	8001788 <HAL_RCC_GetSysClockFreq>
 8001746:	4602      	mov	r2, r0
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	091b      	lsrs	r3, r3, #4
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	490a      	ldr	r1, [pc, #40]	; (800177c <HAL_RCC_ClockConfig+0x1c0>)
 8001754:	5ccb      	ldrb	r3, [r1, r3]
 8001756:	fa22 f303 	lsr.w	r3, r2, r3
 800175a:	4a09      	ldr	r2, [pc, #36]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 800175c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HAL_RCC_ClockConfig+0x1c8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff f9a2 	bl	8000aac <HAL_InitTick>

  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023c00 	.word	0x40023c00
 8001778:	40023800 	.word	0x40023800
 800177c:	08002548 	.word	0x08002548
 8001780:	20000000 	.word	0x20000000
 8001784:	20000004 	.word	0x20000004

08001788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800178c:	b094      	sub	sp, #80	; 0x50
 800178e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	647b      	str	r3, [r7, #68]	; 0x44
 8001794:	2300      	movs	r3, #0
 8001796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001798:	2300      	movs	r3, #0
 800179a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017a0:	4b79      	ldr	r3, [pc, #484]	; (8001988 <HAL_RCC_GetSysClockFreq+0x200>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 030c 	and.w	r3, r3, #12
 80017a8:	2b08      	cmp	r3, #8
 80017aa:	d00d      	beq.n	80017c8 <HAL_RCC_GetSysClockFreq+0x40>
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	f200 80e1 	bhi.w	8001974 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d002      	beq.n	80017bc <HAL_RCC_GetSysClockFreq+0x34>
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d003      	beq.n	80017c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80017ba:	e0db      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017bc:	4b73      	ldr	r3, [pc, #460]	; (800198c <HAL_RCC_GetSysClockFreq+0x204>)
 80017be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80017c0:	e0db      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017c2:	4b73      	ldr	r3, [pc, #460]	; (8001990 <HAL_RCC_GetSysClockFreq+0x208>)
 80017c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017c6:	e0d8      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017c8:	4b6f      	ldr	r3, [pc, #444]	; (8001988 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017d2:	4b6d      	ldr	r3, [pc, #436]	; (8001988 <HAL_RCC_GetSysClockFreq+0x200>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d063      	beq.n	80018a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017de:	4b6a      	ldr	r3, [pc, #424]	; (8001988 <HAL_RCC_GetSysClockFreq+0x200>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	099b      	lsrs	r3, r3, #6
 80017e4:	2200      	movs	r2, #0
 80017e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80017e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80017ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017f0:	633b      	str	r3, [r7, #48]	; 0x30
 80017f2:	2300      	movs	r3, #0
 80017f4:	637b      	str	r3, [r7, #52]	; 0x34
 80017f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80017fa:	4622      	mov	r2, r4
 80017fc:	462b      	mov	r3, r5
 80017fe:	f04f 0000 	mov.w	r0, #0
 8001802:	f04f 0100 	mov.w	r1, #0
 8001806:	0159      	lsls	r1, r3, #5
 8001808:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800180c:	0150      	lsls	r0, r2, #5
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4621      	mov	r1, r4
 8001814:	1a51      	subs	r1, r2, r1
 8001816:	6139      	str	r1, [r7, #16]
 8001818:	4629      	mov	r1, r5
 800181a:	eb63 0301 	sbc.w	r3, r3, r1
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800182c:	4659      	mov	r1, fp
 800182e:	018b      	lsls	r3, r1, #6
 8001830:	4651      	mov	r1, sl
 8001832:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001836:	4651      	mov	r1, sl
 8001838:	018a      	lsls	r2, r1, #6
 800183a:	4651      	mov	r1, sl
 800183c:	ebb2 0801 	subs.w	r8, r2, r1
 8001840:	4659      	mov	r1, fp
 8001842:	eb63 0901 	sbc.w	r9, r3, r1
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001852:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001856:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800185a:	4690      	mov	r8, r2
 800185c:	4699      	mov	r9, r3
 800185e:	4623      	mov	r3, r4
 8001860:	eb18 0303 	adds.w	r3, r8, r3
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	462b      	mov	r3, r5
 8001868:	eb49 0303 	adc.w	r3, r9, r3
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	f04f 0300 	mov.w	r3, #0
 8001876:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800187a:	4629      	mov	r1, r5
 800187c:	024b      	lsls	r3, r1, #9
 800187e:	4621      	mov	r1, r4
 8001880:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001884:	4621      	mov	r1, r4
 8001886:	024a      	lsls	r2, r1, #9
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800188e:	2200      	movs	r2, #0
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
 8001892:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001894:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001898:	f7fe fc9e 	bl	80001d8 <__aeabi_uldivmod>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4613      	mov	r3, r2
 80018a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018a4:	e058      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a6:	4b38      	ldr	r3, [pc, #224]	; (8001988 <HAL_RCC_GetSysClockFreq+0x200>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	099b      	lsrs	r3, r3, #6
 80018ac:	2200      	movs	r2, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	4611      	mov	r1, r2
 80018b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018b6:	623b      	str	r3, [r7, #32]
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
 80018bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018c0:	4642      	mov	r2, r8
 80018c2:	464b      	mov	r3, r9
 80018c4:	f04f 0000 	mov.w	r0, #0
 80018c8:	f04f 0100 	mov.w	r1, #0
 80018cc:	0159      	lsls	r1, r3, #5
 80018ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018d2:	0150      	lsls	r0, r2, #5
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4641      	mov	r1, r8
 80018da:	ebb2 0a01 	subs.w	sl, r2, r1
 80018de:	4649      	mov	r1, r9
 80018e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018f8:	ebb2 040a 	subs.w	r4, r2, sl
 80018fc:	eb63 050b 	sbc.w	r5, r3, fp
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	00eb      	lsls	r3, r5, #3
 800190a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800190e:	00e2      	lsls	r2, r4, #3
 8001910:	4614      	mov	r4, r2
 8001912:	461d      	mov	r5, r3
 8001914:	4643      	mov	r3, r8
 8001916:	18e3      	adds	r3, r4, r3
 8001918:	603b      	str	r3, [r7, #0]
 800191a:	464b      	mov	r3, r9
 800191c:	eb45 0303 	adc.w	r3, r5, r3
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	f04f 0300 	mov.w	r3, #0
 800192a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800192e:	4629      	mov	r1, r5
 8001930:	028b      	lsls	r3, r1, #10
 8001932:	4621      	mov	r1, r4
 8001934:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001938:	4621      	mov	r1, r4
 800193a:	028a      	lsls	r2, r1, #10
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001942:	2200      	movs	r2, #0
 8001944:	61bb      	str	r3, [r7, #24]
 8001946:	61fa      	str	r2, [r7, #28]
 8001948:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800194c:	f7fe fc44 	bl	80001d8 <__aeabi_uldivmod>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4613      	mov	r3, r2
 8001956:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <HAL_RCC_GetSysClockFreq+0x200>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	0c1b      	lsrs	r3, r3, #16
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	3301      	adds	r3, #1
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001968:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800196a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800196c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001970:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001972:	e002      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <HAL_RCC_GetSysClockFreq+0x204>)
 8001976:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800197a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800197c:	4618      	mov	r0, r3
 800197e:	3750      	adds	r7, #80	; 0x50
 8001980:	46bd      	mov	sp, r7
 8001982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	00f42400 	.word	0x00f42400
 8001990:	007a1200 	.word	0x007a1200

08001994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800199a:	681b      	ldr	r3, [r3, #0]
}
 800199c:	4618      	mov	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	20000000 	.word	0x20000000

080019ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019b0:	f7ff fff0 	bl	8001994 <HAL_RCC_GetHCLKFreq>
 80019b4:	4602      	mov	r2, r0
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	0a9b      	lsrs	r3, r3, #10
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	4903      	ldr	r1, [pc, #12]	; (80019d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019c2:	5ccb      	ldrb	r3, [r1, r3]
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40023800 	.word	0x40023800
 80019d0:	08002558 	.word	0x08002558

080019d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019d8:	f7ff ffdc 	bl	8001994 <HAL_RCC_GetHCLKFreq>
 80019dc:	4602      	mov	r2, r0
 80019de:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	0b5b      	lsrs	r3, r3, #13
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	4903      	ldr	r1, [pc, #12]	; (80019f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ea:	5ccb      	ldrb	r3, [r1, r3]
 80019ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40023800 	.word	0x40023800
 80019f8:	08002558 	.word	0x08002558

080019fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e07b      	b.n	8001b06 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d108      	bne.n	8001a28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a1e:	d009      	beq.n	8001a34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
 8001a26:	e005      	b.n	8001a34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d106      	bne.n	8001a54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7fe fef4 	bl	800083c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2202      	movs	r2, #2
 8001a58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab8:	ea42 0103 	orr.w	r1, r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	0c1b      	lsrs	r3, r3, #16
 8001ad2:	f003 0104 	and.w	r1, r3, #4
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	f003 0210 	and.w	r2, r3, #16
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	69da      	ldr	r2, [r3, #28]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001af4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b088      	sub	sp, #32
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	603b      	str	r3, [r7, #0]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d101      	bne.n	8001b30 <HAL_SPI_Transmit+0x22>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e12d      	b.n	8001d8c <HAL_SPI_Transmit+0x27e>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b38:	f7fe fffc 	bl	8000b34 <HAL_GetTick>
 8001b3c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d002      	beq.n	8001b54 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b52:	e116      	b.n	8001d82 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <HAL_SPI_Transmit+0x52>
 8001b5a:	88fb      	ldrh	r3, [r7, #6]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d102      	bne.n	8001b66 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b64:	e10d      	b.n	8001d82 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2203      	movs	r2, #3
 8001b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	88fa      	ldrh	r2, [r7, #6]
 8001b7e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	88fa      	ldrh	r2, [r7, #6]
 8001b84:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bac:	d10f      	bne.n	8001bce <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bbc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bcc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd8:	2b40      	cmp	r3, #64	; 0x40
 8001bda:	d007      	beq.n	8001bec <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bf4:	d14f      	bne.n	8001c96 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d002      	beq.n	8001c04 <HAL_SPI_Transmit+0xf6>
 8001bfe:	8afb      	ldrh	r3, [r7, #22]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d142      	bne.n	8001c8a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c08:	881a      	ldrh	r2, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c14:	1c9a      	adds	r2, r3, #2
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	3b01      	subs	r3, #1
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c28:	e02f      	b.n	8001c8a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d112      	bne.n	8001c5e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3c:	881a      	ldrh	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c48:	1c9a      	adds	r2, r3, #2
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	3b01      	subs	r3, #1
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c5c:	e015      	b.n	8001c8a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c5e:	f7fe ff69 	bl	8000b34 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d803      	bhi.n	8001c76 <HAL_SPI_Transmit+0x168>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c74:	d102      	bne.n	8001c7c <HAL_SPI_Transmit+0x16e>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d106      	bne.n	8001c8a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001c88:	e07b      	b.n	8001d82 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1ca      	bne.n	8001c2a <HAL_SPI_Transmit+0x11c>
 8001c94:	e050      	b.n	8001d38 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <HAL_SPI_Transmit+0x196>
 8001c9e:	8afb      	ldrh	r3, [r7, #22]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d144      	bne.n	8001d2e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	330c      	adds	r3, #12
 8001cae:	7812      	ldrb	r2, [r2, #0]
 8001cb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001cca:	e030      	b.n	8001d2e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d113      	bne.n	8001d02 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	330c      	adds	r3, #12
 8001ce4:	7812      	ldrb	r2, [r2, #0]
 8001ce6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	86da      	strh	r2, [r3, #54]	; 0x36
 8001d00:	e015      	b.n	8001d2e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d02:	f7fe ff17 	bl	8000b34 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d803      	bhi.n	8001d1a <HAL_SPI_Transmit+0x20c>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d18:	d102      	bne.n	8001d20 <HAL_SPI_Transmit+0x212>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d106      	bne.n	8001d2e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001d2c:	e029      	b.n	8001d82 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1c9      	bne.n	8001ccc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	6839      	ldr	r1, [r7, #0]
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f000 f8b1 	bl	8001ea4 <SPI_EndRxTxTransaction>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d002      	beq.n	8001d4e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10a      	bne.n	8001d6c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	77fb      	strb	r3, [r7, #31]
 8001d78:	e003      	b.n	8001d82 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3720      	adds	r7, #32
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	4613      	mov	r3, r2
 8001da2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001da4:	f7fe fec6 	bl	8000b34 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dac:	1a9b      	subs	r3, r3, r2
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	4413      	add	r3, r2
 8001db2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001db4:	f7fe febe 	bl	8000b34 <HAL_GetTick>
 8001db8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001dba:	4b39      	ldr	r3, [pc, #228]	; (8001ea0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	015b      	lsls	r3, r3, #5
 8001dc0:	0d1b      	lsrs	r3, r3, #20
 8001dc2:	69fa      	ldr	r2, [r7, #28]
 8001dc4:	fb02 f303 	mul.w	r3, r2, r3
 8001dc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001dca:	e054      	b.n	8001e76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd2:	d050      	beq.n	8001e76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001dd4:	f7fe feae 	bl	8000b34 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	69fa      	ldr	r2, [r7, #28]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d902      	bls.n	8001dea <SPI_WaitFlagStateUntilTimeout+0x56>
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d13d      	bne.n	8001e66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001df8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e02:	d111      	bne.n	8001e28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e0c:	d004      	beq.n	8001e18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e16:	d107      	bne.n	8001e28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e30:	d10f      	bne.n	8001e52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e017      	b.n	8001e96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	bf0c      	ite	eq
 8001e86:	2301      	moveq	r3, #1
 8001e88:	2300      	movne	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d19b      	bne.n	8001dcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3720      	adds	r7, #32
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000000 	.word	0x20000000

08001ea4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	2102      	movs	r1, #2
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f7ff ff6a 	bl	8001d94 <SPI_WaitFlagStateUntilTimeout>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d007      	beq.n	8001ed6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eca:	f043 0220 	orr.w	r2, r3, #32
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e032      	b.n	8001f3c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001ed6:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <SPI_EndRxTxTransaction+0xa0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1b      	ldr	r2, [pc, #108]	; (8001f48 <SPI_EndRxTxTransaction+0xa4>)
 8001edc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee0:	0d5b      	lsrs	r3, r3, #21
 8001ee2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ee6:	fb02 f303 	mul.w	r3, r2, r3
 8001eea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ef4:	d112      	bne.n	8001f1c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2200      	movs	r2, #0
 8001efe:	2180      	movs	r1, #128	; 0x80
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f7ff ff47 	bl	8001d94 <SPI_WaitFlagStateUntilTimeout>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d016      	beq.n	8001f3a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f10:	f043 0220 	orr.w	r2, r3, #32
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e00f      	b.n	8001f3c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00a      	beq.n	8001f38 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	3b01      	subs	r3, #1
 8001f26:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f32:	2b80      	cmp	r3, #128	; 0x80
 8001f34:	d0f2      	beq.n	8001f1c <SPI_EndRxTxTransaction+0x78>
 8001f36:	e000      	b.n	8001f3a <SPI_EndRxTxTransaction+0x96>
        break;
 8001f38:	bf00      	nop
  }

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000000 	.word	0x20000000
 8001f48:	165e9f81 	.word	0x165e9f81

08001f4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e042      	b.n	8001fe4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d106      	bne.n	8001f78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7fe fcca 	bl	800090c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2224      	movs	r2, #36	; 0x24
 8001f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f82b 	bl	8001fec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	695a      	ldr	r2, [r3, #20]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ff0:	b0c0      	sub	sp, #256	; 0x100
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002008:	68d9      	ldr	r1, [r3, #12]
 800200a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	ea40 0301 	orr.w	r3, r0, r1
 8002014:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	431a      	orrs	r2, r3
 8002024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	431a      	orrs	r2, r3
 800202c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	4313      	orrs	r3, r2
 8002034:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002044:	f021 010c 	bic.w	r1, r1, #12
 8002048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002052:	430b      	orrs	r3, r1
 8002054:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002066:	6999      	ldr	r1, [r3, #24]
 8002068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	ea40 0301 	orr.w	r3, r0, r1
 8002072:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	4b8f      	ldr	r3, [pc, #572]	; (80022b8 <UART_SetConfig+0x2cc>)
 800207c:	429a      	cmp	r2, r3
 800207e:	d005      	beq.n	800208c <UART_SetConfig+0xa0>
 8002080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	4b8d      	ldr	r3, [pc, #564]	; (80022bc <UART_SetConfig+0x2d0>)
 8002088:	429a      	cmp	r2, r3
 800208a:	d104      	bne.n	8002096 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800208c:	f7ff fca2 	bl	80019d4 <HAL_RCC_GetPCLK2Freq>
 8002090:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002094:	e003      	b.n	800209e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002096:	f7ff fc89 	bl	80019ac <HAL_RCC_GetPCLK1Freq>
 800209a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800209e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020a8:	f040 810c 	bne.w	80022c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020b0:	2200      	movs	r2, #0
 80020b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80020b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80020ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80020be:	4622      	mov	r2, r4
 80020c0:	462b      	mov	r3, r5
 80020c2:	1891      	adds	r1, r2, r2
 80020c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80020c6:	415b      	adcs	r3, r3
 80020c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80020ce:	4621      	mov	r1, r4
 80020d0:	eb12 0801 	adds.w	r8, r2, r1
 80020d4:	4629      	mov	r1, r5
 80020d6:	eb43 0901 	adc.w	r9, r3, r1
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	f04f 0300 	mov.w	r3, #0
 80020e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020ee:	4690      	mov	r8, r2
 80020f0:	4699      	mov	r9, r3
 80020f2:	4623      	mov	r3, r4
 80020f4:	eb18 0303 	adds.w	r3, r8, r3
 80020f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80020fc:	462b      	mov	r3, r5
 80020fe:	eb49 0303 	adc.w	r3, r9, r3
 8002102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002112:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002116:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800211a:	460b      	mov	r3, r1
 800211c:	18db      	adds	r3, r3, r3
 800211e:	653b      	str	r3, [r7, #80]	; 0x50
 8002120:	4613      	mov	r3, r2
 8002122:	eb42 0303 	adc.w	r3, r2, r3
 8002126:	657b      	str	r3, [r7, #84]	; 0x54
 8002128:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800212c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002130:	f7fe f852 	bl	80001d8 <__aeabi_uldivmod>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4b61      	ldr	r3, [pc, #388]	; (80022c0 <UART_SetConfig+0x2d4>)
 800213a:	fba3 2302 	umull	r2, r3, r3, r2
 800213e:	095b      	lsrs	r3, r3, #5
 8002140:	011c      	lsls	r4, r3, #4
 8002142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002146:	2200      	movs	r2, #0
 8002148:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800214c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002150:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002154:	4642      	mov	r2, r8
 8002156:	464b      	mov	r3, r9
 8002158:	1891      	adds	r1, r2, r2
 800215a:	64b9      	str	r1, [r7, #72]	; 0x48
 800215c:	415b      	adcs	r3, r3
 800215e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002160:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002164:	4641      	mov	r1, r8
 8002166:	eb12 0a01 	adds.w	sl, r2, r1
 800216a:	4649      	mov	r1, r9
 800216c:	eb43 0b01 	adc.w	fp, r3, r1
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	f04f 0300 	mov.w	r3, #0
 8002178:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800217c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002180:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002184:	4692      	mov	sl, r2
 8002186:	469b      	mov	fp, r3
 8002188:	4643      	mov	r3, r8
 800218a:	eb1a 0303 	adds.w	r3, sl, r3
 800218e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002192:	464b      	mov	r3, r9
 8002194:	eb4b 0303 	adc.w	r3, fp, r3
 8002198:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800219c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80021ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80021b0:	460b      	mov	r3, r1
 80021b2:	18db      	adds	r3, r3, r3
 80021b4:	643b      	str	r3, [r7, #64]	; 0x40
 80021b6:	4613      	mov	r3, r2
 80021b8:	eb42 0303 	adc.w	r3, r2, r3
 80021bc:	647b      	str	r3, [r7, #68]	; 0x44
 80021be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80021c6:	f7fe f807 	bl	80001d8 <__aeabi_uldivmod>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4611      	mov	r1, r2
 80021d0:	4b3b      	ldr	r3, [pc, #236]	; (80022c0 <UART_SetConfig+0x2d4>)
 80021d2:	fba3 2301 	umull	r2, r3, r3, r1
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	2264      	movs	r2, #100	; 0x64
 80021da:	fb02 f303 	mul.w	r3, r2, r3
 80021de:	1acb      	subs	r3, r1, r3
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80021e6:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <UART_SetConfig+0x2d4>)
 80021e8:	fba3 2302 	umull	r2, r3, r3, r2
 80021ec:	095b      	lsrs	r3, r3, #5
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021f4:	441c      	add	r4, r3
 80021f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021fa:	2200      	movs	r2, #0
 80021fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002200:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002204:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002208:	4642      	mov	r2, r8
 800220a:	464b      	mov	r3, r9
 800220c:	1891      	adds	r1, r2, r2
 800220e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002210:	415b      	adcs	r3, r3
 8002212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002214:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002218:	4641      	mov	r1, r8
 800221a:	1851      	adds	r1, r2, r1
 800221c:	6339      	str	r1, [r7, #48]	; 0x30
 800221e:	4649      	mov	r1, r9
 8002220:	414b      	adcs	r3, r1
 8002222:	637b      	str	r3, [r7, #52]	; 0x34
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002230:	4659      	mov	r1, fp
 8002232:	00cb      	lsls	r3, r1, #3
 8002234:	4651      	mov	r1, sl
 8002236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800223a:	4651      	mov	r1, sl
 800223c:	00ca      	lsls	r2, r1, #3
 800223e:	4610      	mov	r0, r2
 8002240:	4619      	mov	r1, r3
 8002242:	4603      	mov	r3, r0
 8002244:	4642      	mov	r2, r8
 8002246:	189b      	adds	r3, r3, r2
 8002248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800224c:	464b      	mov	r3, r9
 800224e:	460a      	mov	r2, r1
 8002250:	eb42 0303 	adc.w	r3, r2, r3
 8002254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002264:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002268:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800226c:	460b      	mov	r3, r1
 800226e:	18db      	adds	r3, r3, r3
 8002270:	62bb      	str	r3, [r7, #40]	; 0x28
 8002272:	4613      	mov	r3, r2
 8002274:	eb42 0303 	adc.w	r3, r2, r3
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800227a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800227e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002282:	f7fd ffa9 	bl	80001d8 <__aeabi_uldivmod>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <UART_SetConfig+0x2d4>)
 800228c:	fba3 1302 	umull	r1, r3, r3, r2
 8002290:	095b      	lsrs	r3, r3, #5
 8002292:	2164      	movs	r1, #100	; 0x64
 8002294:	fb01 f303 	mul.w	r3, r1, r3
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	3332      	adds	r3, #50	; 0x32
 800229e:	4a08      	ldr	r2, [pc, #32]	; (80022c0 <UART_SetConfig+0x2d4>)
 80022a0:	fba2 2303 	umull	r2, r3, r2, r3
 80022a4:	095b      	lsrs	r3, r3, #5
 80022a6:	f003 0207 	and.w	r2, r3, #7
 80022aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4422      	add	r2, r4
 80022b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80022b4:	e106      	b.n	80024c4 <UART_SetConfig+0x4d8>
 80022b6:	bf00      	nop
 80022b8:	40011000 	.word	0x40011000
 80022bc:	40011400 	.word	0x40011400
 80022c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022c8:	2200      	movs	r2, #0
 80022ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80022ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80022d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80022d6:	4642      	mov	r2, r8
 80022d8:	464b      	mov	r3, r9
 80022da:	1891      	adds	r1, r2, r2
 80022dc:	6239      	str	r1, [r7, #32]
 80022de:	415b      	adcs	r3, r3
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
 80022e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022e6:	4641      	mov	r1, r8
 80022e8:	1854      	adds	r4, r2, r1
 80022ea:	4649      	mov	r1, r9
 80022ec:	eb43 0501 	adc.w	r5, r3, r1
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	00eb      	lsls	r3, r5, #3
 80022fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022fe:	00e2      	lsls	r2, r4, #3
 8002300:	4614      	mov	r4, r2
 8002302:	461d      	mov	r5, r3
 8002304:	4643      	mov	r3, r8
 8002306:	18e3      	adds	r3, r4, r3
 8002308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800230c:	464b      	mov	r3, r9
 800230e:	eb45 0303 	adc.w	r3, r5, r3
 8002312:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002322:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002332:	4629      	mov	r1, r5
 8002334:	008b      	lsls	r3, r1, #2
 8002336:	4621      	mov	r1, r4
 8002338:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800233c:	4621      	mov	r1, r4
 800233e:	008a      	lsls	r2, r1, #2
 8002340:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002344:	f7fd ff48 	bl	80001d8 <__aeabi_uldivmod>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4b60      	ldr	r3, [pc, #384]	; (80024d0 <UART_SetConfig+0x4e4>)
 800234e:	fba3 2302 	umull	r2, r3, r3, r2
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	011c      	lsls	r4, r3, #4
 8002356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800235a:	2200      	movs	r2, #0
 800235c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002360:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002364:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002368:	4642      	mov	r2, r8
 800236a:	464b      	mov	r3, r9
 800236c:	1891      	adds	r1, r2, r2
 800236e:	61b9      	str	r1, [r7, #24]
 8002370:	415b      	adcs	r3, r3
 8002372:	61fb      	str	r3, [r7, #28]
 8002374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002378:	4641      	mov	r1, r8
 800237a:	1851      	adds	r1, r2, r1
 800237c:	6139      	str	r1, [r7, #16]
 800237e:	4649      	mov	r1, r9
 8002380:	414b      	adcs	r3, r1
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	f04f 0300 	mov.w	r3, #0
 800238c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002390:	4659      	mov	r1, fp
 8002392:	00cb      	lsls	r3, r1, #3
 8002394:	4651      	mov	r1, sl
 8002396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800239a:	4651      	mov	r1, sl
 800239c:	00ca      	lsls	r2, r1, #3
 800239e:	4610      	mov	r0, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	4603      	mov	r3, r0
 80023a4:	4642      	mov	r2, r8
 80023a6:	189b      	adds	r3, r3, r2
 80023a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023ac:	464b      	mov	r3, r9
 80023ae:	460a      	mov	r2, r1
 80023b0:	eb42 0303 	adc.w	r3, r2, r3
 80023b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80023c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80023d0:	4649      	mov	r1, r9
 80023d2:	008b      	lsls	r3, r1, #2
 80023d4:	4641      	mov	r1, r8
 80023d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023da:	4641      	mov	r1, r8
 80023dc:	008a      	lsls	r2, r1, #2
 80023de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80023e2:	f7fd fef9 	bl	80001d8 <__aeabi_uldivmod>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4611      	mov	r1, r2
 80023ec:	4b38      	ldr	r3, [pc, #224]	; (80024d0 <UART_SetConfig+0x4e4>)
 80023ee:	fba3 2301 	umull	r2, r3, r3, r1
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	2264      	movs	r2, #100	; 0x64
 80023f6:	fb02 f303 	mul.w	r3, r2, r3
 80023fa:	1acb      	subs	r3, r1, r3
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	3332      	adds	r3, #50	; 0x32
 8002400:	4a33      	ldr	r2, [pc, #204]	; (80024d0 <UART_SetConfig+0x4e4>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800240c:	441c      	add	r4, r3
 800240e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002412:	2200      	movs	r2, #0
 8002414:	673b      	str	r3, [r7, #112]	; 0x70
 8002416:	677a      	str	r2, [r7, #116]	; 0x74
 8002418:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800241c:	4642      	mov	r2, r8
 800241e:	464b      	mov	r3, r9
 8002420:	1891      	adds	r1, r2, r2
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	415b      	adcs	r3, r3
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800242c:	4641      	mov	r1, r8
 800242e:	1851      	adds	r1, r2, r1
 8002430:	6039      	str	r1, [r7, #0]
 8002432:	4649      	mov	r1, r9
 8002434:	414b      	adcs	r3, r1
 8002436:	607b      	str	r3, [r7, #4]
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002444:	4659      	mov	r1, fp
 8002446:	00cb      	lsls	r3, r1, #3
 8002448:	4651      	mov	r1, sl
 800244a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800244e:	4651      	mov	r1, sl
 8002450:	00ca      	lsls	r2, r1, #3
 8002452:	4610      	mov	r0, r2
 8002454:	4619      	mov	r1, r3
 8002456:	4603      	mov	r3, r0
 8002458:	4642      	mov	r2, r8
 800245a:	189b      	adds	r3, r3, r2
 800245c:	66bb      	str	r3, [r7, #104]	; 0x68
 800245e:	464b      	mov	r3, r9
 8002460:	460a      	mov	r2, r1
 8002462:	eb42 0303 	adc.w	r3, r2, r3
 8002466:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	663b      	str	r3, [r7, #96]	; 0x60
 8002472:	667a      	str	r2, [r7, #100]	; 0x64
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002480:	4649      	mov	r1, r9
 8002482:	008b      	lsls	r3, r1, #2
 8002484:	4641      	mov	r1, r8
 8002486:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800248a:	4641      	mov	r1, r8
 800248c:	008a      	lsls	r2, r1, #2
 800248e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002492:	f7fd fea1 	bl	80001d8 <__aeabi_uldivmod>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <UART_SetConfig+0x4e4>)
 800249c:	fba3 1302 	umull	r1, r3, r3, r2
 80024a0:	095b      	lsrs	r3, r3, #5
 80024a2:	2164      	movs	r1, #100	; 0x64
 80024a4:	fb01 f303 	mul.w	r3, r1, r3
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	3332      	adds	r3, #50	; 0x32
 80024ae:	4a08      	ldr	r2, [pc, #32]	; (80024d0 <UART_SetConfig+0x4e4>)
 80024b0:	fba2 2303 	umull	r2, r3, r2, r3
 80024b4:	095b      	lsrs	r3, r3, #5
 80024b6:	f003 020f 	and.w	r2, r3, #15
 80024ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4422      	add	r2, r4
 80024c2:	609a      	str	r2, [r3, #8]
}
 80024c4:	bf00      	nop
 80024c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80024ca:	46bd      	mov	sp, r7
 80024cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024d0:	51eb851f 	.word	0x51eb851f

080024d4 <memset>:
 80024d4:	4402      	add	r2, r0
 80024d6:	4603      	mov	r3, r0
 80024d8:	4293      	cmp	r3, r2
 80024da:	d100      	bne.n	80024de <memset+0xa>
 80024dc:	4770      	bx	lr
 80024de:	f803 1b01 	strb.w	r1, [r3], #1
 80024e2:	e7f9      	b.n	80024d8 <memset+0x4>

080024e4 <__libc_init_array>:
 80024e4:	b570      	push	{r4, r5, r6, lr}
 80024e6:	4d0d      	ldr	r5, [pc, #52]	; (800251c <__libc_init_array+0x38>)
 80024e8:	4c0d      	ldr	r4, [pc, #52]	; (8002520 <__libc_init_array+0x3c>)
 80024ea:	1b64      	subs	r4, r4, r5
 80024ec:	10a4      	asrs	r4, r4, #2
 80024ee:	2600      	movs	r6, #0
 80024f0:	42a6      	cmp	r6, r4
 80024f2:	d109      	bne.n	8002508 <__libc_init_array+0x24>
 80024f4:	4d0b      	ldr	r5, [pc, #44]	; (8002524 <__libc_init_array+0x40>)
 80024f6:	4c0c      	ldr	r4, [pc, #48]	; (8002528 <__libc_init_array+0x44>)
 80024f8:	f000 f818 	bl	800252c <_init>
 80024fc:	1b64      	subs	r4, r4, r5
 80024fe:	10a4      	asrs	r4, r4, #2
 8002500:	2600      	movs	r6, #0
 8002502:	42a6      	cmp	r6, r4
 8002504:	d105      	bne.n	8002512 <__libc_init_array+0x2e>
 8002506:	bd70      	pop	{r4, r5, r6, pc}
 8002508:	f855 3b04 	ldr.w	r3, [r5], #4
 800250c:	4798      	blx	r3
 800250e:	3601      	adds	r6, #1
 8002510:	e7ee      	b.n	80024f0 <__libc_init_array+0xc>
 8002512:	f855 3b04 	ldr.w	r3, [r5], #4
 8002516:	4798      	blx	r3
 8002518:	3601      	adds	r6, #1
 800251a:	e7f2      	b.n	8002502 <__libc_init_array+0x1e>
 800251c:	08002568 	.word	0x08002568
 8002520:	08002568 	.word	0x08002568
 8002524:	08002568 	.word	0x08002568
 8002528:	0800256c 	.word	0x0800256c

0800252c <_init>:
 800252c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800252e:	bf00      	nop
 8002530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002532:	bc08      	pop	{r3}
 8002534:	469e      	mov	lr, r3
 8002536:	4770      	bx	lr

08002538 <_fini>:
 8002538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253a:	bf00      	nop
 800253c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253e:	bc08      	pop	{r3}
 8002540:	469e      	mov	lr, r3
 8002542:	4770      	bx	lr
