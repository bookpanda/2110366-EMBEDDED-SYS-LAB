
Lab5.3_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046b4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800484c  0800484c  0001484c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800486c  0800486c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800486c  0800486c  0001486c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004874  08004874  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004874  08004874  00014874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004878  08004878  00014878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800487c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08004888  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08004888  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000abf3  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018ff  00000000  00000000  0002ac72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000988  00000000  00000000  0002c578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000780  00000000  00000000  0002cf00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014fe9  00000000  00000000  0002d680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c07d  00000000  00000000  00042669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008472c  00000000  00000000  0004e6e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027a0  00000000  00000000  000d2e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000d55b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004834 	.word	0x08004834

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004834 	.word	0x08004834

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <HAL_I2C_SlaveRxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1) {
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a08      	ldr	r2, [pc, #32]	; (8000500 <HAL_I2C_SlaveRxCpltCallback+0x2c>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d109      	bne.n	80004f8 <HAL_I2C_SlaveRxCpltCallback+0x24>
		HAL_UART_Transmit(&huart2, "b", 1, 100);
 80004e4:	2364      	movs	r3, #100	; 0x64
 80004e6:	2201      	movs	r2, #1
 80004e8:	4906      	ldr	r1, [pc, #24]	; (8000504 <HAL_I2C_SlaveRxCpltCallback+0x30>)
 80004ea:	4807      	ldr	r0, [pc, #28]	; (8000508 <HAL_I2C_SlaveRxCpltCallback+0x34>)
 80004ec:	f003 fdba 	bl	8004064 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004f0:	2120      	movs	r1, #32
 80004f2:	4806      	ldr	r0, [pc, #24]	; (800050c <HAL_I2C_SlaveRxCpltCallback+0x38>)
 80004f4:	f000 fec7 	bl	8001286 <HAL_GPIO_TogglePin>
	}
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000028 	.word	0x20000028
 8000504:	0800484c 	.word	0x0800484c
 8000508:	200000d0 	.word	0x200000d0
 800050c:	40020000 	.word	0x40020000

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fb29 	bl	8000b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f83b 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f929 	bl	8000774 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000522:	f000 f8fd 	bl	8000720 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000526:	f000 f89f 	bl	8000668 <MX_I2C1_Init>
  MX_I2C2_Init();
 800052a:	f000 f8cb 	bl	80006c4 <MX_I2C2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  uint16_t slaveADDR = 0x12<<1;
  while (1)
  {
	  if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 800052e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000532:	4813      	ldr	r0, [pc, #76]	; (8000580 <main+0x70>)
 8000534:	f000 fe76 	bl	8001224 <HAL_GPIO_ReadPin>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d1f7      	bne.n	800052e <main+0x1e>
		   HAL_UART_Transmit(&huart2, "a", 1, 100);
 800053e:	2364      	movs	r3, #100	; 0x64
 8000540:	2201      	movs	r2, #1
 8000542:	4910      	ldr	r1, [pc, #64]	; (8000584 <main+0x74>)
 8000544:	4810      	ldr	r0, [pc, #64]	; (8000588 <main+0x78>)
 8000546:	f003 fd8d 	bl	8004064 <HAL_UART_Transmit>
		   HAL_I2C_Master_Transmit(&hi2c2, 0, "a", 1, 100);
 800054a:	2364      	movs	r3, #100	; 0x64
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2301      	movs	r3, #1
 8000550:	4a0c      	ldr	r2, [pc, #48]	; (8000584 <main+0x74>)
 8000552:	2100      	movs	r1, #0
 8000554:	480d      	ldr	r0, [pc, #52]	; (800058c <main+0x7c>)
 8000556:	f001 f80b 	bl	8001570 <HAL_I2C_Master_Transmit>
		   HAL_Delay(50);
 800055a:	2032      	movs	r0, #50	; 0x32
 800055c:	f000 fb78 	bl	8000c50 <HAL_Delay>
		   HAL_I2C_Slave_Receive_IT(&hi2c1, &c, 1);
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	2201      	movs	r2, #1
 8000564:	4619      	mov	r1, r3
 8000566:	480a      	ldr	r0, [pc, #40]	; (8000590 <main+0x80>)
 8000568:	f001 f900 	bl	800176c <HAL_I2C_Slave_Receive_IT>
		   while(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {}
 800056c:	bf00      	nop
 800056e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000572:	4803      	ldr	r0, [pc, #12]	; (8000580 <main+0x70>)
 8000574:	f000 fe56 	bl	8001224 <HAL_GPIO_ReadPin>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d0f7      	beq.n	800056e <main+0x5e>
	  if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 800057e:	e7d6      	b.n	800052e <main+0x1e>
 8000580:	40020800 	.word	0x40020800
 8000584:	08004850 	.word	0x08004850
 8000588:	200000d0 	.word	0x200000d0
 800058c:	2000007c 	.word	0x2000007c
 8000590:	20000028 	.word	0x20000028

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	; 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2230      	movs	r2, #48	; 0x30
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f004 f91a 	bl	80047dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4b28      	ldr	r3, [pc, #160]	; (8000660 <SystemClock_Config+0xcc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	4a27      	ldr	r2, [pc, #156]	; (8000660 <SystemClock_Config+0xcc>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	; 0x40
 80005c8:	4b25      	ldr	r3, [pc, #148]	; (8000660 <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b22      	ldr	r3, [pc, #136]	; (8000664 <SystemClock_Config+0xd0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a21      	ldr	r2, [pc, #132]	; (8000664 <SystemClock_Config+0xd0>)
 80005de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f0:	2302      	movs	r3, #2
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	2310      	movs	r3, #16
 80005fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fc:	2302      	movs	r3, #2
 80005fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000600:	2300      	movs	r3, #0
 8000602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000604:	2310      	movs	r3, #16
 8000606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000608:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800060c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800060e:	2304      	movs	r3, #4
 8000610:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000612:	2304      	movs	r3, #4
 8000614:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	4618      	mov	r0, r3
 800061c:	f003 f83a 	bl	8003694 <HAL_RCC_OscConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000626:	f000 f913 	bl	8000850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	230f      	movs	r3, #15
 800062c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062e:	2302      	movs	r3, #2
 8000630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2102      	movs	r1, #2
 8000646:	4618      	mov	r0, r3
 8000648:	f003 fa9c 	bl	8003b84 <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000652:	f000 f8fd 	bl	8000850 <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3750      	adds	r7, #80	; 0x50
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <MX_I2C1_Init+0x50>)
 800066e:	4a13      	ldr	r2, [pc, #76]	; (80006bc <MX_I2C1_Init+0x54>)
 8000670:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000674:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <MX_I2C1_Init+0x58>)
 8000676:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000686:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800068a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <MX_I2C1_Init+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000692:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_I2C1_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_I2C1_Init+0x50>)
 80006a6:	f000 fe09 	bl	80012bc <HAL_I2C_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006b0:	f000 f8ce 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000028 	.word	0x20000028
 80006bc:	40005400 	.word	0x40005400
 80006c0:	000186a0 	.word	0x000186a0

080006c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_I2C2_Init+0x50>)
 80006ca:	4a13      	ldr	r2, [pc, #76]	; (8000718 <MX_I2C2_Init+0x54>)
 80006cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_I2C2_Init+0x50>)
 80006d0:	4a12      	ldr	r2, [pc, #72]	; (800071c <MX_I2C2_Init+0x58>)
 80006d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_I2C2_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_I2C2_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_I2C2_Init+0x50>)
 80006e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006e6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <MX_I2C2_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_I2C2_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <MX_I2C2_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_I2C2_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_I2C2_Init+0x50>)
 8000702:	f000 fddb 	bl	80012bc <HAL_I2C_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800070c:	f000 f8a0 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	2000007c 	.word	0x2000007c
 8000718:	40005800 	.word	0x40005800
 800071c:	000186a0 	.word	0x000186a0

08000720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000726:	4a12      	ldr	r2, [pc, #72]	; (8000770 <MX_USART2_UART_Init+0x50>)
 8000728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000758:	f003 fc34 	bl	8003fc4 <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000762:	f000 f875 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200000d0 	.word	0x200000d0
 8000770:	40004400 	.word	0x40004400

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b2d      	ldr	r3, [pc, #180]	; (8000844 <MX_GPIO_Init+0xd0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a2c      	ldr	r2, [pc, #176]	; (8000844 <MX_GPIO_Init+0xd0>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b2a      	ldr	r3, [pc, #168]	; (8000844 <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b26      	ldr	r3, [pc, #152]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a25      	ldr	r2, [pc, #148]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b23      	ldr	r3, [pc, #140]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a1e      	ldr	r2, [pc, #120]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a17      	ldr	r2, [pc, #92]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2120      	movs	r1, #32
 80007fe:	4812      	ldr	r0, [pc, #72]	; (8000848 <MX_GPIO_Init+0xd4>)
 8000800:	f000 fd28 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <MX_GPIO_Init+0xd8>)
 800081a:	f000 fb7f 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800081e:	2320      	movs	r3, #32
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_GPIO_Init+0xd4>)
 8000836:	f000 fb71 	bl	8000f1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	; 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40020000 	.word	0x40020000
 800084c:	40020800 	.word	0x40020800

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000858:	e7fe      	b.n	8000858 <Error_Handler+0x8>
	...

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <HAL_MspInit+0x4c>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <HAL_MspInit+0x4c>)
 800086c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000870:	6453      	str	r3, [r2, #68]	; 0x44
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <HAL_MspInit+0x4c>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <HAL_MspInit+0x4c>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	4a08      	ldr	r2, [pc, #32]	; (80008a8 <HAL_MspInit+0x4c>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088c:	6413      	str	r3, [r2, #64]	; 0x40
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_MspInit+0x4c>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800089a:	2007      	movs	r0, #7
 800089c:	f000 facc 	bl	8000e38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40023800 	.word	0x40023800

080008ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08c      	sub	sp, #48	; 0x30
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a43      	ldr	r2, [pc, #268]	; (80009d8 <HAL_I2C_MspInit+0x12c>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d13c      	bne.n	8000948 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
 80008d2:	4b42      	ldr	r3, [pc, #264]	; (80009dc <HAL_I2C_MspInit+0x130>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a41      	ldr	r2, [pc, #260]	; (80009dc <HAL_I2C_MspInit+0x130>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b3f      	ldr	r3, [pc, #252]	; (80009dc <HAL_I2C_MspInit+0x130>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	61bb      	str	r3, [r7, #24]
 80008e8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008ea:	23c0      	movs	r3, #192	; 0xc0
 80008ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ee:	2312      	movs	r3, #18
 80008f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f6:	2303      	movs	r3, #3
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008fa:	2304      	movs	r3, #4
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4836      	ldr	r0, [pc, #216]	; (80009e0 <HAL_I2C_MspInit+0x134>)
 8000906:	f000 fb09 	bl	8000f1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	4b33      	ldr	r3, [pc, #204]	; (80009dc <HAL_I2C_MspInit+0x130>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	4a32      	ldr	r2, [pc, #200]	; (80009dc <HAL_I2C_MspInit+0x130>)
 8000914:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000918:	6413      	str	r3, [r2, #64]	; 0x40
 800091a:	4b30      	ldr	r3, [pc, #192]	; (80009dc <HAL_I2C_MspInit+0x130>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	201f      	movs	r0, #31
 800092c:	f000 fa8f 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000930:	201f      	movs	r0, #31
 8000932:	f000 faa8 	bl	8000e86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	2020      	movs	r0, #32
 800093c:	f000 fa87 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000940:	2020      	movs	r0, #32
 8000942:	f000 faa0 	bl	8000e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000946:	e042      	b.n	80009ce <HAL_I2C_MspInit+0x122>
  else if(hi2c->Instance==I2C2)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a25      	ldr	r2, [pc, #148]	; (80009e4 <HAL_I2C_MspInit+0x138>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d13d      	bne.n	80009ce <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <HAL_I2C_MspInit+0x130>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a20      	ldr	r2, [pc, #128]	; (80009dc <HAL_I2C_MspInit+0x130>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <HAL_I2C_MspInit+0x130>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800096e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000974:	2312      	movs	r3, #18
 8000976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097c:	2303      	movs	r3, #3
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000980:	2304      	movs	r3, #4
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4815      	ldr	r0, [pc, #84]	; (80009e0 <HAL_I2C_MspInit+0x134>)
 800098c:	f000 fac6 	bl	8000f1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000990:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000996:	2312      	movs	r3, #18
 8000998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80009a2:	2309      	movs	r3, #9
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	480c      	ldr	r0, [pc, #48]	; (80009e0 <HAL_I2C_MspInit+0x134>)
 80009ae:	f000 fab5 	bl	8000f1c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_I2C_MspInit+0x130>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a08      	ldr	r2, [pc, #32]	; (80009dc <HAL_I2C_MspInit+0x130>)
 80009bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_I2C_MspInit+0x130>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
}
 80009ce:	bf00      	nop
 80009d0:	3730      	adds	r7, #48	; 0x30
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40005400 	.word	0x40005400
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020400 	.word	0x40020400
 80009e4:	40005800 	.word	0x40005800

080009e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a19      	ldr	r2, [pc, #100]	; (8000a6c <HAL_UART_MspInit+0x84>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d12b      	bne.n	8000a62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <HAL_UART_MspInit+0x88>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <HAL_UART_MspInit+0x88>)
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a18:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <HAL_UART_MspInit+0x88>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <HAL_UART_MspInit+0x88>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a10      	ldr	r2, [pc, #64]	; (8000a70 <HAL_UART_MspInit+0x88>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <HAL_UART_MspInit+0x88>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a42:	230c      	movs	r3, #12
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a52:	2307      	movs	r3, #7
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <HAL_UART_MspInit+0x8c>)
 8000a5e:	f000 fa5d 	bl	8000f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	; 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40004400 	.word	0x40004400
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020000 	.word	0x40020000

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a7c:	e7fe      	b.n	8000a7c <NMI_Handler+0x4>

08000a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac4:	f000 f8a4 	bl	8000c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <I2C1_EV_IRQHandler+0x10>)
 8000ad2:	f000 febb 	bl	800184c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000028 	.word	0x20000028

08000ae0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <I2C1_ER_IRQHandler+0x10>)
 8000ae6:	f001 f804 	bl	8001af2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000028 	.word	0x20000028

08000af4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <SystemInit+0x20>)
 8000afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afe:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <SystemInit+0x20>)
 8000b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b1c:	f7ff ffea 	bl	8000af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b20:	480c      	ldr	r0, [pc, #48]	; (8000b54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b22:	490d      	ldr	r1, [pc, #52]	; (8000b58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b24:	4a0d      	ldr	r2, [pc, #52]	; (8000b5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b38:	4c0a      	ldr	r4, [pc, #40]	; (8000b64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b46:	f003 fe51 	bl	80047ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4a:	f7ff fce1 	bl	8000510 <main>
  bx  lr    
 8000b4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b5c:	0800487c 	.word	0x0800487c
  ldr r2, =_sbss
 8000b60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b64:	2000011c 	.word	0x2000011c

08000b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC_IRQHandler>
	...

08000b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_Init+0x40>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0d      	ldr	r2, [pc, #52]	; (8000bac <HAL_Init+0x40>)
 8000b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <HAL_Init+0x40>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <HAL_Init+0x40>)
 8000b82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_Init+0x40>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a07      	ldr	r2, [pc, #28]	; (8000bac <HAL_Init+0x40>)
 8000b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b94:	2003      	movs	r0, #3
 8000b96:	f000 f94f 	bl	8000e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f000 f808 	bl	8000bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba0:	f7ff fe5c 	bl	800085c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023c00 	.word	0x40023c00

08000bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_InitTick+0x54>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_InitTick+0x58>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f967 	bl	8000ea2 <HAL_SYSTICK_Config>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e00e      	b.n	8000bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b0f      	cmp	r3, #15
 8000be2:	d80a      	bhi.n	8000bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be4:	2200      	movs	r2, #0
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 f92f 	bl	8000e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf0:	4a06      	ldr	r2, [pc, #24]	; (8000c0c <HAL_InitTick+0x5c>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e000      	b.n	8000bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000000 	.word	0x20000000
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000004 	.word	0x20000004

08000c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x20>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_IncTick+0x24>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_IncTick+0x24>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20000118 	.word	0x20000118

08000c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <HAL_GetTick+0x14>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000118 	.word	0x20000118

08000c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c58:	f7ff ffee 	bl	8000c38 <HAL_GetTick>
 8000c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c68:	d005      	beq.n	8000c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <HAL_Delay+0x44>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4413      	add	r3, r2
 8000c74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c76:	bf00      	nop
 8000c78:	f7ff ffde 	bl	8000c38 <HAL_GetTick>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d8f7      	bhi.n	8000c78 <HAL_Delay+0x28>
  {
  }
}
 8000c88:	bf00      	nop
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008

08000c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	db0b      	blt.n	8000d26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f003 021f 	and.w	r2, r3, #31
 8000d14:	4907      	ldr	r1, [pc, #28]	; (8000d34 <__NVIC_EnableIRQ+0x38>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	095b      	lsrs	r3, r3, #5
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000e100 	.word	0xe000e100

08000d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	db0a      	blt.n	8000d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	490c      	ldr	r1, [pc, #48]	; (8000d84 <__NVIC_SetPriority+0x4c>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	0112      	lsls	r2, r2, #4
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d60:	e00a      	b.n	8000d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4908      	ldr	r1, [pc, #32]	; (8000d88 <__NVIC_SetPriority+0x50>)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	3b04      	subs	r3, #4
 8000d70:	0112      	lsls	r2, r2, #4
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	440b      	add	r3, r1
 8000d76:	761a      	strb	r2, [r3, #24]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000e100 	.word	0xe000e100
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	; 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f1c3 0307 	rsb	r3, r3, #7
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	bf28      	it	cs
 8000daa:	2304      	movcs	r3, #4
 8000dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3304      	adds	r3, #4
 8000db2:	2b06      	cmp	r3, #6
 8000db4:	d902      	bls.n	8000dbc <NVIC_EncodePriority+0x30>
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3b03      	subs	r3, #3
 8000dba:	e000      	b.n	8000dbe <NVIC_EncodePriority+0x32>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	401a      	ands	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	43d9      	mvns	r1, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	4313      	orrs	r3, r2
         );
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3724      	adds	r7, #36	; 0x24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e04:	d301      	bcc.n	8000e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00f      	b.n	8000e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <SysTick_Config+0x40>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e12:	210f      	movs	r1, #15
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e18:	f7ff ff8e 	bl	8000d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <SysTick_Config+0x40>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e22:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <SysTick_Config+0x40>)
 8000e24:	2207      	movs	r2, #7
 8000e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	e000e010 	.word	0xe000e010

08000e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff29 	bl	8000c98 <__NVIC_SetPriorityGrouping>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
 8000e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e60:	f7ff ff3e 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8000e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	68b9      	ldr	r1, [r7, #8]
 8000e6a:	6978      	ldr	r0, [r7, #20]
 8000e6c:	f7ff ff8e 	bl	8000d8c <NVIC_EncodePriority>
 8000e70:	4602      	mov	r2, r0
 8000e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff5d 	bl	8000d38 <__NVIC_SetPriority>
}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff31 	bl	8000cfc <__NVIC_EnableIRQ>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ffa2 	bl	8000df4 <SysTick_Config>
 8000eb0:	4603      	mov	r3, r0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d004      	beq.n	8000ed8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2280      	movs	r2, #128	; 0x80
 8000ed2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e00c      	b.n	8000ef2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2205      	movs	r2, #5
 8000edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 0201 	bic.w	r2, r2, #1
 8000eee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f0c:	b2db      	uxtb	r3, r3
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
 8000f36:	e159      	b.n	80011ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f38:	2201      	movs	r2, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	f040 8148 	bne.w	80011e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d005      	beq.n	8000f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d130      	bne.n	8000fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	091b      	lsrs	r3, r3, #4
 8000fba:	f003 0201 	and.w	r2, r3, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d017      	beq.n	800100c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d123      	bne.n	8001060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	08da      	lsrs	r2, r3, #3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3208      	adds	r2, #8
 8001020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	220f      	movs	r2, #15
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	691a      	ldr	r2, [r3, #16]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	08da      	lsrs	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	69b9      	ldr	r1, [r7, #24]
 800105c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0203 	and.w	r2, r3, #3
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 80a2 	beq.w	80011e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b57      	ldr	r3, [pc, #348]	; (8001204 <HAL_GPIO_Init+0x2e8>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	4a56      	ldr	r2, [pc, #344]	; (8001204 <HAL_GPIO_Init+0x2e8>)
 80010ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b0:	6453      	str	r3, [r2, #68]	; 0x44
 80010b2:	4b54      	ldr	r3, [pc, #336]	; (8001204 <HAL_GPIO_Init+0x2e8>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010be:	4a52      	ldr	r2, [pc, #328]	; (8001208 <HAL_GPIO_Init+0x2ec>)
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	3302      	adds	r3, #2
 80010c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	220f      	movs	r2, #15
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a49      	ldr	r2, [pc, #292]	; (800120c <HAL_GPIO_Init+0x2f0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d019      	beq.n	800111e <HAL_GPIO_Init+0x202>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a48      	ldr	r2, [pc, #288]	; (8001210 <HAL_GPIO_Init+0x2f4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0x1fe>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a47      	ldr	r2, [pc, #284]	; (8001214 <HAL_GPIO_Init+0x2f8>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d00d      	beq.n	8001116 <HAL_GPIO_Init+0x1fa>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a46      	ldr	r2, [pc, #280]	; (8001218 <HAL_GPIO_Init+0x2fc>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d007      	beq.n	8001112 <HAL_GPIO_Init+0x1f6>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a45      	ldr	r2, [pc, #276]	; (800121c <HAL_GPIO_Init+0x300>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_GPIO_Init+0x1f2>
 800110a:	2304      	movs	r3, #4
 800110c:	e008      	b.n	8001120 <HAL_GPIO_Init+0x204>
 800110e:	2307      	movs	r3, #7
 8001110:	e006      	b.n	8001120 <HAL_GPIO_Init+0x204>
 8001112:	2303      	movs	r3, #3
 8001114:	e004      	b.n	8001120 <HAL_GPIO_Init+0x204>
 8001116:	2302      	movs	r3, #2
 8001118:	e002      	b.n	8001120 <HAL_GPIO_Init+0x204>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <HAL_GPIO_Init+0x204>
 800111e:	2300      	movs	r3, #0
 8001120:	69fa      	ldr	r2, [r7, #28]
 8001122:	f002 0203 	and.w	r2, r2, #3
 8001126:	0092      	lsls	r2, r2, #2
 8001128:	4093      	lsls	r3, r2
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001130:	4935      	ldr	r1, [pc, #212]	; (8001208 <HAL_GPIO_Init+0x2ec>)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	3302      	adds	r3, #2
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113e:	4b38      	ldr	r3, [pc, #224]	; (8001220 <HAL_GPIO_Init+0x304>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001162:	4a2f      	ldr	r2, [pc, #188]	; (8001220 <HAL_GPIO_Init+0x304>)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001168:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <HAL_GPIO_Init+0x304>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800118c:	4a24      	ldr	r2, [pc, #144]	; (8001220 <HAL_GPIO_Init+0x304>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001192:	4b23      	ldr	r3, [pc, #140]	; (8001220 <HAL_GPIO_Init+0x304>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b6:	4a1a      	ldr	r2, [pc, #104]	; (8001220 <HAL_GPIO_Init+0x304>)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <HAL_GPIO_Init+0x304>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011e0:	4a0f      	ldr	r2, [pc, #60]	; (8001220 <HAL_GPIO_Init+0x304>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3301      	adds	r3, #1
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	2b0f      	cmp	r3, #15
 80011f0:	f67f aea2 	bls.w	8000f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40013800 	.word	0x40013800
 800120c:	40020000 	.word	0x40020000
 8001210:	40020400 	.word	0x40020400
 8001214:	40020800 	.word	0x40020800
 8001218:	40020c00 	.word	0x40020c00
 800121c:	40021000 	.word	0x40021000
 8001220:	40013c00 	.word	0x40013c00

08001224 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	887b      	ldrh	r3, [r7, #2]
 8001236:	4013      	ands	r3, r2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800123c:	2301      	movs	r3, #1
 800123e:	73fb      	strb	r3, [r7, #15]
 8001240:	e001      	b.n	8001246 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001246:	7bfb      	ldrb	r3, [r7, #15]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
 8001260:	4613      	mov	r3, r2
 8001262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001264:	787b      	ldrb	r3, [r7, #1]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001270:	e003      	b.n	800127a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	041a      	lsls	r2, r3, #16
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	619a      	str	r2, [r3, #24]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001286:	b480      	push	{r7}
 8001288:	b085      	sub	sp, #20
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	460b      	mov	r3, r1
 8001290:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001298:	887a      	ldrh	r2, [r7, #2]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4013      	ands	r3, r2
 800129e:	041a      	lsls	r2, r3, #16
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	400b      	ands	r3, r1
 80012a8:	431a      	orrs	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	619a      	str	r2, [r3, #24]
}
 80012ae:	bf00      	nop
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e12b      	b.n	8001526 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d106      	bne.n	80012e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff fae2 	bl	80008ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2224      	movs	r2, #36	; 0x24
 80012ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0201 	bic.w	r2, r2, #1
 80012fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800130e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800131e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001320:	f002 fe28 	bl	8003f74 <HAL_RCC_GetPCLK1Freq>
 8001324:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	4a81      	ldr	r2, [pc, #516]	; (8001530 <HAL_I2C_Init+0x274>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d807      	bhi.n	8001340 <HAL_I2C_Init+0x84>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4a80      	ldr	r2, [pc, #512]	; (8001534 <HAL_I2C_Init+0x278>)
 8001334:	4293      	cmp	r3, r2
 8001336:	bf94      	ite	ls
 8001338:	2301      	movls	r3, #1
 800133a:	2300      	movhi	r3, #0
 800133c:	b2db      	uxtb	r3, r3
 800133e:	e006      	b.n	800134e <HAL_I2C_Init+0x92>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4a7d      	ldr	r2, [pc, #500]	; (8001538 <HAL_I2C_Init+0x27c>)
 8001344:	4293      	cmp	r3, r2
 8001346:	bf94      	ite	ls
 8001348:	2301      	movls	r3, #1
 800134a:	2300      	movhi	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e0e7      	b.n	8001526 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4a78      	ldr	r2, [pc, #480]	; (800153c <HAL_I2C_Init+0x280>)
 800135a:	fba2 2303 	umull	r2, r3, r2, r3
 800135e:	0c9b      	lsrs	r3, r3, #18
 8001360:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68ba      	ldr	r2, [r7, #8]
 8001372:	430a      	orrs	r2, r1
 8001374:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	4a6a      	ldr	r2, [pc, #424]	; (8001530 <HAL_I2C_Init+0x274>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d802      	bhi.n	8001390 <HAL_I2C_Init+0xd4>
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	3301      	adds	r3, #1
 800138e:	e009      	b.n	80013a4 <HAL_I2C_Init+0xe8>
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	4a69      	ldr	r2, [pc, #420]	; (8001540 <HAL_I2C_Init+0x284>)
 800139c:	fba2 2303 	umull	r2, r3, r2, r3
 80013a0:	099b      	lsrs	r3, r3, #6
 80013a2:	3301      	adds	r3, #1
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	6812      	ldr	r2, [r2, #0]
 80013a8:	430b      	orrs	r3, r1
 80013aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	495c      	ldr	r1, [pc, #368]	; (8001530 <HAL_I2C_Init+0x274>)
 80013c0:	428b      	cmp	r3, r1
 80013c2:	d819      	bhi.n	80013f8 <HAL_I2C_Init+0x13c>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	1e59      	subs	r1, r3, #1
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80013d2:	1c59      	adds	r1, r3, #1
 80013d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80013d8:	400b      	ands	r3, r1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00a      	beq.n	80013f4 <HAL_I2C_Init+0x138>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	1e59      	subs	r1, r3, #1
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80013ec:	3301      	adds	r3, #1
 80013ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013f2:	e051      	b.n	8001498 <HAL_I2C_Init+0x1dc>
 80013f4:	2304      	movs	r3, #4
 80013f6:	e04f      	b.n	8001498 <HAL_I2C_Init+0x1dc>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d111      	bne.n	8001424 <HAL_I2C_Init+0x168>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	1e58      	subs	r0, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6859      	ldr	r1, [r3, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	440b      	add	r3, r1
 800140e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001412:	3301      	adds	r3, #1
 8001414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001418:	2b00      	cmp	r3, #0
 800141a:	bf0c      	ite	eq
 800141c:	2301      	moveq	r3, #1
 800141e:	2300      	movne	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	e012      	b.n	800144a <HAL_I2C_Init+0x18e>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	1e58      	subs	r0, r3, #1
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6859      	ldr	r1, [r3, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	0099      	lsls	r1, r3, #2
 8001434:	440b      	add	r3, r1
 8001436:	fbb0 f3f3 	udiv	r3, r0, r3
 800143a:	3301      	adds	r3, #1
 800143c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001440:	2b00      	cmp	r3, #0
 8001442:	bf0c      	ite	eq
 8001444:	2301      	moveq	r3, #1
 8001446:	2300      	movne	r3, #0
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_I2C_Init+0x196>
 800144e:	2301      	movs	r3, #1
 8001450:	e022      	b.n	8001498 <HAL_I2C_Init+0x1dc>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10e      	bne.n	8001478 <HAL_I2C_Init+0x1bc>
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	1e58      	subs	r0, r3, #1
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6859      	ldr	r1, [r3, #4]
 8001462:	460b      	mov	r3, r1
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	440b      	add	r3, r1
 8001468:	fbb0 f3f3 	udiv	r3, r0, r3
 800146c:	3301      	adds	r3, #1
 800146e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001476:	e00f      	b.n	8001498 <HAL_I2C_Init+0x1dc>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	1e58      	subs	r0, r3, #1
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6859      	ldr	r1, [r3, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	440b      	add	r3, r1
 8001486:	0099      	lsls	r1, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	fbb0 f3f3 	udiv	r3, r0, r3
 800148e:	3301      	adds	r3, #1
 8001490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001494:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	6809      	ldr	r1, [r1, #0]
 800149c:	4313      	orrs	r3, r2
 800149e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69da      	ldr	r2, [r3, #28]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80014c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6911      	ldr	r1, [r2, #16]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68d2      	ldr	r2, [r2, #12]
 80014d2:	4311      	orrs	r1, r2
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	430b      	orrs	r3, r1
 80014da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	695a      	ldr	r2, [r3, #20]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 0201 	orr.w	r2, r2, #1
 8001506:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2220      	movs	r2, #32
 8001512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	000186a0 	.word	0x000186a0
 8001534:	001e847f 	.word	0x001e847f
 8001538:	003d08ff 	.word	0x003d08ff
 800153c:	431bde83 	.word	0x431bde83
 8001540:	10624dd3 	.word	0x10624dd3

08001544 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001556:	2b80      	cmp	r3, #128	; 0x80
 8001558:	d103      	bne.n	8001562 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  }
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af02      	add	r7, sp, #8
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	461a      	mov	r2, r3
 800157c:	460b      	mov	r3, r1
 800157e:	817b      	strh	r3, [r7, #10]
 8001580:	4613      	mov	r3, r2
 8001582:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff fb58 	bl	8000c38 <HAL_GetTick>
 8001588:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b20      	cmp	r3, #32
 8001594:	f040 80e0 	bne.w	8001758 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2319      	movs	r3, #25
 800159e:	2201      	movs	r2, #1
 80015a0:	4970      	ldr	r1, [pc, #448]	; (8001764 <HAL_I2C_Master_Transmit+0x1f4>)
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f001 fe50 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80015ae:	2302      	movs	r3, #2
 80015b0:	e0d3      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d101      	bne.n	80015c0 <HAL_I2C_Master_Transmit+0x50>
 80015bc:	2302      	movs	r3, #2
 80015be:	e0cc      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d007      	beq.n	80015e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f042 0201 	orr.w	r2, r2, #1
 80015e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2221      	movs	r2, #33	; 0x21
 80015fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2210      	movs	r2, #16
 8001602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	893a      	ldrh	r2, [r7, #8]
 8001616:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800161c:	b29a      	uxth	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4a50      	ldr	r2, [pc, #320]	; (8001768 <HAL_I2C_Master_Transmit+0x1f8>)
 8001626:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001628:	8979      	ldrh	r1, [r7, #10]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	6a3a      	ldr	r2, [r7, #32]
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f001 fce0 	bl	8002ff4 <I2C_MasterRequestWrite>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e08d      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001654:	e066      	b.n	8001724 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	6a39      	ldr	r1, [r7, #32]
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f001 ff0e 	bl	800347c <I2C_WaitOnTXEFlagUntilTimeout>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00d      	beq.n	8001682 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	2b04      	cmp	r3, #4
 800166c:	d107      	bne.n	800167e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800167c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e06b      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	781a      	ldrb	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800169c:	b29b      	uxth	r3, r3
 800169e:	3b01      	subs	r3, #1
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016aa:	3b01      	subs	r3, #1
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d11b      	bne.n	80016f8 <HAL_I2C_Master_Transmit+0x188>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d017      	beq.n	80016f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	781a      	ldrb	r2, [r3, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	3b01      	subs	r3, #1
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f0:	3b01      	subs	r3, #1
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	6a39      	ldr	r1, [r7, #32]
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f001 ff05 	bl	800350c <I2C_WaitOnBTFFlagUntilTimeout>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00d      	beq.n	8001724 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	2b04      	cmp	r3, #4
 800170e:	d107      	bne.n	8001720 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800171e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e01a      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001728:	2b00      	cmp	r3, #0
 800172a:	d194      	bne.n	8001656 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800173a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2220      	movs	r2, #32
 8001740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	e000      	b.n	800175a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001758:	2302      	movs	r3, #2
  }
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	00100002 	.word	0x00100002
 8001768:	ffff0000 	.word	0xffff0000

0800176c <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	4613      	mov	r3, r2
 8001778:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b20      	cmp	r3, #32
 8001784:	d158      	bne.n	8001838 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <HAL_I2C_Slave_Receive_IT+0x26>
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e051      	b.n	800183a <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800179c:	2b01      	cmp	r3, #1
 800179e:	d101      	bne.n	80017a4 <HAL_I2C_Slave_Receive_IT+0x38>
 80017a0:	2302      	movs	r3, #2
 80017a2:	e04a      	b.n	800183a <HAL_I2C_Slave_Receive_IT+0xce>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d007      	beq.n	80017ca <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f042 0201 	orr.w	r2, r2, #1
 80017c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017d8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2222      	movs	r2, #34	; 0x22
 80017de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2220      	movs	r2, #32
 80017e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2200      	movs	r2, #0
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	88fa      	ldrh	r2, [r7, #6]
 80017fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001800:	b29a      	uxth	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4a0f      	ldr	r2, [pc, #60]	; (8001848 <HAL_I2C_Slave_Receive_IT+0xdc>)
 800180a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800181a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001832:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001834:	2300      	movs	r3, #0
 8001836:	e000      	b.n	800183a <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8001838:	2302      	movs	r3, #2
  }
}
 800183a:	4618      	mov	r0, r3
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	ffff0000 	.word	0xffff0000

0800184c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800186c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001874:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	2b10      	cmp	r3, #16
 800187a:	d003      	beq.n	8001884 <HAL_I2C_EV_IRQHandler+0x38>
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	2b40      	cmp	r3, #64	; 0x40
 8001880:	f040 80b1 	bne.w	80019e6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10d      	bne.n	80018ba <HAL_I2C_EV_IRQHandler+0x6e>
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80018a4:	d003      	beq.n	80018ae <HAL_I2C_EV_IRQHandler+0x62>
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80018ac:	d101      	bne.n	80018b2 <HAL_I2C_EV_IRQHandler+0x66>
 80018ae:	2301      	movs	r3, #1
 80018b0:	e000      	b.n	80018b4 <HAL_I2C_EV_IRQHandler+0x68>
 80018b2:	2300      	movs	r3, #0
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	f000 8114 	beq.w	8001ae2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00b      	beq.n	80018dc <HAL_I2C_EV_IRQHandler+0x90>
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d006      	beq.n	80018dc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f001 fec5 	bl	800365e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 fd70 	bl	80023ba <I2C_Master_SB>
 80018da:	e083      	b.n	80019e4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d008      	beq.n	80018f8 <HAL_I2C_EV_IRQHandler+0xac>
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 fde8 	bl	80024c6 <I2C_Master_ADD10>
 80018f6:	e075      	b.n	80019e4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d008      	beq.n	8001914 <HAL_I2C_EV_IRQHandler+0xc8>
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 fe04 	bl	800251a <I2C_Master_ADDR>
 8001912:	e067      	b.n	80019e4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	2b00      	cmp	r3, #0
 800191c:	d036      	beq.n	800198c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800192c:	f000 80db 	beq.w	8001ae6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00d      	beq.n	8001956 <HAL_I2C_EV_IRQHandler+0x10a>
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001940:	2b00      	cmp	r3, #0
 8001942:	d008      	beq.n	8001956 <HAL_I2C_EV_IRQHandler+0x10a>
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	2b00      	cmp	r3, #0
 800194c:	d103      	bne.n	8001956 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 f9cc 	bl	8001cec <I2C_MasterTransmit_TXE>
 8001954:	e046      	b.n	80019e4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 80c2 	beq.w	8001ae6 <HAL_I2C_EV_IRQHandler+0x29a>
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 80bc 	beq.w	8001ae6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800196e:	7bbb      	ldrb	r3, [r7, #14]
 8001970:	2b21      	cmp	r3, #33	; 0x21
 8001972:	d103      	bne.n	800197c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 fa55 	bl	8001e24 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800197a:	e0b4      	b.n	8001ae6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	2b40      	cmp	r3, #64	; 0x40
 8001980:	f040 80b1 	bne.w	8001ae6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 fac3 	bl	8001f10 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800198a:	e0ac      	b.n	8001ae6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800199a:	f000 80a4 	beq.w	8001ae6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00d      	beq.n	80019c4 <HAL_I2C_EV_IRQHandler+0x178>
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d008      	beq.n	80019c4 <HAL_I2C_EV_IRQHandler+0x178>
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d103      	bne.n	80019c4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 fb3f 	bl	8002040 <I2C_MasterReceive_RXNE>
 80019c2:	e00f      	b.n	80019e4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 808b 	beq.w	8001ae6 <HAL_I2C_EV_IRQHandler+0x29a>
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 8085 	beq.w	8001ae6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 fbf7 	bl	80021d0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019e2:	e080      	b.n	8001ae6 <HAL_I2C_EV_IRQHandler+0x29a>
 80019e4:	e07f      	b.n	8001ae6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d004      	beq.n	80019f8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	e007      	b.n	8001a08 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d011      	beq.n	8001a36 <HAL_I2C_EV_IRQHandler+0x1ea>
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00c      	beq.n	8001a36 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001a2c:	69b9      	ldr	r1, [r7, #24]
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 ffc2 	bl	80029b8 <I2C_Slave_ADDR>
 8001a34:	e05a      	b.n	8001aec <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	f003 0310 	and.w	r3, r3, #16
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d008      	beq.n	8001a52 <HAL_I2C_EV_IRQHandler+0x206>
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 fffc 	bl	8002a48 <I2C_Slave_STOPF>
 8001a50:	e04c      	b.n	8001aec <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001a52:	7bbb      	ldrb	r3, [r7, #14]
 8001a54:	2b21      	cmp	r3, #33	; 0x21
 8001a56:	d002      	beq.n	8001a5e <HAL_I2C_EV_IRQHandler+0x212>
 8001a58:	7bbb      	ldrb	r3, [r7, #14]
 8001a5a:	2b29      	cmp	r3, #41	; 0x29
 8001a5c:	d120      	bne.n	8001aa0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00d      	beq.n	8001a84 <HAL_I2C_EV_IRQHandler+0x238>
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d008      	beq.n	8001a84 <HAL_I2C_EV_IRQHandler+0x238>
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d103      	bne.n	8001a84 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 fedd 	bl	800283c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a82:	e032      	b.n	8001aea <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d02d      	beq.n	8001aea <HAL_I2C_EV_IRQHandler+0x29e>
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d028      	beq.n	8001aea <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 ff0c 	bl	80028b6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a9e:	e024      	b.n	8001aea <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00d      	beq.n	8001ac6 <HAL_I2C_EV_IRQHandler+0x27a>
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d008      	beq.n	8001ac6 <HAL_I2C_EV_IRQHandler+0x27a>
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d103      	bne.n	8001ac6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 ff1a 	bl	80028f8 <I2C_SlaveReceive_RXNE>
 8001ac4:	e012      	b.n	8001aec <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00d      	beq.n	8001aec <HAL_I2C_EV_IRQHandler+0x2a0>
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d008      	beq.n	8001aec <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 ff4a 	bl	8002974 <I2C_SlaveReceive_BTF>
 8001ae0:	e004      	b.n	8001aec <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001ae2:	bf00      	nop
 8001ae4:	e002      	b.n	8001aec <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ae6:	bf00      	nop
 8001ae8:	e000      	b.n	8001aec <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001aea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001aec:	3720      	adds	r7, #32
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b08a      	sub	sp, #40	; 0x28
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b14:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00d      	beq.n	8001b3c <HAL_I2C_ER_IRQHandler+0x4a>
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d008      	beq.n	8001b3c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001b3a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00d      	beq.n	8001b62 <HAL_I2C_ER_IRQHandler+0x70>
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d008      	beq.n	8001b62 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	f043 0302 	orr.w	r3, r3, #2
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001b60:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d03e      	beq.n	8001bea <HAL_I2C_ER_IRQHandler+0xf8>
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d039      	beq.n	8001bea <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8001b76:	7efb      	ldrb	r3, [r7, #27]
 8001b78:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b88:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001b90:	7ebb      	ldrb	r3, [r7, #26]
 8001b92:	2b20      	cmp	r3, #32
 8001b94:	d112      	bne.n	8001bbc <HAL_I2C_ER_IRQHandler+0xca>
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10f      	bne.n	8001bbc <HAL_I2C_ER_IRQHandler+0xca>
 8001b9c:	7cfb      	ldrb	r3, [r7, #19]
 8001b9e:	2b21      	cmp	r3, #33	; 0x21
 8001ba0:	d008      	beq.n	8001bb4 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001ba2:	7cfb      	ldrb	r3, [r7, #19]
 8001ba4:	2b29      	cmp	r3, #41	; 0x29
 8001ba6:	d005      	beq.n	8001bb4 <HAL_I2C_ER_IRQHandler+0xc2>
 8001ba8:	7cfb      	ldrb	r3, [r7, #19]
 8001baa:	2b28      	cmp	r3, #40	; 0x28
 8001bac:	d106      	bne.n	8001bbc <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2b21      	cmp	r3, #33	; 0x21
 8001bb2:	d103      	bne.n	8001bbc <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f001 f877 	bl	8002ca8 <I2C_Slave_AF>
 8001bba:	e016      	b.n	8001bea <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001bc4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	f043 0304 	orr.w	r3, r3, #4
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001bce:	7efb      	ldrb	r3, [r7, #27]
 8001bd0:	2b10      	cmp	r3, #16
 8001bd2:	d002      	beq.n	8001bda <HAL_I2C_ER_IRQHandler+0xe8>
 8001bd4:	7efb      	ldrb	r3, [r7, #27]
 8001bd6:	2b40      	cmp	r3, #64	; 0x40
 8001bd8:	d107      	bne.n	8001bea <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00d      	beq.n	8001c10 <HAL_I2C_ER_IRQHandler+0x11e>
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d008      	beq.n	8001c10 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	f043 0308 	orr.w	r3, r3, #8
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001c0e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d008      	beq.n	8001c28 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f001 f8b4 	bl	8002d90 <I2C_ITError>
  }
}
 8001c28:	bf00      	nop
 8001c2a:	3728      	adds	r7, #40	; 0x28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cfa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d02:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d150      	bne.n	8001db4 <I2C_MasterTransmit_TXE+0xc8>
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	2b21      	cmp	r3, #33	; 0x21
 8001d16:	d14d      	bne.n	8001db4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d01d      	beq.n	8001d5a <I2C_MasterTransmit_TXE+0x6e>
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b20      	cmp	r3, #32
 8001d22:	d01a      	beq.n	8001d5a <I2C_MasterTransmit_TXE+0x6e>
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d2a:	d016      	beq.n	8001d5a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d3a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2211      	movs	r2, #17
 8001d40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff ff6c 	bl	8001c30 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d58:	e060      	b.n	8001e1c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d68:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d78:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2220      	movs	r2, #32
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b40      	cmp	r3, #64	; 0x40
 8001d92:	d107      	bne.n	8001da4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ff7d 	bl	8001c9c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001da2:	e03b      	b.n	8001e1c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ff3f 	bl	8001c30 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001db2:	e033      	b.n	8001e1c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	2b21      	cmp	r3, #33	; 0x21
 8001db8:	d005      	beq.n	8001dc6 <I2C_MasterTransmit_TXE+0xda>
 8001dba:	7bbb      	ldrb	r3, [r7, #14]
 8001dbc:	2b40      	cmp	r3, #64	; 0x40
 8001dbe:	d12d      	bne.n	8001e1c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	2b22      	cmp	r3, #34	; 0x22
 8001dc4:	d12a      	bne.n	8001e1c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d108      	bne.n	8001de2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dde:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001de0:	e01c      	b.n	8001e1c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b40      	cmp	r3, #64	; 0x40
 8001dec:	d103      	bne.n	8001df6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f88e 	bl	8001f10 <I2C_MemoryTransmit_TXE_BTF>
}
 8001df4:	e012      	b.n	8001e1c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	781a      	ldrb	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	1c5a      	adds	r2, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	3b01      	subs	r3, #1
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001e1a:	e7ff      	b.n	8001e1c <I2C_MasterTransmit_TXE+0x130>
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e30:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b21      	cmp	r3, #33	; 0x21
 8001e3c:	d164      	bne.n	8001f08 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d012      	beq.n	8001e6e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	781a      	ldrb	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001e6c:	e04c      	b.n	8001f08 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d01d      	beq.n	8001eb0 <I2C_MasterTransmit_BTF+0x8c>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2b20      	cmp	r3, #32
 8001e78:	d01a      	beq.n	8001eb0 <I2C_MasterTransmit_BTF+0x8c>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e80:	d016      	beq.n	8001eb0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e90:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2211      	movs	r2, #17
 8001e96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff fec1 	bl	8001c30 <HAL_I2C_MasterTxCpltCallback>
}
 8001eae:	e02b      	b.n	8001f08 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ebe:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ece:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2220      	movs	r2, #32
 8001eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b40      	cmp	r3, #64	; 0x40
 8001ee8:	d107      	bne.n	8001efa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff fed2 	bl	8001c9c <HAL_I2C_MemTxCpltCallback>
}
 8001ef8:	e006      	b.n	8001f08 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fe94 	bl	8001c30 <HAL_I2C_MasterTxCpltCallback>
}
 8001f08:	bf00      	nop
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f1e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d11d      	bne.n	8001f64 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d10b      	bne.n	8001f48 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f40:	1c9a      	adds	r2, r3, #2
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001f46:	e077      	b.n	8002038 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	121b      	asrs	r3, r3, #8
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001f62:	e069      	b.n	8002038 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d10b      	bne.n	8001f84 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001f82:	e059      	b.n	8002038 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d152      	bne.n	8002032 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	2b22      	cmp	r3, #34	; 0x22
 8001f90:	d10d      	bne.n	8001fae <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fa0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001fac:	e044      	b.n	8002038 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d015      	beq.n	8001fe4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	2b21      	cmp	r3, #33	; 0x21
 8001fbc:	d112      	bne.n	8001fe4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	781a      	ldrb	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001fe2:	e029      	b.n	8002038 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d124      	bne.n	8002038 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	2b21      	cmp	r3, #33	; 0x21
 8001ff2:	d121      	bne.n	8002038 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002002:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002012:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2220      	movs	r2, #32
 800201e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fe36 	bl	8001c9c <HAL_I2C_MemTxCpltCallback>
}
 8002030:	e002      	b.n	8002038 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff fa86 	bl	8001544 <I2C_Flush_DR>
}
 8002038:	bf00      	nop
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b22      	cmp	r3, #34	; 0x22
 8002052:	f040 80b9 	bne.w	80021c8 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002060:	b29b      	uxth	r3, r3
 8002062:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2b03      	cmp	r3, #3
 8002068:	d921      	bls.n	80020ae <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	691a      	ldr	r2, [r3, #16]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	1c5a      	adds	r2, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002086:	b29b      	uxth	r3, r3
 8002088:	3b01      	subs	r3, #1
 800208a:	b29a      	uxth	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002094:	b29b      	uxth	r3, r3
 8002096:	2b03      	cmp	r3, #3
 8002098:	f040 8096 	bne.w	80021c8 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020aa:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80020ac:	e08c      	b.n	80021c8 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d07f      	beq.n	80021b6 <I2C_MasterReceive_RXNE+0x176>
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d002      	beq.n	80020c2 <I2C_MasterReceive_RXNE+0x82>
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d179      	bne.n	80021b6 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f001 fa6a 	bl	800359c <I2C_WaitOnSTOPRequestThroughIT>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d14c      	bne.n	8002168 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020dc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020ec:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210a:	b29b      	uxth	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2220      	movs	r2, #32
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b40      	cmp	r3, #64	; 0x40
 8002126:	d10a      	bne.n	800213e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff fdba 	bl	8001cb0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800213c:	e044      	b.n	80021c8 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b08      	cmp	r3, #8
 800214a:	d002      	beq.n	8002152 <I2C_MasterReceive_RXNE+0x112>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b20      	cmp	r3, #32
 8002150:	d103      	bne.n	800215a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	631a      	str	r2, [r3, #48]	; 0x30
 8002158:	e002      	b.n	8002160 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2212      	movs	r2, #18
 800215e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff fd6f 	bl	8001c44 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002166:	e02f      	b.n	80021c8 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002176:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691a      	ldr	r2, [r3, #16]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002194:	b29b      	uxth	r3, r3
 8002196:	3b01      	subs	r3, #1
 8002198:	b29a      	uxth	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2220      	movs	r2, #32
 80021a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff fd88 	bl	8001cc4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80021b4:	e008      	b.n	80021c8 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c4:	605a      	str	r2, [r3, #4]
}
 80021c6:	e7ff      	b.n	80021c8 <I2C_MasterReceive_RXNE+0x188>
 80021c8:	bf00      	nop
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021dc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d11b      	bne.n	8002220 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021f6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691a      	ldr	r2, [r3, #16]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002214:	b29b      	uxth	r3, r3
 8002216:	3b01      	subs	r3, #1
 8002218:	b29a      	uxth	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800221e:	e0c8      	b.n	80023b2 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002224:	b29b      	uxth	r3, r3
 8002226:	2b03      	cmp	r3, #3
 8002228:	d129      	bne.n	800227e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002238:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b04      	cmp	r3, #4
 800223e:	d00a      	beq.n	8002256 <I2C_MasterReceive_BTF+0x86>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d007      	beq.n	8002256 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002254:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002272:	b29b      	uxth	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800227c:	e099      	b.n	80023b2 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002282:	b29b      	uxth	r3, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	f040 8081 	bne.w	800238c <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d002      	beq.n	8002296 <I2C_MasterReceive_BTF+0xc6>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2b10      	cmp	r3, #16
 8002294:	d108      	bne.n	80022a8 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	e019      	b.n	80022dc <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d002      	beq.n	80022b4 <I2C_MasterReceive_BTF+0xe4>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d108      	bne.n	80022c6 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	e00a      	b.n	80022dc <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2b10      	cmp	r3, #16
 80022ca:	d007      	beq.n	80022dc <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022da:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691a      	ldr	r2, [r3, #16]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231e:	b29b      	uxth	r3, r3
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002336:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b40      	cmp	r3, #64	; 0x40
 800234a:	d10a      	bne.n	8002362 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff fca8 	bl	8001cb0 <HAL_I2C_MemRxCpltCallback>
}
 8002360:	e027      	b.n	80023b2 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b08      	cmp	r3, #8
 800236e:	d002      	beq.n	8002376 <I2C_MasterReceive_BTF+0x1a6>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b20      	cmp	r3, #32
 8002374:	d103      	bne.n	800237e <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	631a      	str	r2, [r3, #48]	; 0x30
 800237c:	e002      	b.n	8002384 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2212      	movs	r2, #18
 8002382:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff fc5d 	bl	8001c44 <HAL_I2C_MasterRxCpltCallback>
}
 800238a:	e012      	b.n	80023b2 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691a      	ldr	r2, [r3, #16]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b40      	cmp	r3, #64	; 0x40
 80023cc:	d117      	bne.n	80023fe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023e6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80023e8:	e067      	b.n	80024ba <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	611a      	str	r2, [r3, #16]
}
 80023fc:	e05d      	b.n	80024ba <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002406:	d133      	bne.n	8002470 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b21      	cmp	r3, #33	; 0x21
 8002412:	d109      	bne.n	8002428 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002418:	b2db      	uxtb	r3, r3
 800241a:	461a      	mov	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002424:	611a      	str	r2, [r3, #16]
 8002426:	e008      	b.n	800243a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	b2da      	uxtb	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243e:	2b00      	cmp	r3, #0
 8002440:	d004      	beq.n	800244c <I2C_Master_SB+0x92>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002448:	2b00      	cmp	r3, #0
 800244a:	d108      	bne.n	800245e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002450:	2b00      	cmp	r3, #0
 8002452:	d032      	beq.n	80024ba <I2C_Master_SB+0x100>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245a:	2b00      	cmp	r3, #0
 800245c:	d02d      	beq.n	80024ba <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800246c:	605a      	str	r2, [r3, #4]
}
 800246e:	e024      	b.n	80024ba <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10e      	bne.n	8002496 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247c:	b29b      	uxth	r3, r3
 800247e:	11db      	asrs	r3, r3, #7
 8002480:	b2db      	uxtb	r3, r3
 8002482:	f003 0306 	and.w	r3, r3, #6
 8002486:	b2db      	uxtb	r3, r3
 8002488:	f063 030f 	orn	r3, r3, #15
 800248c:	b2da      	uxtb	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	611a      	str	r2, [r3, #16]
}
 8002494:	e011      	b.n	80024ba <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800249a:	2b01      	cmp	r3, #1
 800249c:	d10d      	bne.n	80024ba <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	11db      	asrs	r3, r3, #7
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	f003 0306 	and.w	r3, r3, #6
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	f063 030e 	orn	r3, r3, #14
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	611a      	str	r2, [r3, #16]
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d004      	beq.n	80024ec <I2C_Master_ADD10+0x26>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d108      	bne.n	80024fe <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00c      	beq.n	800250e <I2C_Master_ADD10+0x48>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d007      	beq.n	800250e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800250c:	605a      	str	r2, [r3, #4]
  }
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800251a:	b480      	push	{r7}
 800251c:	b091      	sub	sp, #68	; 0x44
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002528:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002530:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b22      	cmp	r3, #34	; 0x22
 8002542:	f040 8169 	bne.w	8002818 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10f      	bne.n	800256e <I2C_Master_ADDR+0x54>
 800254e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002552:	2b40      	cmp	r3, #64	; 0x40
 8002554:	d10b      	bne.n	800256e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002556:	2300      	movs	r3, #0
 8002558:	633b      	str	r3, [r7, #48]	; 0x30
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	633b      	str	r3, [r7, #48]	; 0x30
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	633b      	str	r3, [r7, #48]	; 0x30
 800256a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256c:	e160      	b.n	8002830 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002572:	2b00      	cmp	r3, #0
 8002574:	d11d      	bne.n	80025b2 <I2C_Master_ADDR+0x98>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800257e:	d118      	bne.n	80025b2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002580:	2300      	movs	r3, #0
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002594:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025a4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	651a      	str	r2, [r3, #80]	; 0x50
 80025b0:	e13e      	b.n	8002830 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d113      	bne.n	80025e4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025bc:	2300      	movs	r3, #0
 80025be:	62bb      	str	r3, [r7, #40]	; 0x28
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80025d0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	e115      	b.n	8002810 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	f040 808a 	bne.w	8002704 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80025f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025f6:	d137      	bne.n	8002668 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002606:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002616:	d113      	bne.n	8002640 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002626:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002628:	2300      	movs	r3, #0
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	e0e7      	b.n	8002810 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002640:	2300      	movs	r3, #0
 8002642:	623b      	str	r3, [r7, #32]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	623b      	str	r3, [r7, #32]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	623b      	str	r3, [r7, #32]
 8002654:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	e0d3      	b.n	8002810 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266a:	2b08      	cmp	r3, #8
 800266c:	d02e      	beq.n	80026cc <I2C_Master_ADDR+0x1b2>
 800266e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002670:	2b20      	cmp	r3, #32
 8002672:	d02b      	beq.n	80026cc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002676:	2b12      	cmp	r3, #18
 8002678:	d102      	bne.n	8002680 <I2C_Master_ADDR+0x166>
 800267a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267c:	2b01      	cmp	r3, #1
 800267e:	d125      	bne.n	80026cc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002682:	2b04      	cmp	r3, #4
 8002684:	d00e      	beq.n	80026a4 <I2C_Master_ADDR+0x18a>
 8002686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002688:	2b02      	cmp	r3, #2
 800268a:	d00b      	beq.n	80026a4 <I2C_Master_ADDR+0x18a>
 800268c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800268e:	2b10      	cmp	r3, #16
 8002690:	d008      	beq.n	80026a4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	e007      	b.n	80026b4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026b2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026b4:	2300      	movs	r3, #0
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	61fb      	str	r3, [r7, #28]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	61fb      	str	r3, [r7, #28]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	e0a1      	b.n	8002810 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026da:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026dc:	2300      	movs	r3, #0
 80026de:	61bb      	str	r3, [r7, #24]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	61bb      	str	r3, [r7, #24]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	61bb      	str	r3, [r7, #24]
 80026f0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	e085      	b.n	8002810 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d14d      	bne.n	80027aa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800270e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002710:	2b04      	cmp	r3, #4
 8002712:	d016      	beq.n	8002742 <I2C_Master_ADDR+0x228>
 8002714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002716:	2b02      	cmp	r3, #2
 8002718:	d013      	beq.n	8002742 <I2C_Master_ADDR+0x228>
 800271a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271c:	2b10      	cmp	r3, #16
 800271e:	d010      	beq.n	8002742 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800272e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	e007      	b.n	8002752 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002750:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800275c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002760:	d117      	bne.n	8002792 <I2C_Master_ADDR+0x278>
 8002762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002764:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002768:	d00b      	beq.n	8002782 <I2C_Master_ADDR+0x268>
 800276a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276c:	2b01      	cmp	r3, #1
 800276e:	d008      	beq.n	8002782 <I2C_Master_ADDR+0x268>
 8002770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002772:	2b08      	cmp	r3, #8
 8002774:	d005      	beq.n	8002782 <I2C_Master_ADDR+0x268>
 8002776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002778:	2b10      	cmp	r3, #16
 800277a:	d002      	beq.n	8002782 <I2C_Master_ADDR+0x268>
 800277c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277e:	2b20      	cmp	r3, #32
 8002780:	d107      	bne.n	8002792 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002790:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	e032      	b.n	8002810 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027b8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027c8:	d117      	bne.n	80027fa <I2C_Master_ADDR+0x2e0>
 80027ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027d0:	d00b      	beq.n	80027ea <I2C_Master_ADDR+0x2d0>
 80027d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d008      	beq.n	80027ea <I2C_Master_ADDR+0x2d0>
 80027d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d005      	beq.n	80027ea <I2C_Master_ADDR+0x2d0>
 80027de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e0:	2b10      	cmp	r3, #16
 80027e2:	d002      	beq.n	80027ea <I2C_Master_ADDR+0x2d0>
 80027e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	d107      	bne.n	80027fa <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027f8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002816:	e00b      	b.n	8002830 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
}
 800282e:	e7ff      	b.n	8002830 <I2C_Master_ADDR+0x316>
 8002830:	bf00      	nop
 8002832:	3744      	adds	r7, #68	; 0x44
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800284a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002850:	b29b      	uxth	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d02b      	beq.n	80028ae <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	781a      	ldrb	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002870:	b29b      	uxth	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287e:	b29b      	uxth	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d114      	bne.n	80028ae <I2C_SlaveTransmit_TXE+0x72>
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	2b29      	cmp	r3, #41	; 0x29
 8002888:	d111      	bne.n	80028ae <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002898:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2221      	movs	r2, #33	; 0x21
 800289e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2228      	movs	r2, #40	; 0x28
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7ff f9d5 	bl	8001c58 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80028ae:	bf00      	nop
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d011      	beq.n	80028ec <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	781a      	ldrb	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002906:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290c:	b29b      	uxth	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d02c      	beq.n	800296c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292e:	b29b      	uxth	r3, r3
 8002930:	3b01      	subs	r3, #1
 8002932:	b29a      	uxth	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293c:	b29b      	uxth	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d114      	bne.n	800296c <I2C_SlaveReceive_RXNE+0x74>
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	2b2a      	cmp	r3, #42	; 0x2a
 8002946:	d111      	bne.n	800296c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002956:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2222      	movs	r2, #34	; 0x22
 800295c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2228      	movs	r2, #40	; 0x28
 8002962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7fd fdb4 	bl	80004d4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800296c:	bf00      	nop
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d012      	beq.n	80029ac <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	1c5a      	adds	r2, r3, #1
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80029d2:	2b28      	cmp	r3, #40	; 0x28
 80029d4:	d125      	bne.n	8002a22 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80029f0:	2301      	movs	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d103      	bne.n	8002a06 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	81bb      	strh	r3, [r7, #12]
 8002a04:	e002      	b.n	8002a0c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002a14:	89ba      	ldrh	r2, [r7, #12]
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff f926 	bl	8001c6c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002a20:	e00e      	b.n	8002a40 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a22:	2300      	movs	r3, #0
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a56:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a66:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a94:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aa4:	d172      	bne.n	8002b8c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	2b22      	cmp	r3, #34	; 0x22
 8002aaa:	d002      	beq.n	8002ab2 <I2C_Slave_STOPF+0x6a>
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	2b2a      	cmp	r3, #42	; 0x2a
 8002ab0:	d135      	bne.n	8002b1e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d005      	beq.n	8002ad6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f043 0204 	orr.w	r2, r3, #4
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ae4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe fa07 	bl	8000efe <HAL_DMA_GetState>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d049      	beq.n	8002b8a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afa:	4a69      	ldr	r2, [pc, #420]	; (8002ca0 <I2C_Slave_STOPF+0x258>)
 8002afc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe f9d9 	bl	8000eba <HAL_DMA_Abort_IT>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d03d      	beq.n	8002b8a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b1c:	e035      	b.n	8002b8a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f043 0204 	orr.w	r2, r3, #4
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b50:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe f9d1 	bl	8000efe <HAL_DMA_GetState>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d014      	beq.n	8002b8c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b66:	4a4e      	ldr	r2, [pc, #312]	; (8002ca0 <I2C_Slave_STOPF+0x258>)
 8002b68:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe f9a3 	bl	8000eba <HAL_DMA_Abort_IT>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d008      	beq.n	8002b8c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b84:	4610      	mov	r0, r2
 8002b86:	4798      	blx	r3
 8002b88:	e000      	b.n	8002b8c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b8a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d03e      	beq.n	8002c14 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d112      	bne.n	8002bca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd4:	2b40      	cmp	r3, #64	; 0x40
 8002bd6:	d112      	bne.n	8002bfe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	f043 0204 	orr.w	r2, r3, #4
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f8b7 	bl	8002d90 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002c22:	e039      	b.n	8002c98 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	2b2a      	cmp	r3, #42	; 0x2a
 8002c28:	d109      	bne.n	8002c3e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2228      	movs	r2, #40	; 0x28
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7fd fc4b 	bl	80004d4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b28      	cmp	r3, #40	; 0x28
 8002c48:	d111      	bne.n	8002c6e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a15      	ldr	r2, [pc, #84]	; (8002ca4 <I2C_Slave_STOPF+0x25c>)
 8002c4e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff f80e 	bl	8001c88 <HAL_I2C_ListenCpltCallback>
}
 8002c6c:	e014      	b.n	8002c98 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	2b22      	cmp	r3, #34	; 0x22
 8002c74:	d002      	beq.n	8002c7c <I2C_Slave_STOPF+0x234>
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	2b22      	cmp	r3, #34	; 0x22
 8002c7a:	d10d      	bne.n	8002c98 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2220      	movs	r2, #32
 8002c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7fd fc1e 	bl	80004d4 <HAL_I2C_SlaveRxCpltCallback>
}
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	080030f9 	.word	0x080030f9
 8002ca4:	ffff0000 	.word	0xffff0000

08002ca8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d002      	beq.n	8002cca <I2C_Slave_AF+0x22>
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	d129      	bne.n	8002d1e <I2C_Slave_AF+0x76>
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	2b28      	cmp	r3, #40	; 0x28
 8002cce:	d126      	bne.n	8002d1e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a2e      	ldr	r2, [pc, #184]	; (8002d8c <I2C_Slave_AF+0xe4>)
 8002cd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ce4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cee:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cfe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fe ffb6 	bl	8001c88 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002d1c:	e031      	b.n	8002d82 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
 8002d20:	2b21      	cmp	r3, #33	; 0x21
 8002d22:	d129      	bne.n	8002d78 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a19      	ldr	r2, [pc, #100]	; (8002d8c <I2C_Slave_AF+0xe4>)
 8002d28:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2221      	movs	r2, #33	; 0x21
 8002d2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d4e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d58:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d68:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fe fbea 	bl	8001544 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7fe ff71 	bl	8001c58 <HAL_I2C_SlaveTxCpltCallback>
}
 8002d76:	e004      	b.n	8002d82 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d80:	615a      	str	r2, [r3, #20]
}
 8002d82:	bf00      	nop
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	ffff0000 	.word	0xffff0000

08002d90 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d9e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002da6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002da8:	7bbb      	ldrb	r3, [r7, #14]
 8002daa:	2b10      	cmp	r3, #16
 8002dac:	d002      	beq.n	8002db4 <I2C_ITError+0x24>
 8002dae:	7bbb      	ldrb	r3, [r7, #14]
 8002db0:	2b40      	cmp	r3, #64	; 0x40
 8002db2:	d10a      	bne.n	8002dca <I2C_ITError+0x3a>
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	2b22      	cmp	r3, #34	; 0x22
 8002db8:	d107      	bne.n	8002dca <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dc8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002dd0:	2b28      	cmp	r3, #40	; 0x28
 8002dd2:	d107      	bne.n	8002de4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2228      	movs	r2, #40	; 0x28
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002de2:	e015      	b.n	8002e10 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002df2:	d00a      	beq.n	8002e0a <I2C_ITError+0x7a>
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	2b60      	cmp	r3, #96	; 0x60
 8002df8:	d007      	beq.n	8002e0a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e1e:	d162      	bne.n	8002ee6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e2e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d020      	beq.n	8002e80 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e42:	4a6a      	ldr	r2, [pc, #424]	; (8002fec <I2C_ITError+0x25c>)
 8002e44:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe f835 	bl	8000eba <HAL_DMA_Abort_IT>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8089 	beq.w	8002f6a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0201 	bic.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	4798      	blx	r3
 8002e7e:	e074      	b.n	8002f6a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	4a59      	ldr	r2, [pc, #356]	; (8002fec <I2C_ITError+0x25c>)
 8002e86:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe f814 	bl	8000eba <HAL_DMA_Abort_IT>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d068      	beq.n	8002f6a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea2:	2b40      	cmp	r3, #64	; 0x40
 8002ea4:	d10b      	bne.n	8002ebe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0201 	bic.w	r2, r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	4798      	blx	r3
 8002ee4:	e041      	b.n	8002f6a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b60      	cmp	r3, #96	; 0x60
 8002ef0:	d125      	bne.n	8002f3e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0a:	2b40      	cmp	r3, #64	; 0x40
 8002f0c:	d10b      	bne.n	8002f26 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	691a      	ldr	r2, [r3, #16]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0201 	bic.w	r2, r2, #1
 8002f34:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fe fece 	bl	8001cd8 <HAL_I2C_AbortCpltCallback>
 8002f3c:	e015      	b.n	8002f6a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f48:	2b40      	cmp	r3, #64	; 0x40
 8002f4a:	d10b      	bne.n	8002f64 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7fe fead 	bl	8001cc4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10e      	bne.n	8002f98 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d109      	bne.n	8002f98 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d104      	bne.n	8002f98 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d007      	beq.n	8002fa8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fa6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fae:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d113      	bne.n	8002fe4 <I2C_ITError+0x254>
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	2b28      	cmp	r3, #40	; 0x28
 8002fc0:	d110      	bne.n	8002fe4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <I2C_ITError+0x260>)
 8002fc6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fe fe52 	bl	8001c88 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	080030f9 	.word	0x080030f9
 8002ff0:	ffff0000 	.word	0xffff0000

08002ff4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b088      	sub	sp, #32
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	607a      	str	r2, [r7, #4]
 8002ffe:	603b      	str	r3, [r7, #0]
 8003000:	460b      	mov	r3, r1
 8003002:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2b08      	cmp	r3, #8
 800300e:	d006      	beq.n	800301e <I2C_MasterRequestWrite+0x2a>
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d003      	beq.n	800301e <I2C_MasterRequestWrite+0x2a>
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800301c:	d108      	bne.n	8003030 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	e00b      	b.n	8003048 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003034:	2b12      	cmp	r3, #18
 8003036:	d107      	bne.n	8003048 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003046:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f8f7 	bl	8003248 <I2C_WaitOnFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00d      	beq.n	800307c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800306e:	d103      	bne.n	8003078 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003076:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e035      	b.n	80030e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003084:	d108      	bne.n	8003098 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003086:	897b      	ldrh	r3, [r7, #10]
 8003088:	b2db      	uxtb	r3, r3
 800308a:	461a      	mov	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003094:	611a      	str	r2, [r3, #16]
 8003096:	e01b      	b.n	80030d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003098:	897b      	ldrh	r3, [r7, #10]
 800309a:	11db      	asrs	r3, r3, #7
 800309c:	b2db      	uxtb	r3, r3
 800309e:	f003 0306 	and.w	r3, r3, #6
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	f063 030f 	orn	r3, r3, #15
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	490e      	ldr	r1, [pc, #56]	; (80030f0 <I2C_MasterRequestWrite+0xfc>)
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f940 	bl	800333c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e010      	b.n	80030e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030c6:	897b      	ldrh	r3, [r7, #10]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	4907      	ldr	r1, [pc, #28]	; (80030f4 <I2C_MasterRequestWrite+0x100>)
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 f930 	bl	800333c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	00010008 	.word	0x00010008
 80030f4:	00010002 	.word	0x00010002

080030f8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003108:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003110:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003112:	4b4b      	ldr	r3, [pc, #300]	; (8003240 <I2C_DMAAbort+0x148>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	08db      	lsrs	r3, r3, #3
 8003118:	4a4a      	ldr	r2, [pc, #296]	; (8003244 <I2C_DMAAbort+0x14c>)
 800311a:	fba2 2303 	umull	r2, r3, r2, r3
 800311e:	0a1a      	lsrs	r2, r3, #8
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	00da      	lsls	r2, r3, #3
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f043 0220 	orr.w	r2, r3, #32
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800313e:	e00a      	b.n	8003156 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	3b01      	subs	r3, #1
 8003144:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003154:	d0ea      	beq.n	800312c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003162:	2200      	movs	r2, #0
 8003164:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003172:	2200      	movs	r2, #0
 8003174:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003184:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2200      	movs	r2, #0
 800318a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003198:	2200      	movs	r2, #0
 800319a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	2200      	movs	r2, #0
 80031aa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0201 	bic.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b60      	cmp	r3, #96	; 0x60
 80031c6:	d10e      	bne.n	80031e6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2200      	movs	r2, #0
 80031dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80031de:	6978      	ldr	r0, [r7, #20]
 80031e0:	f7fe fd7a 	bl	8001cd8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80031e4:	e027      	b.n	8003236 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80031e6:	7cfb      	ldrb	r3, [r7, #19]
 80031e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031ec:	2b28      	cmp	r3, #40	; 0x28
 80031ee:	d117      	bne.n	8003220 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800320e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	2200      	movs	r2, #0
 8003214:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2228      	movs	r2, #40	; 0x28
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800321e:	e007      	b.n	8003230 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003230:	6978      	ldr	r0, [r7, #20]
 8003232:	f7fe fd47 	bl	8001cc4 <HAL_I2C_ErrorCallback>
}
 8003236:	bf00      	nop
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000000 	.word	0x20000000
 8003244:	14f8b589 	.word	0x14f8b589

08003248 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003258:	e048      	b.n	80032ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003260:	d044      	beq.n	80032ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003262:	f7fd fce9 	bl	8000c38 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d302      	bcc.n	8003278 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d139      	bne.n	80032ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	0c1b      	lsrs	r3, r3, #16
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b01      	cmp	r3, #1
 8003280:	d10d      	bne.n	800329e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	43da      	mvns	r2, r3
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	4013      	ands	r3, r2
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	bf0c      	ite	eq
 8003294:	2301      	moveq	r3, #1
 8003296:	2300      	movne	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	461a      	mov	r2, r3
 800329c:	e00c      	b.n	80032b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	43da      	mvns	r2, r3
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	4013      	ands	r3, r2
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf0c      	ite	eq
 80032b0:	2301      	moveq	r3, #1
 80032b2:	2300      	movne	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	461a      	mov	r2, r3
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d116      	bne.n	80032ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	f043 0220 	orr.w	r2, r3, #32
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e023      	b.n	8003334 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	0c1b      	lsrs	r3, r3, #16
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d10d      	bne.n	8003312 <I2C_WaitOnFlagUntilTimeout+0xca>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	43da      	mvns	r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4013      	ands	r3, r2
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	bf0c      	ite	eq
 8003308:	2301      	moveq	r3, #1
 800330a:	2300      	movne	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	461a      	mov	r2, r3
 8003310:	e00c      	b.n	800332c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	43da      	mvns	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	4013      	ands	r3, r2
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	429a      	cmp	r2, r3
 8003330:	d093      	beq.n	800325a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800334a:	e071      	b.n	8003430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800335a:	d123      	bne.n	80033a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800336a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003374:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	f043 0204 	orr.w	r2, r3, #4
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e067      	b.n	8003474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033aa:	d041      	beq.n	8003430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ac:	f7fd fc44 	bl	8000c38 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d302      	bcc.n	80033c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d136      	bne.n	8003430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	0c1b      	lsrs	r3, r3, #16
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d10c      	bne.n	80033e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	43da      	mvns	r2, r3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4013      	ands	r3, r2
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	bf14      	ite	ne
 80033de:	2301      	movne	r3, #1
 80033e0:	2300      	moveq	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	e00b      	b.n	80033fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	43da      	mvns	r2, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	4013      	ands	r3, r2
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bf14      	ite	ne
 80033f8:	2301      	movne	r3, #1
 80033fa:	2300      	moveq	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d016      	beq.n	8003430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	f043 0220 	orr.w	r2, r3, #32
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e021      	b.n	8003474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	0c1b      	lsrs	r3, r3, #16
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b01      	cmp	r3, #1
 8003438:	d10c      	bne.n	8003454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	43da      	mvns	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	4013      	ands	r3, r2
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	bf14      	ite	ne
 800344c:	2301      	movne	r3, #1
 800344e:	2300      	moveq	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	e00b      	b.n	800346c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	43da      	mvns	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4013      	ands	r3, r2
 8003460:	b29b      	uxth	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	bf14      	ite	ne
 8003466:	2301      	movne	r3, #1
 8003468:	2300      	moveq	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	f47f af6d 	bne.w	800334c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003488:	e034      	b.n	80034f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 f8b8 	bl	8003600 <I2C_IsAcknowledgeFailed>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e034      	b.n	8003504 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034a0:	d028      	beq.n	80034f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a2:	f7fd fbc9 	bl	8000c38 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d302      	bcc.n	80034b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d11d      	bne.n	80034f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c2:	2b80      	cmp	r3, #128	; 0x80
 80034c4:	d016      	beq.n	80034f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	f043 0220 	orr.w	r2, r3, #32
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e007      	b.n	8003504 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fe:	2b80      	cmp	r3, #128	; 0x80
 8003500:	d1c3      	bne.n	800348a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003518:	e034      	b.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 f870 	bl	8003600 <I2C_IsAcknowledgeFailed>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e034      	b.n	8003594 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003530:	d028      	beq.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003532:	f7fd fb81 	bl	8000c38 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	429a      	cmp	r2, r3
 8003540:	d302      	bcc.n	8003548 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d11d      	bne.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b04      	cmp	r3, #4
 8003554:	d016      	beq.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	f043 0220 	orr.w	r2, r3, #32
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e007      	b.n	8003594 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b04      	cmp	r3, #4
 8003590:	d1c3      	bne.n	800351a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80035a8:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	08db      	lsrs	r3, r3, #3
 80035ae:	4a13      	ldr	r2, [pc, #76]	; (80035fc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80035b0:	fba2 2303 	umull	r2, r3, r2, r3
 80035b4:	0a1a      	lsrs	r2, r3, #8
 80035b6:	4613      	mov	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	3b01      	subs	r3, #1
 80035c2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d107      	bne.n	80035da <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f043 0220 	orr.w	r2, r3, #32
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e008      	b.n	80035ec <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e8:	d0e9      	beq.n	80035be <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	20000000 	.word	0x20000000
 80035fc:	14f8b589 	.word	0x14f8b589

08003600 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003616:	d11b      	bne.n	8003650 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003620:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	f043 0204 	orr.w	r2, r3, #4
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800366e:	d103      	bne.n	8003678 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003676:	e007      	b.n	8003688 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003680:	d102      	bne.n	8003688 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2208      	movs	r2, #8
 8003686:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e267      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d075      	beq.n	800379e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036b2:	4b88      	ldr	r3, [pc, #544]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 030c 	and.w	r3, r3, #12
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d00c      	beq.n	80036d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036be:	4b85      	ldr	r3, [pc, #532]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d112      	bne.n	80036f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ca:	4b82      	ldr	r3, [pc, #520]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036d6:	d10b      	bne.n	80036f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d8:	4b7e      	ldr	r3, [pc, #504]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d05b      	beq.n	800379c <HAL_RCC_OscConfig+0x108>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d157      	bne.n	800379c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e242      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f8:	d106      	bne.n	8003708 <HAL_RCC_OscConfig+0x74>
 80036fa:	4b76      	ldr	r3, [pc, #472]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a75      	ldr	r2, [pc, #468]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 8003700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e01d      	b.n	8003744 <HAL_RCC_OscConfig+0xb0>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003710:	d10c      	bne.n	800372c <HAL_RCC_OscConfig+0x98>
 8003712:	4b70      	ldr	r3, [pc, #448]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a6f      	ldr	r2, [pc, #444]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 8003718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	4b6d      	ldr	r3, [pc, #436]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a6c      	ldr	r2, [pc, #432]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 8003724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	e00b      	b.n	8003744 <HAL_RCC_OscConfig+0xb0>
 800372c:	4b69      	ldr	r3, [pc, #420]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a68      	ldr	r2, [pc, #416]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 8003732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	4b66      	ldr	r3, [pc, #408]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a65      	ldr	r2, [pc, #404]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 800373e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d013      	beq.n	8003774 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374c:	f7fd fa74 	bl	8000c38 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003754:	f7fd fa70 	bl	8000c38 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b64      	cmp	r3, #100	; 0x64
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e207      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003766:	4b5b      	ldr	r3, [pc, #364]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f0      	beq.n	8003754 <HAL_RCC_OscConfig+0xc0>
 8003772:	e014      	b.n	800379e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003774:	f7fd fa60 	bl	8000c38 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800377c:	f7fd fa5c 	bl	8000c38 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b64      	cmp	r3, #100	; 0x64
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e1f3      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800378e:	4b51      	ldr	r3, [pc, #324]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0xe8>
 800379a:	e000      	b.n	800379e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800379c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d063      	beq.n	8003872 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037aa:	4b4a      	ldr	r3, [pc, #296]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 030c 	and.w	r3, r3, #12
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00b      	beq.n	80037ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037b6:	4b47      	ldr	r3, [pc, #284]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d11c      	bne.n	80037fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037c2:	4b44      	ldr	r3, [pc, #272]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d116      	bne.n	80037fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ce:	4b41      	ldr	r3, [pc, #260]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <HAL_RCC_OscConfig+0x152>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d001      	beq.n	80037e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e1c7      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e6:	4b3b      	ldr	r3, [pc, #236]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	4937      	ldr	r1, [pc, #220]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fa:	e03a      	b.n	8003872 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d020      	beq.n	8003846 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003804:	4b34      	ldr	r3, [pc, #208]	; (80038d8 <HAL_RCC_OscConfig+0x244>)
 8003806:	2201      	movs	r2, #1
 8003808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380a:	f7fd fa15 	bl	8000c38 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003812:	f7fd fa11 	bl	8000c38 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e1a8      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003824:	4b2b      	ldr	r3, [pc, #172]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f0      	beq.n	8003812 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003830:	4b28      	ldr	r3, [pc, #160]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	4925      	ldr	r1, [pc, #148]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 8003840:	4313      	orrs	r3, r2
 8003842:	600b      	str	r3, [r1, #0]
 8003844:	e015      	b.n	8003872 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003846:	4b24      	ldr	r3, [pc, #144]	; (80038d8 <HAL_RCC_OscConfig+0x244>)
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384c:	f7fd f9f4 	bl	8000c38 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003854:	f7fd f9f0 	bl	8000c38 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e187      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003866:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f0      	bne.n	8003854 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d036      	beq.n	80038ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d016      	beq.n	80038b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003886:	4b15      	ldr	r3, [pc, #84]	; (80038dc <HAL_RCC_OscConfig+0x248>)
 8003888:	2201      	movs	r2, #1
 800388a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388c:	f7fd f9d4 	bl	8000c38 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003894:	f7fd f9d0 	bl	8000c38 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e167      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a6:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_RCC_OscConfig+0x240>)
 80038a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0x200>
 80038b2:	e01b      	b.n	80038ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b4:	4b09      	ldr	r3, [pc, #36]	; (80038dc <HAL_RCC_OscConfig+0x248>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ba:	f7fd f9bd 	bl	8000c38 <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c0:	e00e      	b.n	80038e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c2:	f7fd f9b9 	bl	8000c38 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d907      	bls.n	80038e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e150      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
 80038d4:	40023800 	.word	0x40023800
 80038d8:	42470000 	.word	0x42470000
 80038dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e0:	4b88      	ldr	r3, [pc, #544]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 80038e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1ea      	bne.n	80038c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 8097 	beq.w	8003a28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038fa:	2300      	movs	r3, #0
 80038fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038fe:	4b81      	ldr	r3, [pc, #516]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10f      	bne.n	800392a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800390a:	2300      	movs	r3, #0
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	4b7d      	ldr	r3, [pc, #500]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	4a7c      	ldr	r2, [pc, #496]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003918:	6413      	str	r3, [r2, #64]	; 0x40
 800391a:	4b7a      	ldr	r3, [pc, #488]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003922:	60bb      	str	r3, [r7, #8]
 8003924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003926:	2301      	movs	r3, #1
 8003928:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392a:	4b77      	ldr	r3, [pc, #476]	; (8003b08 <HAL_RCC_OscConfig+0x474>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003932:	2b00      	cmp	r3, #0
 8003934:	d118      	bne.n	8003968 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003936:	4b74      	ldr	r3, [pc, #464]	; (8003b08 <HAL_RCC_OscConfig+0x474>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a73      	ldr	r2, [pc, #460]	; (8003b08 <HAL_RCC_OscConfig+0x474>)
 800393c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003942:	f7fd f979 	bl	8000c38 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800394a:	f7fd f975 	bl	8000c38 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e10c      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395c:	4b6a      	ldr	r3, [pc, #424]	; (8003b08 <HAL_RCC_OscConfig+0x474>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0f0      	beq.n	800394a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d106      	bne.n	800397e <HAL_RCC_OscConfig+0x2ea>
 8003970:	4b64      	ldr	r3, [pc, #400]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003974:	4a63      	ldr	r2, [pc, #396]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	6713      	str	r3, [r2, #112]	; 0x70
 800397c:	e01c      	b.n	80039b8 <HAL_RCC_OscConfig+0x324>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2b05      	cmp	r3, #5
 8003984:	d10c      	bne.n	80039a0 <HAL_RCC_OscConfig+0x30c>
 8003986:	4b5f      	ldr	r3, [pc, #380]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398a:	4a5e      	ldr	r2, [pc, #376]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 800398c:	f043 0304 	orr.w	r3, r3, #4
 8003990:	6713      	str	r3, [r2, #112]	; 0x70
 8003992:	4b5c      	ldr	r3, [pc, #368]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003996:	4a5b      	ldr	r2, [pc, #364]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	6713      	str	r3, [r2, #112]	; 0x70
 800399e:	e00b      	b.n	80039b8 <HAL_RCC_OscConfig+0x324>
 80039a0:	4b58      	ldr	r3, [pc, #352]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 80039a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a4:	4a57      	ldr	r2, [pc, #348]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 80039a6:	f023 0301 	bic.w	r3, r3, #1
 80039aa:	6713      	str	r3, [r2, #112]	; 0x70
 80039ac:	4b55      	ldr	r3, [pc, #340]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 80039ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b0:	4a54      	ldr	r2, [pc, #336]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 80039b2:	f023 0304 	bic.w	r3, r3, #4
 80039b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d015      	beq.n	80039ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c0:	f7fd f93a 	bl	8000c38 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c6:	e00a      	b.n	80039de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c8:	f7fd f936 	bl	8000c38 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e0cb      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039de:	4b49      	ldr	r3, [pc, #292]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 80039e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0ee      	beq.n	80039c8 <HAL_RCC_OscConfig+0x334>
 80039ea:	e014      	b.n	8003a16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ec:	f7fd f924 	bl	8000c38 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f2:	e00a      	b.n	8003a0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f4:	f7fd f920 	bl	8000c38 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e0b5      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a0a:	4b3e      	ldr	r3, [pc, #248]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1ee      	bne.n	80039f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a16:	7dfb      	ldrb	r3, [r7, #23]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d105      	bne.n	8003a28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a1c:	4b39      	ldr	r3, [pc, #228]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	4a38      	ldr	r2, [pc, #224]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80a1 	beq.w	8003b74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a32:	4b34      	ldr	r3, [pc, #208]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 030c 	and.w	r3, r3, #12
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d05c      	beq.n	8003af8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d141      	bne.n	8003aca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a46:	4b31      	ldr	r3, [pc, #196]	; (8003b0c <HAL_RCC_OscConfig+0x478>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4c:	f7fd f8f4 	bl	8000c38 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a54:	f7fd f8f0 	bl	8000c38 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e087      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a66:	4b27      	ldr	r3, [pc, #156]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69da      	ldr	r2, [r3, #28]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	019b      	lsls	r3, r3, #6
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a88:	085b      	lsrs	r3, r3, #1
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	041b      	lsls	r3, r3, #16
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	061b      	lsls	r3, r3, #24
 8003a96:	491b      	ldr	r1, [pc, #108]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a9c:	4b1b      	ldr	r3, [pc, #108]	; (8003b0c <HAL_RCC_OscConfig+0x478>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa2:	f7fd f8c9 	bl	8000c38 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aaa:	f7fd f8c5 	bl	8000c38 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e05c      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003abc:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCC_OscConfig+0x416>
 8003ac8:	e054      	b.n	8003b74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aca:	4b10      	ldr	r3, [pc, #64]	; (8003b0c <HAL_RCC_OscConfig+0x478>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad0:	f7fd f8b2 	bl	8000c38 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad8:	f7fd f8ae 	bl	8000c38 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e045      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aea:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <HAL_RCC_OscConfig+0x470>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x444>
 8003af6:	e03d      	b.n	8003b74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d107      	bne.n	8003b10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e038      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
 8003b04:	40023800 	.word	0x40023800
 8003b08:	40007000 	.word	0x40007000
 8003b0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b10:	4b1b      	ldr	r3, [pc, #108]	; (8003b80 <HAL_RCC_OscConfig+0x4ec>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d028      	beq.n	8003b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d121      	bne.n	8003b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d11a      	bne.n	8003b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b40:	4013      	ands	r3, r2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d111      	bne.n	8003b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b56:	085b      	lsrs	r3, r3, #1
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d107      	bne.n	8003b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d001      	beq.n	8003b74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40023800 	.word	0x40023800

08003b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0cc      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b98:	4b68      	ldr	r3, [pc, #416]	; (8003d3c <HAL_RCC_ClockConfig+0x1b8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d90c      	bls.n	8003bc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba6:	4b65      	ldr	r3, [pc, #404]	; (8003d3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bae:	4b63      	ldr	r3, [pc, #396]	; (8003d3c <HAL_RCC_ClockConfig+0x1b8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0b8      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d020      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bd8:	4b59      	ldr	r3, [pc, #356]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	4a58      	ldr	r2, [pc, #352]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003be2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bf0:	4b53      	ldr	r3, [pc, #332]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	4a52      	ldr	r2, [pc, #328]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bfc:	4b50      	ldr	r3, [pc, #320]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	494d      	ldr	r1, [pc, #308]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d044      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d107      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c22:	4b47      	ldr	r3, [pc, #284]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d119      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e07f      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d003      	beq.n	8003c42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c3e:	2b03      	cmp	r3, #3
 8003c40:	d107      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c42:	4b3f      	ldr	r3, [pc, #252]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d109      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e06f      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c52:	4b3b      	ldr	r3, [pc, #236]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e067      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c62:	4b37      	ldr	r3, [pc, #220]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f023 0203 	bic.w	r2, r3, #3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	4934      	ldr	r1, [pc, #208]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c74:	f7fc ffe0 	bl	8000c38 <HAL_GetTick>
 8003c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7a:	e00a      	b.n	8003c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c7c:	f7fc ffdc 	bl	8000c38 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e04f      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c92:	4b2b      	ldr	r3, [pc, #172]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 020c 	and.w	r2, r3, #12
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d1eb      	bne.n	8003c7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca4:	4b25      	ldr	r3, [pc, #148]	; (8003d3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d20c      	bcs.n	8003ccc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb2:	4b22      	ldr	r3, [pc, #136]	; (8003d3c <HAL_RCC_ClockConfig+0x1b8>)
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cba:	4b20      	ldr	r3, [pc, #128]	; (8003d3c <HAL_RCC_ClockConfig+0x1b8>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d001      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e032      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cd8:	4b19      	ldr	r3, [pc, #100]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	4916      	ldr	r1, [pc, #88]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d009      	beq.n	8003d0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cf6:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	490e      	ldr	r1, [pc, #56]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d0a:	f000 f821 	bl	8003d50 <HAL_RCC_GetSysClockFreq>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	490a      	ldr	r1, [pc, #40]	; (8003d44 <HAL_RCC_ClockConfig+0x1c0>)
 8003d1c:	5ccb      	ldrb	r3, [r1, r3]
 8003d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d22:	4a09      	ldr	r2, [pc, #36]	; (8003d48 <HAL_RCC_ClockConfig+0x1c4>)
 8003d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <HAL_RCC_ClockConfig+0x1c8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fc ff40 	bl	8000bb0 <HAL_InitTick>

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40023c00 	.word	0x40023c00
 8003d40:	40023800 	.word	0x40023800
 8003d44:	08004854 	.word	0x08004854
 8003d48:	20000000 	.word	0x20000000
 8003d4c:	20000004 	.word	0x20000004

08003d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d54:	b094      	sub	sp, #80	; 0x50
 8003d56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d60:	2300      	movs	r3, #0
 8003d62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d68:	4b79      	ldr	r3, [pc, #484]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 030c 	and.w	r3, r3, #12
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d00d      	beq.n	8003d90 <HAL_RCC_GetSysClockFreq+0x40>
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	f200 80e1 	bhi.w	8003f3c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <HAL_RCC_GetSysClockFreq+0x34>
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d003      	beq.n	8003d8a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d82:	e0db      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d84:	4b73      	ldr	r3, [pc, #460]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d86:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003d88:	e0db      	b.n	8003f42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d8a:	4b73      	ldr	r3, [pc, #460]	; (8003f58 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d8e:	e0d8      	b.n	8003f42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d90:	4b6f      	ldr	r3, [pc, #444]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d98:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d9a:	4b6d      	ldr	r3, [pc, #436]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d063      	beq.n	8003e6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da6:	4b6a      	ldr	r3, [pc, #424]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	099b      	lsrs	r3, r3, #6
 8003dac:	2200      	movs	r2, #0
 8003dae:	63bb      	str	r3, [r7, #56]	; 0x38
 8003db0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db8:	633b      	str	r3, [r7, #48]	; 0x30
 8003dba:	2300      	movs	r3, #0
 8003dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8003dbe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003dc2:	4622      	mov	r2, r4
 8003dc4:	462b      	mov	r3, r5
 8003dc6:	f04f 0000 	mov.w	r0, #0
 8003dca:	f04f 0100 	mov.w	r1, #0
 8003dce:	0159      	lsls	r1, r3, #5
 8003dd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dd4:	0150      	lsls	r0, r2, #5
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4621      	mov	r1, r4
 8003ddc:	1a51      	subs	r1, r2, r1
 8003dde:	6139      	str	r1, [r7, #16]
 8003de0:	4629      	mov	r1, r5
 8003de2:	eb63 0301 	sbc.w	r3, r3, r1
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	f04f 0300 	mov.w	r3, #0
 8003df0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003df4:	4659      	mov	r1, fp
 8003df6:	018b      	lsls	r3, r1, #6
 8003df8:	4651      	mov	r1, sl
 8003dfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dfe:	4651      	mov	r1, sl
 8003e00:	018a      	lsls	r2, r1, #6
 8003e02:	4651      	mov	r1, sl
 8003e04:	ebb2 0801 	subs.w	r8, r2, r1
 8003e08:	4659      	mov	r1, fp
 8003e0a:	eb63 0901 	sbc.w	r9, r3, r1
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e22:	4690      	mov	r8, r2
 8003e24:	4699      	mov	r9, r3
 8003e26:	4623      	mov	r3, r4
 8003e28:	eb18 0303 	adds.w	r3, r8, r3
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	462b      	mov	r3, r5
 8003e30:	eb49 0303 	adc.w	r3, r9, r3
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	f04f 0300 	mov.w	r3, #0
 8003e3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e42:	4629      	mov	r1, r5
 8003e44:	024b      	lsls	r3, r1, #9
 8003e46:	4621      	mov	r1, r4
 8003e48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e4c:	4621      	mov	r1, r4
 8003e4e:	024a      	lsls	r2, r1, #9
 8003e50:	4610      	mov	r0, r2
 8003e52:	4619      	mov	r1, r3
 8003e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e56:	2200      	movs	r2, #0
 8003e58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e60:	f7fc f9ba 	bl	80001d8 <__aeabi_uldivmod>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4613      	mov	r3, r2
 8003e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e6c:	e058      	b.n	8003f20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e6e:	4b38      	ldr	r3, [pc, #224]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	099b      	lsrs	r3, r3, #6
 8003e74:	2200      	movs	r2, #0
 8003e76:	4618      	mov	r0, r3
 8003e78:	4611      	mov	r1, r2
 8003e7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e7e:	623b      	str	r3, [r7, #32]
 8003e80:	2300      	movs	r3, #0
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
 8003e84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e88:	4642      	mov	r2, r8
 8003e8a:	464b      	mov	r3, r9
 8003e8c:	f04f 0000 	mov.w	r0, #0
 8003e90:	f04f 0100 	mov.w	r1, #0
 8003e94:	0159      	lsls	r1, r3, #5
 8003e96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e9a:	0150      	lsls	r0, r2, #5
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4641      	mov	r1, r8
 8003ea2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ea6:	4649      	mov	r1, r9
 8003ea8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	f04f 0300 	mov.w	r3, #0
 8003eb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003eb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ebc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ec0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ec4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	00eb      	lsls	r3, r5, #3
 8003ed2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ed6:	00e2      	lsls	r2, r4, #3
 8003ed8:	4614      	mov	r4, r2
 8003eda:	461d      	mov	r5, r3
 8003edc:	4643      	mov	r3, r8
 8003ede:	18e3      	adds	r3, r4, r3
 8003ee0:	603b      	str	r3, [r7, #0]
 8003ee2:	464b      	mov	r3, r9
 8003ee4:	eb45 0303 	adc.w	r3, r5, r3
 8003ee8:	607b      	str	r3, [r7, #4]
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	028b      	lsls	r3, r1, #10
 8003efa:	4621      	mov	r1, r4
 8003efc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f00:	4621      	mov	r1, r4
 8003f02:	028a      	lsls	r2, r1, #10
 8003f04:	4610      	mov	r0, r2
 8003f06:	4619      	mov	r1, r3
 8003f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	61bb      	str	r3, [r7, #24]
 8003f0e:	61fa      	str	r2, [r7, #28]
 8003f10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f14:	f7fc f960 	bl	80001d8 <__aeabi_uldivmod>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f20:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	0c1b      	lsrs	r3, r3, #16
 8003f26:	f003 0303 	and.w	r3, r3, #3
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003f30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f3a:	e002      	b.n	8003f42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f3c:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3750      	adds	r7, #80	; 0x50
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f4e:	bf00      	nop
 8003f50:	40023800 	.word	0x40023800
 8003f54:	00f42400 	.word	0x00f42400
 8003f58:	007a1200 	.word	0x007a1200

08003f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f60:	4b03      	ldr	r3, [pc, #12]	; (8003f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f62:	681b      	ldr	r3, [r3, #0]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	20000000 	.word	0x20000000

08003f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f78:	f7ff fff0 	bl	8003f5c <HAL_RCC_GetHCLKFreq>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	0a9b      	lsrs	r3, r3, #10
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	4903      	ldr	r1, [pc, #12]	; (8003f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f8a:	5ccb      	ldrb	r3, [r1, r3]
 8003f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40023800 	.word	0x40023800
 8003f98:	08004864 	.word	0x08004864

08003f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fa0:	f7ff ffdc 	bl	8003f5c <HAL_RCC_GetHCLKFreq>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	0b5b      	lsrs	r3, r3, #13
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	4903      	ldr	r1, [pc, #12]	; (8003fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fb2:	5ccb      	ldrb	r3, [r1, r3]
 8003fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	08004864 	.word	0x08004864

08003fc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e042      	b.n	800405c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7fc fcfc 	bl	80009e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2224      	movs	r2, #36	; 0x24
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004006:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f973 	bl	80042f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800401c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695a      	ldr	r2, [r3, #20]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800402c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800403c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3708      	adds	r7, #8
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08a      	sub	sp, #40	; 0x28
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	4613      	mov	r3, r2
 8004072:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b20      	cmp	r3, #32
 8004082:	d175      	bne.n	8004170 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_UART_Transmit+0x2c>
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e06e      	b.n	8004172 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2221      	movs	r2, #33	; 0x21
 800409e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040a2:	f7fc fdc9 	bl	8000c38 <HAL_GetTick>
 80040a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	88fa      	ldrh	r2, [r7, #6]
 80040ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	88fa      	ldrh	r2, [r7, #6]
 80040b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040bc:	d108      	bne.n	80040d0 <HAL_UART_Transmit+0x6c>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d104      	bne.n	80040d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040c6:	2300      	movs	r3, #0
 80040c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	61bb      	str	r3, [r7, #24]
 80040ce:	e003      	b.n	80040d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040d8:	e02e      	b.n	8004138 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2200      	movs	r2, #0
 80040e2:	2180      	movs	r1, #128	; 0x80
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 f848 	bl	800417a <UART_WaitOnFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e03a      	b.n	8004172 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10b      	bne.n	800411a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004110:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	3302      	adds	r3, #2
 8004116:	61bb      	str	r3, [r7, #24]
 8004118:	e007      	b.n	800412a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	781a      	ldrb	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	3301      	adds	r3, #1
 8004128:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1cb      	bne.n	80040da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2200      	movs	r2, #0
 800414a:	2140      	movs	r1, #64	; 0x40
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f814 	bl	800417a <UART_WaitOnFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e006      	b.n	8004172 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	e000      	b.n	8004172 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004170:	2302      	movs	r3, #2
  }
}
 8004172:	4618      	mov	r0, r3
 8004174:	3720      	adds	r7, #32
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b086      	sub	sp, #24
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	603b      	str	r3, [r7, #0]
 8004186:	4613      	mov	r3, r2
 8004188:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800418a:	e03b      	b.n	8004204 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004192:	d037      	beq.n	8004204 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004194:	f7fc fd50 	bl	8000c38 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	6a3a      	ldr	r2, [r7, #32]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d302      	bcc.n	80041aa <UART_WaitOnFlagUntilTimeout+0x30>
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e03a      	b.n	8004224 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d023      	beq.n	8004204 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b80      	cmp	r3, #128	; 0x80
 80041c0:	d020      	beq.n	8004204 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b40      	cmp	r3, #64	; 0x40
 80041c6:	d01d      	beq.n	8004204 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d116      	bne.n	8004204 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	617b      	str	r3, [r7, #20]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f81d 	bl	800422c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2208      	movs	r2, #8
 80041f6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e00f      	b.n	8004224 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	4013      	ands	r3, r2
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	429a      	cmp	r2, r3
 8004212:	bf0c      	ite	eq
 8004214:	2301      	moveq	r3, #1
 8004216:	2300      	movne	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	461a      	mov	r2, r3
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	429a      	cmp	r2, r3
 8004220:	d0b4      	beq.n	800418c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800422c:	b480      	push	{r7}
 800422e:	b095      	sub	sp, #84	; 0x54
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	330c      	adds	r3, #12
 800423a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800423e:	e853 3f00 	ldrex	r3, [r3]
 8004242:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800424a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	330c      	adds	r3, #12
 8004252:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004254:	643a      	str	r2, [r7, #64]	; 0x40
 8004256:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004258:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800425a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800425c:	e841 2300 	strex	r3, r2, [r1]
 8004260:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1e5      	bne.n	8004234 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3314      	adds	r3, #20
 800426e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	e853 3f00 	ldrex	r3, [r3]
 8004276:	61fb      	str	r3, [r7, #28]
   return(result);
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f023 0301 	bic.w	r3, r3, #1
 800427e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3314      	adds	r3, #20
 8004286:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004288:	62fa      	str	r2, [r7, #44]	; 0x2c
 800428a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800428e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004290:	e841 2300 	strex	r3, r2, [r1]
 8004294:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1e5      	bne.n	8004268 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d119      	bne.n	80042d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	330c      	adds	r3, #12
 80042aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f023 0310 	bic.w	r3, r3, #16
 80042ba:	647b      	str	r3, [r7, #68]	; 0x44
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	330c      	adds	r3, #12
 80042c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042c4:	61ba      	str	r2, [r7, #24]
 80042c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c8:	6979      	ldr	r1, [r7, #20]
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	e841 2300 	strex	r3, r2, [r1]
 80042d0:	613b      	str	r3, [r7, #16]
   return(result);
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1e5      	bne.n	80042a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042e6:	bf00      	nop
 80042e8:	3754      	adds	r7, #84	; 0x54
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
	...

080042f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f8:	b0c0      	sub	sp, #256	; 0x100
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004310:	68d9      	ldr	r1, [r3, #12]
 8004312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	ea40 0301 	orr.w	r3, r0, r1
 800431c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800431e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	431a      	orrs	r2, r3
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	431a      	orrs	r2, r3
 8004334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800434c:	f021 010c 	bic.w	r1, r1, #12
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800435a:	430b      	orrs	r3, r1
 800435c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800435e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800436a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436e:	6999      	ldr	r1, [r3, #24]
 8004370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	ea40 0301 	orr.w	r3, r0, r1
 800437a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800437c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	4b8f      	ldr	r3, [pc, #572]	; (80045c0 <UART_SetConfig+0x2cc>)
 8004384:	429a      	cmp	r2, r3
 8004386:	d005      	beq.n	8004394 <UART_SetConfig+0xa0>
 8004388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4b8d      	ldr	r3, [pc, #564]	; (80045c4 <UART_SetConfig+0x2d0>)
 8004390:	429a      	cmp	r2, r3
 8004392:	d104      	bne.n	800439e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004394:	f7ff fe02 	bl	8003f9c <HAL_RCC_GetPCLK2Freq>
 8004398:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800439c:	e003      	b.n	80043a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800439e:	f7ff fde9 	bl	8003f74 <HAL_RCC_GetPCLK1Freq>
 80043a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b0:	f040 810c 	bne.w	80045cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043b8:	2200      	movs	r2, #0
 80043ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80043c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80043c6:	4622      	mov	r2, r4
 80043c8:	462b      	mov	r3, r5
 80043ca:	1891      	adds	r1, r2, r2
 80043cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80043ce:	415b      	adcs	r3, r3
 80043d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043d6:	4621      	mov	r1, r4
 80043d8:	eb12 0801 	adds.w	r8, r2, r1
 80043dc:	4629      	mov	r1, r5
 80043de:	eb43 0901 	adc.w	r9, r3, r1
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	f04f 0300 	mov.w	r3, #0
 80043ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043f6:	4690      	mov	r8, r2
 80043f8:	4699      	mov	r9, r3
 80043fa:	4623      	mov	r3, r4
 80043fc:	eb18 0303 	adds.w	r3, r8, r3
 8004400:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004404:	462b      	mov	r3, r5
 8004406:	eb49 0303 	adc.w	r3, r9, r3
 800440a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800440e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800441a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800441e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004422:	460b      	mov	r3, r1
 8004424:	18db      	adds	r3, r3, r3
 8004426:	653b      	str	r3, [r7, #80]	; 0x50
 8004428:	4613      	mov	r3, r2
 800442a:	eb42 0303 	adc.w	r3, r2, r3
 800442e:	657b      	str	r3, [r7, #84]	; 0x54
 8004430:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004434:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004438:	f7fb fece 	bl	80001d8 <__aeabi_uldivmod>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	4b61      	ldr	r3, [pc, #388]	; (80045c8 <UART_SetConfig+0x2d4>)
 8004442:	fba3 2302 	umull	r2, r3, r3, r2
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	011c      	lsls	r4, r3, #4
 800444a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800444e:	2200      	movs	r2, #0
 8004450:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004454:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004458:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800445c:	4642      	mov	r2, r8
 800445e:	464b      	mov	r3, r9
 8004460:	1891      	adds	r1, r2, r2
 8004462:	64b9      	str	r1, [r7, #72]	; 0x48
 8004464:	415b      	adcs	r3, r3
 8004466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004468:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800446c:	4641      	mov	r1, r8
 800446e:	eb12 0a01 	adds.w	sl, r2, r1
 8004472:	4649      	mov	r1, r9
 8004474:	eb43 0b01 	adc.w	fp, r3, r1
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004484:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004488:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800448c:	4692      	mov	sl, r2
 800448e:	469b      	mov	fp, r3
 8004490:	4643      	mov	r3, r8
 8004492:	eb1a 0303 	adds.w	r3, sl, r3
 8004496:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800449a:	464b      	mov	r3, r9
 800449c:	eb4b 0303 	adc.w	r3, fp, r3
 80044a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80044b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044b8:	460b      	mov	r3, r1
 80044ba:	18db      	adds	r3, r3, r3
 80044bc:	643b      	str	r3, [r7, #64]	; 0x40
 80044be:	4613      	mov	r3, r2
 80044c0:	eb42 0303 	adc.w	r3, r2, r3
 80044c4:	647b      	str	r3, [r7, #68]	; 0x44
 80044c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80044ce:	f7fb fe83 	bl	80001d8 <__aeabi_uldivmod>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4611      	mov	r1, r2
 80044d8:	4b3b      	ldr	r3, [pc, #236]	; (80045c8 <UART_SetConfig+0x2d4>)
 80044da:	fba3 2301 	umull	r2, r3, r3, r1
 80044de:	095b      	lsrs	r3, r3, #5
 80044e0:	2264      	movs	r2, #100	; 0x64
 80044e2:	fb02 f303 	mul.w	r3, r2, r3
 80044e6:	1acb      	subs	r3, r1, r3
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044ee:	4b36      	ldr	r3, [pc, #216]	; (80045c8 <UART_SetConfig+0x2d4>)
 80044f0:	fba3 2302 	umull	r2, r3, r3, r2
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044fc:	441c      	add	r4, r3
 80044fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004502:	2200      	movs	r2, #0
 8004504:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004508:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800450c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004510:	4642      	mov	r2, r8
 8004512:	464b      	mov	r3, r9
 8004514:	1891      	adds	r1, r2, r2
 8004516:	63b9      	str	r1, [r7, #56]	; 0x38
 8004518:	415b      	adcs	r3, r3
 800451a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800451c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004520:	4641      	mov	r1, r8
 8004522:	1851      	adds	r1, r2, r1
 8004524:	6339      	str	r1, [r7, #48]	; 0x30
 8004526:	4649      	mov	r1, r9
 8004528:	414b      	adcs	r3, r1
 800452a:	637b      	str	r3, [r7, #52]	; 0x34
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004538:	4659      	mov	r1, fp
 800453a:	00cb      	lsls	r3, r1, #3
 800453c:	4651      	mov	r1, sl
 800453e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004542:	4651      	mov	r1, sl
 8004544:	00ca      	lsls	r2, r1, #3
 8004546:	4610      	mov	r0, r2
 8004548:	4619      	mov	r1, r3
 800454a:	4603      	mov	r3, r0
 800454c:	4642      	mov	r2, r8
 800454e:	189b      	adds	r3, r3, r2
 8004550:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004554:	464b      	mov	r3, r9
 8004556:	460a      	mov	r2, r1
 8004558:	eb42 0303 	adc.w	r3, r2, r3
 800455c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800456c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004570:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004574:	460b      	mov	r3, r1
 8004576:	18db      	adds	r3, r3, r3
 8004578:	62bb      	str	r3, [r7, #40]	; 0x28
 800457a:	4613      	mov	r3, r2
 800457c:	eb42 0303 	adc.w	r3, r2, r3
 8004580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004582:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004586:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800458a:	f7fb fe25 	bl	80001d8 <__aeabi_uldivmod>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <UART_SetConfig+0x2d4>)
 8004594:	fba3 1302 	umull	r1, r3, r3, r2
 8004598:	095b      	lsrs	r3, r3, #5
 800459a:	2164      	movs	r1, #100	; 0x64
 800459c:	fb01 f303 	mul.w	r3, r1, r3
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	3332      	adds	r3, #50	; 0x32
 80045a6:	4a08      	ldr	r2, [pc, #32]	; (80045c8 <UART_SetConfig+0x2d4>)
 80045a8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	f003 0207 	and.w	r2, r3, #7
 80045b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4422      	add	r2, r4
 80045ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045bc:	e106      	b.n	80047cc <UART_SetConfig+0x4d8>
 80045be:	bf00      	nop
 80045c0:	40011000 	.word	0x40011000
 80045c4:	40011400 	.word	0x40011400
 80045c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045d0:	2200      	movs	r2, #0
 80045d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80045da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80045de:	4642      	mov	r2, r8
 80045e0:	464b      	mov	r3, r9
 80045e2:	1891      	adds	r1, r2, r2
 80045e4:	6239      	str	r1, [r7, #32]
 80045e6:	415b      	adcs	r3, r3
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
 80045ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045ee:	4641      	mov	r1, r8
 80045f0:	1854      	adds	r4, r2, r1
 80045f2:	4649      	mov	r1, r9
 80045f4:	eb43 0501 	adc.w	r5, r3, r1
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	00eb      	lsls	r3, r5, #3
 8004602:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004606:	00e2      	lsls	r2, r4, #3
 8004608:	4614      	mov	r4, r2
 800460a:	461d      	mov	r5, r3
 800460c:	4643      	mov	r3, r8
 800460e:	18e3      	adds	r3, r4, r3
 8004610:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004614:	464b      	mov	r3, r9
 8004616:	eb45 0303 	adc.w	r3, r5, r3
 800461a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800461e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800462a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800462e:	f04f 0200 	mov.w	r2, #0
 8004632:	f04f 0300 	mov.w	r3, #0
 8004636:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800463a:	4629      	mov	r1, r5
 800463c:	008b      	lsls	r3, r1, #2
 800463e:	4621      	mov	r1, r4
 8004640:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004644:	4621      	mov	r1, r4
 8004646:	008a      	lsls	r2, r1, #2
 8004648:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800464c:	f7fb fdc4 	bl	80001d8 <__aeabi_uldivmod>
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	4b60      	ldr	r3, [pc, #384]	; (80047d8 <UART_SetConfig+0x4e4>)
 8004656:	fba3 2302 	umull	r2, r3, r3, r2
 800465a:	095b      	lsrs	r3, r3, #5
 800465c:	011c      	lsls	r4, r3, #4
 800465e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004662:	2200      	movs	r2, #0
 8004664:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004668:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800466c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004670:	4642      	mov	r2, r8
 8004672:	464b      	mov	r3, r9
 8004674:	1891      	adds	r1, r2, r2
 8004676:	61b9      	str	r1, [r7, #24]
 8004678:	415b      	adcs	r3, r3
 800467a:	61fb      	str	r3, [r7, #28]
 800467c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004680:	4641      	mov	r1, r8
 8004682:	1851      	adds	r1, r2, r1
 8004684:	6139      	str	r1, [r7, #16]
 8004686:	4649      	mov	r1, r9
 8004688:	414b      	adcs	r3, r1
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004698:	4659      	mov	r1, fp
 800469a:	00cb      	lsls	r3, r1, #3
 800469c:	4651      	mov	r1, sl
 800469e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046a2:	4651      	mov	r1, sl
 80046a4:	00ca      	lsls	r2, r1, #3
 80046a6:	4610      	mov	r0, r2
 80046a8:	4619      	mov	r1, r3
 80046aa:	4603      	mov	r3, r0
 80046ac:	4642      	mov	r2, r8
 80046ae:	189b      	adds	r3, r3, r2
 80046b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046b4:	464b      	mov	r3, r9
 80046b6:	460a      	mov	r2, r1
 80046b8:	eb42 0303 	adc.w	r3, r2, r3
 80046bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80046ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80046d8:	4649      	mov	r1, r9
 80046da:	008b      	lsls	r3, r1, #2
 80046dc:	4641      	mov	r1, r8
 80046de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046e2:	4641      	mov	r1, r8
 80046e4:	008a      	lsls	r2, r1, #2
 80046e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046ea:	f7fb fd75 	bl	80001d8 <__aeabi_uldivmod>
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	4611      	mov	r1, r2
 80046f4:	4b38      	ldr	r3, [pc, #224]	; (80047d8 <UART_SetConfig+0x4e4>)
 80046f6:	fba3 2301 	umull	r2, r3, r3, r1
 80046fa:	095b      	lsrs	r3, r3, #5
 80046fc:	2264      	movs	r2, #100	; 0x64
 80046fe:	fb02 f303 	mul.w	r3, r2, r3
 8004702:	1acb      	subs	r3, r1, r3
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	3332      	adds	r3, #50	; 0x32
 8004708:	4a33      	ldr	r2, [pc, #204]	; (80047d8 <UART_SetConfig+0x4e4>)
 800470a:	fba2 2303 	umull	r2, r3, r2, r3
 800470e:	095b      	lsrs	r3, r3, #5
 8004710:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004714:	441c      	add	r4, r3
 8004716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800471a:	2200      	movs	r2, #0
 800471c:	673b      	str	r3, [r7, #112]	; 0x70
 800471e:	677a      	str	r2, [r7, #116]	; 0x74
 8004720:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004724:	4642      	mov	r2, r8
 8004726:	464b      	mov	r3, r9
 8004728:	1891      	adds	r1, r2, r2
 800472a:	60b9      	str	r1, [r7, #8]
 800472c:	415b      	adcs	r3, r3
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004734:	4641      	mov	r1, r8
 8004736:	1851      	adds	r1, r2, r1
 8004738:	6039      	str	r1, [r7, #0]
 800473a:	4649      	mov	r1, r9
 800473c:	414b      	adcs	r3, r1
 800473e:	607b      	str	r3, [r7, #4]
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800474c:	4659      	mov	r1, fp
 800474e:	00cb      	lsls	r3, r1, #3
 8004750:	4651      	mov	r1, sl
 8004752:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004756:	4651      	mov	r1, sl
 8004758:	00ca      	lsls	r2, r1, #3
 800475a:	4610      	mov	r0, r2
 800475c:	4619      	mov	r1, r3
 800475e:	4603      	mov	r3, r0
 8004760:	4642      	mov	r2, r8
 8004762:	189b      	adds	r3, r3, r2
 8004764:	66bb      	str	r3, [r7, #104]	; 0x68
 8004766:	464b      	mov	r3, r9
 8004768:	460a      	mov	r2, r1
 800476a:	eb42 0303 	adc.w	r3, r2, r3
 800476e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	663b      	str	r3, [r7, #96]	; 0x60
 800477a:	667a      	str	r2, [r7, #100]	; 0x64
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004788:	4649      	mov	r1, r9
 800478a:	008b      	lsls	r3, r1, #2
 800478c:	4641      	mov	r1, r8
 800478e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004792:	4641      	mov	r1, r8
 8004794:	008a      	lsls	r2, r1, #2
 8004796:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800479a:	f7fb fd1d 	bl	80001d8 <__aeabi_uldivmod>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <UART_SetConfig+0x4e4>)
 80047a4:	fba3 1302 	umull	r1, r3, r3, r2
 80047a8:	095b      	lsrs	r3, r3, #5
 80047aa:	2164      	movs	r1, #100	; 0x64
 80047ac:	fb01 f303 	mul.w	r3, r1, r3
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	3332      	adds	r3, #50	; 0x32
 80047b6:	4a08      	ldr	r2, [pc, #32]	; (80047d8 <UART_SetConfig+0x4e4>)
 80047b8:	fba2 2303 	umull	r2, r3, r2, r3
 80047bc:	095b      	lsrs	r3, r3, #5
 80047be:	f003 020f 	and.w	r2, r3, #15
 80047c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4422      	add	r2, r4
 80047ca:	609a      	str	r2, [r3, #8]
}
 80047cc:	bf00      	nop
 80047ce:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80047d2:	46bd      	mov	sp, r7
 80047d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047d8:	51eb851f 	.word	0x51eb851f

080047dc <memset>:
 80047dc:	4402      	add	r2, r0
 80047de:	4603      	mov	r3, r0
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d100      	bne.n	80047e6 <memset+0xa>
 80047e4:	4770      	bx	lr
 80047e6:	f803 1b01 	strb.w	r1, [r3], #1
 80047ea:	e7f9      	b.n	80047e0 <memset+0x4>

080047ec <__libc_init_array>:
 80047ec:	b570      	push	{r4, r5, r6, lr}
 80047ee:	4d0d      	ldr	r5, [pc, #52]	; (8004824 <__libc_init_array+0x38>)
 80047f0:	4c0d      	ldr	r4, [pc, #52]	; (8004828 <__libc_init_array+0x3c>)
 80047f2:	1b64      	subs	r4, r4, r5
 80047f4:	10a4      	asrs	r4, r4, #2
 80047f6:	2600      	movs	r6, #0
 80047f8:	42a6      	cmp	r6, r4
 80047fa:	d109      	bne.n	8004810 <__libc_init_array+0x24>
 80047fc:	4d0b      	ldr	r5, [pc, #44]	; (800482c <__libc_init_array+0x40>)
 80047fe:	4c0c      	ldr	r4, [pc, #48]	; (8004830 <__libc_init_array+0x44>)
 8004800:	f000 f818 	bl	8004834 <_init>
 8004804:	1b64      	subs	r4, r4, r5
 8004806:	10a4      	asrs	r4, r4, #2
 8004808:	2600      	movs	r6, #0
 800480a:	42a6      	cmp	r6, r4
 800480c:	d105      	bne.n	800481a <__libc_init_array+0x2e>
 800480e:	bd70      	pop	{r4, r5, r6, pc}
 8004810:	f855 3b04 	ldr.w	r3, [r5], #4
 8004814:	4798      	blx	r3
 8004816:	3601      	adds	r6, #1
 8004818:	e7ee      	b.n	80047f8 <__libc_init_array+0xc>
 800481a:	f855 3b04 	ldr.w	r3, [r5], #4
 800481e:	4798      	blx	r3
 8004820:	3601      	adds	r6, #1
 8004822:	e7f2      	b.n	800480a <__libc_init_array+0x1e>
 8004824:	08004874 	.word	0x08004874
 8004828:	08004874 	.word	0x08004874
 800482c:	08004874 	.word	0x08004874
 8004830:	08004878 	.word	0x08004878

08004834 <_init>:
 8004834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004836:	bf00      	nop
 8004838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483a:	bc08      	pop	{r3}
 800483c:	469e      	mov	lr, r3
 800483e:	4770      	bx	lr

08004840 <_fini>:
 8004840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004842:	bf00      	nop
 8004844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004846:	bc08      	pop	{r3}
 8004848:	469e      	mov	lr, r3
 800484a:	4770      	bx	lr
