
Lab6.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800346c  0800346c  0001346c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003544  08003544  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003544  08003544  00013544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800354c  0800354c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800354c  0800354c  0001354c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003550  08003550  00013550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003554  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004024  20000010  08003564  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004034  08003564  00024034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bdb1  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020bb  00000000  00000000  0002be34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af8  00000000  00000000  0002def0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000860  00000000  00000000  0002e9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001636a  00000000  00000000  0002f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c267  00000000  00000000  000455b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008da1d  00000000  00000000  00051819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002bc0  00000000  00000000  000df238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e1df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003454 	.word	0x08003454

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08003454 	.word	0x08003454

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	2000002c 	.word	0x2000002c
 800050c:	20000080 	.word	0x20000080

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b5b0      	push	{r4, r5, r7, lr}
 8000512:	b0a4      	sub	sp, #144	; 0x90
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fa9b 	bl	8000a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f879 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f90b 	bl	8000738 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000522:	f000 f8df 	bl	80006e4 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000526:	4b30      	ldr	r3, [pc, #192]	; (80005e8 <main+0xd8>)
 8000528:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800052c:	461d      	mov	r5, r3
 800052e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000532:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000536:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800053a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f001 fd10 	bl	8001f66 <osThreadCreate>
 8000546:	4603      	mov	r3, r0
 8000548:	4a28      	ldr	r2, [pc, #160]	; (80005ec <main+0xdc>)
 800054a:	6013      	str	r3, [r2, #0]

  /* definition and creation of led_1 */
  osThreadDef(led_1, led_thread_1, osPriorityIdle, 0, 128);
 800054c:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <main+0xe0>)
 800054e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000552:	461d      	mov	r5, r3
 8000554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000558:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800055c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  led_1Handle = osThreadCreate(osThread(led_1), NULL);
 8000560:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f001 fcfd 	bl	8001f66 <osThreadCreate>
 800056c:	4603      	mov	r3, r0
 800056e:	4a21      	ldr	r2, [pc, #132]	; (80005f4 <main+0xe4>)
 8000570:	6013      	str	r3, [r2, #0]

  /* definition and creation of led_2 */
  osThreadDef(led_2, led_thread_2, osPriorityIdle, 0, 128);
 8000572:	4b21      	ldr	r3, [pc, #132]	; (80005f8 <main+0xe8>)
 8000574:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000578:	461d      	mov	r5, r3
 800057a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000582:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  led_2Handle = osThreadCreate(osThread(led_2), NULL);
 8000586:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800058a:	2100      	movs	r1, #0
 800058c:	4618      	mov	r0, r3
 800058e:	f001 fcea 	bl	8001f66 <osThreadCreate>
 8000592:	4603      	mov	r3, r0
 8000594:	4a19      	ldr	r2, [pc, #100]	; (80005fc <main+0xec>)
 8000596:	6013      	str	r3, [r2, #0]

  /* definition and creation of led_3 */
  osThreadDef(led_3, led_thread_3, osPriorityIdle, 0, 128);
 8000598:	4b19      	ldr	r3, [pc, #100]	; (8000600 <main+0xf0>)
 800059a:	f107 0420 	add.w	r4, r7, #32
 800059e:	461d      	mov	r5, r3
 80005a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  led_3Handle = osThreadCreate(osThread(led_3), NULL);
 80005ac:	f107 0320 	add.w	r3, r7, #32
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 fcd7 	bl	8001f66 <osThreadCreate>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a12      	ldr	r2, [pc, #72]	; (8000604 <main+0xf4>)
 80005bc:	6013      	str	r3, [r2, #0]

  /* definition and creation of led_4 */
  osThreadDef(led_4, led_thread_4, osPriorityIdle, 0, 128);
 80005be:	4b12      	ldr	r3, [pc, #72]	; (8000608 <main+0xf8>)
 80005c0:	1d3c      	adds	r4, r7, #4
 80005c2:	461d      	mov	r5, r3
 80005c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  led_4Handle = osThreadCreate(osThread(led_4), NULL);
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 fcc6 	bl	8001f66 <osThreadCreate>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a0b      	ldr	r2, [pc, #44]	; (800060c <main+0xfc>)
 80005de:	6013      	str	r3, [r2, #0]
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005e0:	f001 fcba 	bl	8001f58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <main+0xd4>
 80005e6:	bf00      	nop
 80005e8:	08003478 	.word	0x08003478
 80005ec:	200002c8 	.word	0x200002c8
 80005f0:	0800349c 	.word	0x0800349c
 80005f4:	200002cc 	.word	0x200002cc
 80005f8:	080034c0 	.word	0x080034c0
 80005fc:	200002d0 	.word	0x200002d0
 8000600:	080034e4 	.word	0x080034e4
 8000604:	200002d4 	.word	0x200002d4
 8000608:	08003508 	.word	0x08003508
 800060c:	200002d8 	.word	0x200002d8

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	; 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f002 feec 	bl	80033fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b28      	ldr	r3, [pc, #160]	; (80006dc <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a27      	ldr	r2, [pc, #156]	; (80006dc <SystemClock_Config+0xcc>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <SystemClock_Config+0xd0>)
 800065a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066c:	2302      	movs	r3, #2
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000670:	2301      	movs	r3, #1
 8000672:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000674:	2310      	movs	r3, #16
 8000676:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000678:	2302      	movs	r3, #2
 800067a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067c:	2300      	movs	r3, #0
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000680:	2310      	movs	r3, #16
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000684:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000688:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800068a:	2304      	movs	r3, #4
 800068c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068e:	2304      	movs	r3, #4
 8000690:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	4618      	mov	r0, r3
 8000698:	f000 fcea 	bl	8001070 <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006a2:	f000 f8fb 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2302      	movs	r3, #2
 80006ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2102      	movs	r1, #2
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 ff4c 	bl	8001560 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ce:	f000 f8e5 	bl	800089c <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	; 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_USART2_UART_Init+0x50>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 800071c:	f001 f940 	bl	80019a0 <HAL_UART_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000726:	f000 f8b9 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000280 	.word	0x20000280
 8000734:	40004400 	.word	0x40004400

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	4b2e      	ldr	r3, [pc, #184]	; (800080c <MX_GPIO_Init+0xd4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a2d      	ldr	r2, [pc, #180]	; (800080c <MX_GPIO_Init+0xd4>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b2b      	ldr	r3, [pc, #172]	; (800080c <MX_GPIO_Init+0xd4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	4b27      	ldr	r3, [pc, #156]	; (800080c <MX_GPIO_Init+0xd4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a26      	ldr	r2, [pc, #152]	; (800080c <MX_GPIO_Init+0xd4>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b24      	ldr	r3, [pc, #144]	; (800080c <MX_GPIO_Init+0xd4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	4b20      	ldr	r3, [pc, #128]	; (800080c <MX_GPIO_Init+0xd4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a1f      	ldr	r2, [pc, #124]	; (800080c <MX_GPIO_Init+0xd4>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_GPIO_Init+0xd4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_GPIO_Init+0xd4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a18      	ldr	r2, [pc, #96]	; (800080c <MX_GPIO_Init+0xd4>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_GPIO_Init+0xd4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f240 2123 	movw	r1, #547	; 0x223
 80007c4:	4812      	ldr	r0, [pc, #72]	; (8000810 <MX_GPIO_Init+0xd8>)
 80007c6:	f000 fc1f 	bl	8001008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	480c      	ldr	r0, [pc, #48]	; (8000814 <MX_GPIO_Init+0xdc>)
 80007e2:	f000 fa8d 	bl	8000d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin|GPIO_PIN_9;
 80007e6:	f240 2323 	movw	r3, #547	; 0x223
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4619      	mov	r1, r3
 80007fe:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_GPIO_Init+0xd8>)
 8000800:	f000 fa7e 	bl	8000d00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000804:	bf00      	nop
 8000806:	3728      	adds	r7, #40	; 0x28
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40023800 	.word	0x40023800
 8000810:	40020000 	.word	0x40020000
 8000814:	40020800 	.word	0x40020800

08000818 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000820:	2001      	movs	r0, #1
 8000822:	f001 fbec 	bl	8001ffe <osDelay>
 8000826:	e7fb      	b.n	8000820 <StartDefaultTask+0x8>

08000828 <led_thread_1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_thread_1 */
void led_thread_1(void const * argument)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_thread_1 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000830:	2120      	movs	r1, #32
 8000832:	4803      	ldr	r0, [pc, #12]	; (8000840 <led_thread_1+0x18>)
 8000834:	f000 fc01 	bl	800103a <HAL_GPIO_TogglePin>
    osDelay(50);
 8000838:	2032      	movs	r0, #50	; 0x32
 800083a:	f001 fbe0 	bl	8001ffe <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800083e:	e7f7      	b.n	8000830 <led_thread_1+0x8>
 8000840:	40020000 	.word	0x40020000

08000844 <led_thread_2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_thread_2 */
void led_thread_2(void const * argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_thread_2 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800084c:	2101      	movs	r1, #1
 800084e:	4803      	ldr	r0, [pc, #12]	; (800085c <led_thread_2+0x18>)
 8000850:	f000 fbf3 	bl	800103a <HAL_GPIO_TogglePin>
	osDelay(18);
 8000854:	2012      	movs	r0, #18
 8000856:	f001 fbd2 	bl	8001ffe <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800085a:	e7f7      	b.n	800084c <led_thread_2+0x8>
 800085c:	40020000 	.word	0x40020000

08000860 <led_thread_3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_thread_3 */
void led_thread_3(void const * argument)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_thread_3 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000868:	2102      	movs	r1, #2
 800086a:	4803      	ldr	r0, [pc, #12]	; (8000878 <led_thread_3+0x18>)
 800086c:	f000 fbe5 	bl	800103a <HAL_GPIO_TogglePin>
	osDelay(128);
 8000870:	2080      	movs	r0, #128	; 0x80
 8000872:	f001 fbc4 	bl	8001ffe <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000876:	e7f7      	b.n	8000868 <led_thread_3+0x8>
 8000878:	40020000 	.word	0x40020000

0800087c <led_thread_4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_thread_4 */
void led_thread_4(void const * argument)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_thread_4 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000888:	4803      	ldr	r0, [pc, #12]	; (8000898 <led_thread_4+0x1c>)
 800088a:	f000 fbd6 	bl	800103a <HAL_GPIO_TogglePin>
	osDelay(64);
 800088e:	2040      	movs	r0, #64	; 0x40
 8000890:	f001 fbb5 	bl	8001ffe <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000894:	e7f6      	b.n	8000884 <led_thread_4+0x8>
 8000896:	bf00      	nop
 8000898:	40020000 	.word	0x40020000

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_MspInit+0x54>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	4a11      	ldr	r2, [pc, #68]	; (80008fc <HAL_MspInit+0x54>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008bc:	6453      	str	r3, [r2, #68]	; 0x44
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_MspInit+0x54>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <HAL_MspInit+0x54>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <HAL_MspInit+0x54>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d8:	6413      	str	r3, [r2, #64]	; 0x40
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_MspInit+0x54>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	210f      	movs	r1, #15
 80008ea:	f06f 0001 	mvn.w	r0, #1
 80008ee:	f000 f9de 	bl	8000cae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a19      	ldr	r2, [pc, #100]	; (8000984 <HAL_UART_MspInit+0x84>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d12b      	bne.n	800097a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <HAL_UART_MspInit+0x88>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	4a17      	ldr	r2, [pc, #92]	; (8000988 <HAL_UART_MspInit+0x88>)
 800092c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <HAL_UART_MspInit+0x88>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <HAL_UART_MspInit+0x88>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a10      	ldr	r2, [pc, #64]	; (8000988 <HAL_UART_MspInit+0x88>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <HAL_UART_MspInit+0x88>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800095a:	230c      	movs	r3, #12
 800095c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800096a:	2307      	movs	r3, #7
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	4805      	ldr	r0, [pc, #20]	; (800098c <HAL_UART_MspInit+0x8c>)
 8000976:	f000 f9c3 	bl	8000d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	; 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40004400 	.word	0x40004400
 8000988:	40023800 	.word	0x40023800
 800098c:	40020000 	.word	0x40020000

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000994:	e7fe      	b.n	8000994 <NMI_Handler+0x4>

08000996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <HardFault_Handler+0x4>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <MemManage_Handler+0x4>

080009a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <UsageFault_Handler+0x4>

080009ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c0:	f000 f898 	bl	8000af4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009c4:	f002 f89e 	bl	8002b04 <xTaskGetSchedulerState>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d001      	beq.n	80009d2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009ce:	f002 fadb 	bl	8002f88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <SystemInit+0x20>)
 80009de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e2:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <SystemInit+0x20>)
 80009e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a00:	f7ff ffea 	bl	80009d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a04:	480c      	ldr	r0, [pc, #48]	; (8000a38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a06:	490d      	ldr	r1, [pc, #52]	; (8000a3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a08:	4a0d      	ldr	r2, [pc, #52]	; (8000a40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a0c:	e002      	b.n	8000a14 <LoopCopyDataInit>

08000a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a12:	3304      	adds	r3, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a18:	d3f9      	bcc.n	8000a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a1c:	4c0a      	ldr	r4, [pc, #40]	; (8000a48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a20:	e001      	b.n	8000a26 <LoopFillZerobss>

08000a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a24:	3204      	adds	r2, #4

08000a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a28:	d3fb      	bcc.n	8000a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a2a:	f002 fcef 	bl	800340c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a2e:	f7ff fd6f 	bl	8000510 <main>
  bx  lr    
 8000a32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a3c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a40:	08003554 	.word	0x08003554
  ldr r2, =_sbss
 8000a44:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a48:	20004034 	.word	0x20004034

08000a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC_IRQHandler>
	...

08000a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a54:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <HAL_Init+0x40>)
 8000a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <HAL_Init+0x40>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <HAL_Init+0x40>)
 8000a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_Init+0x40>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <HAL_Init+0x40>)
 8000a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a78:	2003      	movs	r0, #3
 8000a7a:	f000 f90d 	bl	8000c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7e:	200f      	movs	r0, #15
 8000a80:	f000 f808 	bl	8000a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a84:	f7ff ff10 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023c00 	.word	0x40023c00

08000a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_InitTick+0x54>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_InitTick+0x58>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 f917 	bl	8000ce6 <HAL_SYSTICK_Config>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e00e      	b.n	8000ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b0f      	cmp	r3, #15
 8000ac6:	d80a      	bhi.n	8000ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad0:	f000 f8ed 	bl	8000cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad4:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <HAL_InitTick+0x5c>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
 8000adc:	e000      	b.n	8000ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	20000008 	.word	0x20000008
 8000af0:	20000004 	.word	0x20000004

08000af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_IncTick+0x20>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_IncTick+0x24>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <HAL_IncTick+0x24>)
 8000b06:	6013      	str	r3, [r2, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000008 	.word	0x20000008
 8000b18:	200002dc 	.word	0x200002dc

08000b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <HAL_GetTick+0x14>)
 8000b22:	681b      	ldr	r3, [r3, #0]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	200002dc 	.word	0x200002dc

08000b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b66:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	60d3      	str	r3, [r2, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <__NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	; (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	; (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	; 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c64:	d301      	bcc.n	8000c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00f      	b.n	8000c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <SysTick_Config+0x40>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c72:	210f      	movs	r1, #15
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c78:	f7ff ff8e 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <SysTick_Config+0x40>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <SysTick_Config+0x40>)
 8000c84:	2207      	movs	r2, #7
 8000c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff47 	bl	8000b34 <__NVIC_SetPriorityGrouping>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc0:	f7ff ff5c 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	6978      	ldr	r0, [r7, #20]
 8000ccc:	f7ff ff8e 	bl	8000bec <NVIC_EncodePriority>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff5d 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff ffb0 	bl	8000c54 <SysTick_Config>
 8000cf4:	4603      	mov	r3, r0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	e159      	b.n	8000fd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	f040 8148 	bne.w	8000fca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 0303 	and.w	r3, r3, #3
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d005      	beq.n	8000d52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d130      	bne.n	8000db4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4013      	ands	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	68da      	ldr	r2, [r3, #12]
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d88:	2201      	movs	r2, #1
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	091b      	lsrs	r3, r3, #4
 8000d9e:	f003 0201 	and.w	r2, r3, #1
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d017      	beq.n	8000df0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	2203      	movs	r2, #3
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d123      	bne.n	8000e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	08da      	lsrs	r2, r3, #3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3208      	adds	r2, #8
 8000e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	f003 0307 	and.w	r3, r3, #7
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	220f      	movs	r2, #15
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	691a      	ldr	r2, [r3, #16]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	08da      	lsrs	r2, r3, #3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3208      	adds	r2, #8
 8000e3e:	69b9      	ldr	r1, [r7, #24]
 8000e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0203 	and.w	r2, r3, #3
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f000 80a2 	beq.w	8000fca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b57      	ldr	r3, [pc, #348]	; (8000fe8 <HAL_GPIO_Init+0x2e8>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a56      	ldr	r2, [pc, #344]	; (8000fe8 <HAL_GPIO_Init+0x2e8>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b54      	ldr	r3, [pc, #336]	; (8000fe8 <HAL_GPIO_Init+0x2e8>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ea2:	4a52      	ldr	r2, [pc, #328]	; (8000fec <HAL_GPIO_Init+0x2ec>)
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	220f      	movs	r2, #15
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a49      	ldr	r2, [pc, #292]	; (8000ff0 <HAL_GPIO_Init+0x2f0>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d019      	beq.n	8000f02 <HAL_GPIO_Init+0x202>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a48      	ldr	r2, [pc, #288]	; (8000ff4 <HAL_GPIO_Init+0x2f4>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d013      	beq.n	8000efe <HAL_GPIO_Init+0x1fe>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a47      	ldr	r2, [pc, #284]	; (8000ff8 <HAL_GPIO_Init+0x2f8>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d00d      	beq.n	8000efa <HAL_GPIO_Init+0x1fa>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a46      	ldr	r2, [pc, #280]	; (8000ffc <HAL_GPIO_Init+0x2fc>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d007      	beq.n	8000ef6 <HAL_GPIO_Init+0x1f6>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a45      	ldr	r2, [pc, #276]	; (8001000 <HAL_GPIO_Init+0x300>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d101      	bne.n	8000ef2 <HAL_GPIO_Init+0x1f2>
 8000eee:	2304      	movs	r3, #4
 8000ef0:	e008      	b.n	8000f04 <HAL_GPIO_Init+0x204>
 8000ef2:	2307      	movs	r3, #7
 8000ef4:	e006      	b.n	8000f04 <HAL_GPIO_Init+0x204>
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e004      	b.n	8000f04 <HAL_GPIO_Init+0x204>
 8000efa:	2302      	movs	r3, #2
 8000efc:	e002      	b.n	8000f04 <HAL_GPIO_Init+0x204>
 8000efe:	2301      	movs	r3, #1
 8000f00:	e000      	b.n	8000f04 <HAL_GPIO_Init+0x204>
 8000f02:	2300      	movs	r3, #0
 8000f04:	69fa      	ldr	r2, [r7, #28]
 8000f06:	f002 0203 	and.w	r2, r2, #3
 8000f0a:	0092      	lsls	r2, r2, #2
 8000f0c:	4093      	lsls	r3, r2
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f14:	4935      	ldr	r1, [pc, #212]	; (8000fec <HAL_GPIO_Init+0x2ec>)
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f22:	4b38      	ldr	r3, [pc, #224]	; (8001004 <HAL_GPIO_Init+0x304>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f46:	4a2f      	ldr	r2, [pc, #188]	; (8001004 <HAL_GPIO_Init+0x304>)
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f4c:	4b2d      	ldr	r3, [pc, #180]	; (8001004 <HAL_GPIO_Init+0x304>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f70:	4a24      	ldr	r2, [pc, #144]	; (8001004 <HAL_GPIO_Init+0x304>)
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f76:	4b23      	ldr	r3, [pc, #140]	; (8001004 <HAL_GPIO_Init+0x304>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f9a:	4a1a      	ldr	r2, [pc, #104]	; (8001004 <HAL_GPIO_Init+0x304>)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	; (8001004 <HAL_GPIO_Init+0x304>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fc4:	4a0f      	ldr	r2, [pc, #60]	; (8001004 <HAL_GPIO_Init+0x304>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	61fb      	str	r3, [r7, #28]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	2b0f      	cmp	r3, #15
 8000fd4:	f67f aea2 	bls.w	8000d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3724      	adds	r7, #36	; 0x24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40013800 	.word	0x40013800
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	40020400 	.word	0x40020400
 8000ff8:	40020800 	.word	0x40020800
 8000ffc:	40020c00 	.word	0x40020c00
 8001000:	40021000 	.word	0x40021000
 8001004:	40013c00 	.word	0x40013c00

08001008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	807b      	strh	r3, [r7, #2]
 8001014:	4613      	mov	r3, r2
 8001016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001018:	787b      	ldrb	r3, [r7, #1]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800101e:	887a      	ldrh	r2, [r7, #2]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001024:	e003      	b.n	800102e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001026:	887b      	ldrh	r3, [r7, #2]
 8001028:	041a      	lsls	r2, r3, #16
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	619a      	str	r2, [r3, #24]
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800103a:	b480      	push	{r7}
 800103c:	b085      	sub	sp, #20
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	460b      	mov	r3, r1
 8001044:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800104c:	887a      	ldrh	r2, [r7, #2]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4013      	ands	r3, r2
 8001052:	041a      	lsls	r2, r3, #16
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	43d9      	mvns	r1, r3
 8001058:	887b      	ldrh	r3, [r7, #2]
 800105a:	400b      	ands	r3, r1
 800105c:	431a      	orrs	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	619a      	str	r2, [r3, #24]
}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e267      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	d075      	beq.n	800117a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800108e:	4b88      	ldr	r3, [pc, #544]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 030c 	and.w	r3, r3, #12
 8001096:	2b04      	cmp	r3, #4
 8001098:	d00c      	beq.n	80010b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800109a:	4b85      	ldr	r3, [pc, #532]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010a2:	2b08      	cmp	r3, #8
 80010a4:	d112      	bne.n	80010cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010a6:	4b82      	ldr	r3, [pc, #520]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010b2:	d10b      	bne.n	80010cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b4:	4b7e      	ldr	r3, [pc, #504]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d05b      	beq.n	8001178 <HAL_RCC_OscConfig+0x108>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d157      	bne.n	8001178 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e242      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d4:	d106      	bne.n	80010e4 <HAL_RCC_OscConfig+0x74>
 80010d6:	4b76      	ldr	r3, [pc, #472]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a75      	ldr	r2, [pc, #468]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e01d      	b.n	8001120 <HAL_RCC_OscConfig+0xb0>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010ec:	d10c      	bne.n	8001108 <HAL_RCC_OscConfig+0x98>
 80010ee:	4b70      	ldr	r3, [pc, #448]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a6f      	ldr	r2, [pc, #444]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	4b6d      	ldr	r3, [pc, #436]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a6c      	ldr	r2, [pc, #432]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	e00b      	b.n	8001120 <HAL_RCC_OscConfig+0xb0>
 8001108:	4b69      	ldr	r3, [pc, #420]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a68      	ldr	r2, [pc, #416]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800110e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b66      	ldr	r3, [pc, #408]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a65      	ldr	r2, [pc, #404]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800111a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800111e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d013      	beq.n	8001150 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001128:	f7ff fcf8 	bl	8000b1c <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001130:	f7ff fcf4 	bl	8000b1c <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b64      	cmp	r3, #100	; 0x64
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e207      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001142:	4b5b      	ldr	r3, [pc, #364]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f0      	beq.n	8001130 <HAL_RCC_OscConfig+0xc0>
 800114e:	e014      	b.n	800117a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fce4 	bl	8000b1c <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff fce0 	bl	8000b1c <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b64      	cmp	r3, #100	; 0x64
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e1f3      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116a:	4b51      	ldr	r3, [pc, #324]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0xe8>
 8001176:	e000      	b.n	800117a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d063      	beq.n	800124e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001186:	4b4a      	ldr	r3, [pc, #296]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 030c 	and.w	r3, r3, #12
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00b      	beq.n	80011aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001192:	4b47      	ldr	r3, [pc, #284]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800119a:	2b08      	cmp	r3, #8
 800119c:	d11c      	bne.n	80011d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800119e:	4b44      	ldr	r3, [pc, #272]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d116      	bne.n	80011d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011aa:	4b41      	ldr	r3, [pc, #260]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d005      	beq.n	80011c2 <HAL_RCC_OscConfig+0x152>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d001      	beq.n	80011c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e1c7      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c2:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	4937      	ldr	r1, [pc, #220]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d6:	e03a      	b.n	800124e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d020      	beq.n	8001222 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e0:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <HAL_RCC_OscConfig+0x244>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e6:	f7ff fc99 	bl	8000b1c <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ee:	f7ff fc95 	bl	8000b1c <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e1a8      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001200:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f0      	beq.n	80011ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120c:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	4925      	ldr	r1, [pc, #148]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800121c:	4313      	orrs	r3, r2
 800121e:	600b      	str	r3, [r1, #0]
 8001220:	e015      	b.n	800124e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001222:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <HAL_RCC_OscConfig+0x244>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001228:	f7ff fc78 	bl	8000b1c <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001230:	f7ff fc74 	bl	8000b1c <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e187      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001242:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f0      	bne.n	8001230 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	2b00      	cmp	r3, #0
 8001258:	d036      	beq.n	80012c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d016      	beq.n	8001290 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_RCC_OscConfig+0x248>)
 8001264:	2201      	movs	r2, #1
 8001266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001268:	f7ff fc58 	bl	8000b1c <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001270:	f7ff fc54 	bl	8000b1c <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e167      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0x200>
 800128e:	e01b      	b.n	80012c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_RCC_OscConfig+0x248>)
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001296:	f7ff fc41 	bl	8000b1c <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800129c:	e00e      	b.n	80012bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800129e:	f7ff fc3d 	bl	8000b1c <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d907      	bls.n	80012bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e150      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
 80012b0:	40023800 	.word	0x40023800
 80012b4:	42470000 	.word	0x42470000
 80012b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012bc:	4b88      	ldr	r3, [pc, #544]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80012be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1ea      	bne.n	800129e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 8097 	beq.w	8001404 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012da:	4b81      	ldr	r3, [pc, #516]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10f      	bne.n	8001306 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b7d      	ldr	r3, [pc, #500]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	4a7c      	ldr	r2, [pc, #496]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80012f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f4:	6413      	str	r3, [r2, #64]	; 0x40
 80012f6:	4b7a      	ldr	r3, [pc, #488]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001302:	2301      	movs	r3, #1
 8001304:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001306:	4b77      	ldr	r3, [pc, #476]	; (80014e4 <HAL_RCC_OscConfig+0x474>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130e:	2b00      	cmp	r3, #0
 8001310:	d118      	bne.n	8001344 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001312:	4b74      	ldr	r3, [pc, #464]	; (80014e4 <HAL_RCC_OscConfig+0x474>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a73      	ldr	r2, [pc, #460]	; (80014e4 <HAL_RCC_OscConfig+0x474>)
 8001318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800131e:	f7ff fbfd 	bl	8000b1c <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001326:	f7ff fbf9 	bl	8000b1c <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e10c      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001338:	4b6a      	ldr	r3, [pc, #424]	; (80014e4 <HAL_RCC_OscConfig+0x474>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0f0      	beq.n	8001326 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d106      	bne.n	800135a <HAL_RCC_OscConfig+0x2ea>
 800134c:	4b64      	ldr	r3, [pc, #400]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 800134e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001350:	4a63      	ldr	r2, [pc, #396]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6713      	str	r3, [r2, #112]	; 0x70
 8001358:	e01c      	b.n	8001394 <HAL_RCC_OscConfig+0x324>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2b05      	cmp	r3, #5
 8001360:	d10c      	bne.n	800137c <HAL_RCC_OscConfig+0x30c>
 8001362:	4b5f      	ldr	r3, [pc, #380]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001366:	4a5e      	ldr	r2, [pc, #376]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	6713      	str	r3, [r2, #112]	; 0x70
 800136e:	4b5c      	ldr	r3, [pc, #368]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001372:	4a5b      	ldr	r2, [pc, #364]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6713      	str	r3, [r2, #112]	; 0x70
 800137a:	e00b      	b.n	8001394 <HAL_RCC_OscConfig+0x324>
 800137c:	4b58      	ldr	r3, [pc, #352]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 800137e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001380:	4a57      	ldr	r2, [pc, #348]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001382:	f023 0301 	bic.w	r3, r3, #1
 8001386:	6713      	str	r3, [r2, #112]	; 0x70
 8001388:	4b55      	ldr	r3, [pc, #340]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 800138a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138c:	4a54      	ldr	r2, [pc, #336]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 800138e:	f023 0304 	bic.w	r3, r3, #4
 8001392:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d015      	beq.n	80013c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800139c:	f7ff fbbe 	bl	8000b1c <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a2:	e00a      	b.n	80013ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a4:	f7ff fbba 	bl	8000b1c <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e0cb      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ba:	4b49      	ldr	r3, [pc, #292]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80013bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0ee      	beq.n	80013a4 <HAL_RCC_OscConfig+0x334>
 80013c6:	e014      	b.n	80013f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c8:	f7ff fba8 	bl	8000b1c <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ce:	e00a      	b.n	80013e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d0:	f7ff fba4 	bl	8000b1c <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	f241 3288 	movw	r2, #5000	; 0x1388
 80013de:	4293      	cmp	r3, r2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e0b5      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e6:	4b3e      	ldr	r3, [pc, #248]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80013e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1ee      	bne.n	80013d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013f2:	7dfb      	ldrb	r3, [r7, #23]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d105      	bne.n	8001404 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f8:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	4a38      	ldr	r2, [pc, #224]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80013fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001402:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80a1 	beq.w	8001550 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800140e:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b08      	cmp	r3, #8
 8001418:	d05c      	beq.n	80014d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d141      	bne.n	80014a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001422:	4b31      	ldr	r3, [pc, #196]	; (80014e8 <HAL_RCC_OscConfig+0x478>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fb78 	bl	8000b1c <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001430:	f7ff fb74 	bl	8000b1c <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e087      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001442:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69da      	ldr	r2, [r3, #28]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	019b      	lsls	r3, r3, #6
 800145e:	431a      	orrs	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001464:	085b      	lsrs	r3, r3, #1
 8001466:	3b01      	subs	r3, #1
 8001468:	041b      	lsls	r3, r3, #16
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	061b      	lsls	r3, r3, #24
 8001472:	491b      	ldr	r1, [pc, #108]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001474:	4313      	orrs	r3, r2
 8001476:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001478:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <HAL_RCC_OscConfig+0x478>)
 800147a:	2201      	movs	r2, #1
 800147c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147e:	f7ff fb4d 	bl	8000b1c <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001486:	f7ff fb49 	bl	8000b1c <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e05c      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x416>
 80014a4:	e054      	b.n	8001550 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <HAL_RCC_OscConfig+0x478>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fb36 	bl	8000b1c <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff fb32 	bl	8000b1c <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e045      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x444>
 80014d2:	e03d      	b.n	8001550 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d107      	bne.n	80014ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e038      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40007000 	.word	0x40007000
 80014e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_RCC_OscConfig+0x4ec>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d028      	beq.n	800154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001504:	429a      	cmp	r2, r3
 8001506:	d121      	bne.n	800154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001512:	429a      	cmp	r2, r3
 8001514:	d11a      	bne.n	800154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800151c:	4013      	ands	r3, r2
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001522:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001524:	4293      	cmp	r3, r2
 8001526:	d111      	bne.n	800154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001532:	085b      	lsrs	r3, r3, #1
 8001534:	3b01      	subs	r3, #1
 8001536:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001538:	429a      	cmp	r2, r3
 800153a:	d107      	bne.n	800154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001548:	429a      	cmp	r2, r3
 800154a:	d001      	beq.n	8001550 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800

08001560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e0cc      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001574:	4b68      	ldr	r3, [pc, #416]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d90c      	bls.n	800159c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001582:	4b65      	ldr	r3, [pc, #404]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158a:	4b63      	ldr	r3, [pc, #396]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d001      	beq.n	800159c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0b8      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d020      	beq.n	80015ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015b4:	4b59      	ldr	r3, [pc, #356]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	4a58      	ldr	r2, [pc, #352]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015cc:	4b53      	ldr	r3, [pc, #332]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4a52      	ldr	r2, [pc, #328]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d8:	4b50      	ldr	r3, [pc, #320]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	494d      	ldr	r1, [pc, #308]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d044      	beq.n	8001680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d107      	bne.n	800160e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	4b47      	ldr	r3, [pc, #284]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d119      	bne.n	800163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e07f      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d003      	beq.n	800161e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800161a:	2b03      	cmp	r3, #3
 800161c:	d107      	bne.n	800162e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161e:	4b3f      	ldr	r3, [pc, #252]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d109      	bne.n	800163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e06f      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162e:	4b3b      	ldr	r3, [pc, #236]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e067      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800163e:	4b37      	ldr	r3, [pc, #220]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f023 0203 	bic.w	r2, r3, #3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	4934      	ldr	r1, [pc, #208]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 800164c:	4313      	orrs	r3, r2
 800164e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001650:	f7ff fa64 	bl	8000b1c <HAL_GetTick>
 8001654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001656:	e00a      	b.n	800166e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001658:	f7ff fa60 	bl	8000b1c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f241 3288 	movw	r2, #5000	; 0x1388
 8001666:	4293      	cmp	r3, r2
 8001668:	d901      	bls.n	800166e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e04f      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166e:	4b2b      	ldr	r3, [pc, #172]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 020c 	and.w	r2, r3, #12
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	429a      	cmp	r2, r3
 800167e:	d1eb      	bne.n	8001658 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001680:	4b25      	ldr	r3, [pc, #148]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d20c      	bcs.n	80016a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168e:	4b22      	ldr	r3, [pc, #136]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001696:	4b20      	ldr	r3, [pc, #128]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e032      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d008      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	4916      	ldr	r1, [pc, #88]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d009      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	490e      	ldr	r1, [pc, #56]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016e6:	f000 f821 	bl	800172c <HAL_RCC_GetSysClockFreq>
 80016ea:	4602      	mov	r2, r0
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	490a      	ldr	r1, [pc, #40]	; (8001720 <HAL_RCC_ClockConfig+0x1c0>)
 80016f8:	5ccb      	ldrb	r3, [r1, r3]
 80016fa:	fa22 f303 	lsr.w	r3, r2, r3
 80016fe:	4a09      	ldr	r2, [pc, #36]	; (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 8001700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_RCC_ClockConfig+0x1c8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff f9c4 	bl	8000a94 <HAL_InitTick>

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023c00 	.word	0x40023c00
 800171c:	40023800 	.word	0x40023800
 8001720:	0800352c 	.word	0x0800352c
 8001724:	20000000 	.word	0x20000000
 8001728:	20000004 	.word	0x20000004

0800172c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800172c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001730:	b094      	sub	sp, #80	; 0x50
 8001732:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	647b      	str	r3, [r7, #68]	; 0x44
 8001738:	2300      	movs	r3, #0
 800173a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800173c:	2300      	movs	r3, #0
 800173e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001744:	4b79      	ldr	r3, [pc, #484]	; (800192c <HAL_RCC_GetSysClockFreq+0x200>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	2b08      	cmp	r3, #8
 800174e:	d00d      	beq.n	800176c <HAL_RCC_GetSysClockFreq+0x40>
 8001750:	2b08      	cmp	r3, #8
 8001752:	f200 80e1 	bhi.w	8001918 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <HAL_RCC_GetSysClockFreq+0x34>
 800175a:	2b04      	cmp	r3, #4
 800175c:	d003      	beq.n	8001766 <HAL_RCC_GetSysClockFreq+0x3a>
 800175e:	e0db      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001760:	4b73      	ldr	r3, [pc, #460]	; (8001930 <HAL_RCC_GetSysClockFreq+0x204>)
 8001762:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001764:	e0db      	b.n	800191e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001766:	4b73      	ldr	r3, [pc, #460]	; (8001934 <HAL_RCC_GetSysClockFreq+0x208>)
 8001768:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800176a:	e0d8      	b.n	800191e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800176c:	4b6f      	ldr	r3, [pc, #444]	; (800192c <HAL_RCC_GetSysClockFreq+0x200>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001774:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001776:	4b6d      	ldr	r3, [pc, #436]	; (800192c <HAL_RCC_GetSysClockFreq+0x200>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d063      	beq.n	800184a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001782:	4b6a      	ldr	r3, [pc, #424]	; (800192c <HAL_RCC_GetSysClockFreq+0x200>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	099b      	lsrs	r3, r3, #6
 8001788:	2200      	movs	r2, #0
 800178a:	63bb      	str	r3, [r7, #56]	; 0x38
 800178c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800178e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001794:	633b      	str	r3, [r7, #48]	; 0x30
 8001796:	2300      	movs	r3, #0
 8001798:	637b      	str	r3, [r7, #52]	; 0x34
 800179a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800179e:	4622      	mov	r2, r4
 80017a0:	462b      	mov	r3, r5
 80017a2:	f04f 0000 	mov.w	r0, #0
 80017a6:	f04f 0100 	mov.w	r1, #0
 80017aa:	0159      	lsls	r1, r3, #5
 80017ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017b0:	0150      	lsls	r0, r2, #5
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4621      	mov	r1, r4
 80017b8:	1a51      	subs	r1, r2, r1
 80017ba:	6139      	str	r1, [r7, #16]
 80017bc:	4629      	mov	r1, r5
 80017be:	eb63 0301 	sbc.w	r3, r3, r1
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017d0:	4659      	mov	r1, fp
 80017d2:	018b      	lsls	r3, r1, #6
 80017d4:	4651      	mov	r1, sl
 80017d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017da:	4651      	mov	r1, sl
 80017dc:	018a      	lsls	r2, r1, #6
 80017de:	4651      	mov	r1, sl
 80017e0:	ebb2 0801 	subs.w	r8, r2, r1
 80017e4:	4659      	mov	r1, fp
 80017e6:	eb63 0901 	sbc.w	r9, r3, r1
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017fe:	4690      	mov	r8, r2
 8001800:	4699      	mov	r9, r3
 8001802:	4623      	mov	r3, r4
 8001804:	eb18 0303 	adds.w	r3, r8, r3
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	462b      	mov	r3, r5
 800180c:	eb49 0303 	adc.w	r3, r9, r3
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800181e:	4629      	mov	r1, r5
 8001820:	024b      	lsls	r3, r1, #9
 8001822:	4621      	mov	r1, r4
 8001824:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001828:	4621      	mov	r1, r4
 800182a:	024a      	lsls	r2, r1, #9
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001832:	2200      	movs	r2, #0
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
 8001836:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001838:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800183c:	f7fe fcd0 	bl	80001e0 <__aeabi_uldivmod>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4613      	mov	r3, r2
 8001846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001848:	e058      	b.n	80018fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800184a:	4b38      	ldr	r3, [pc, #224]	; (800192c <HAL_RCC_GetSysClockFreq+0x200>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	099b      	lsrs	r3, r3, #6
 8001850:	2200      	movs	r2, #0
 8001852:	4618      	mov	r0, r3
 8001854:	4611      	mov	r1, r2
 8001856:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800185a:	623b      	str	r3, [r7, #32]
 800185c:	2300      	movs	r3, #0
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
 8001860:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001864:	4642      	mov	r2, r8
 8001866:	464b      	mov	r3, r9
 8001868:	f04f 0000 	mov.w	r0, #0
 800186c:	f04f 0100 	mov.w	r1, #0
 8001870:	0159      	lsls	r1, r3, #5
 8001872:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001876:	0150      	lsls	r0, r2, #5
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4641      	mov	r1, r8
 800187e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001882:	4649      	mov	r1, r9
 8001884:	eb63 0b01 	sbc.w	fp, r3, r1
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001894:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001898:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800189c:	ebb2 040a 	subs.w	r4, r2, sl
 80018a0:	eb63 050b 	sbc.w	r5, r3, fp
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	00eb      	lsls	r3, r5, #3
 80018ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018b2:	00e2      	lsls	r2, r4, #3
 80018b4:	4614      	mov	r4, r2
 80018b6:	461d      	mov	r5, r3
 80018b8:	4643      	mov	r3, r8
 80018ba:	18e3      	adds	r3, r4, r3
 80018bc:	603b      	str	r3, [r7, #0]
 80018be:	464b      	mov	r3, r9
 80018c0:	eb45 0303 	adc.w	r3, r5, r3
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018d2:	4629      	mov	r1, r5
 80018d4:	028b      	lsls	r3, r1, #10
 80018d6:	4621      	mov	r1, r4
 80018d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018dc:	4621      	mov	r1, r4
 80018de:	028a      	lsls	r2, r1, #10
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018e6:	2200      	movs	r2, #0
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	61fa      	str	r2, [r7, #28]
 80018ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018f0:	f7fe fc76 	bl	80001e0 <__aeabi_uldivmod>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4613      	mov	r3, r2
 80018fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_RCC_GetSysClockFreq+0x200>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	0c1b      	lsrs	r3, r3, #16
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	3301      	adds	r3, #1
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800190c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800190e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001910:	fbb2 f3f3 	udiv	r3, r2, r3
 8001914:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001916:	e002      	b.n	800191e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_RCC_GetSysClockFreq+0x204>)
 800191a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800191c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800191e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001920:	4618      	mov	r0, r3
 8001922:	3750      	adds	r7, #80	; 0x50
 8001924:	46bd      	mov	sp, r7
 8001926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800
 8001930:	00f42400 	.word	0x00f42400
 8001934:	007a1200 	.word	0x007a1200

08001938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <HAL_RCC_GetHCLKFreq+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000000 	.word	0x20000000

08001950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001954:	f7ff fff0 	bl	8001938 <HAL_RCC_GetHCLKFreq>
 8001958:	4602      	mov	r2, r0
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	0a9b      	lsrs	r3, r3, #10
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	4903      	ldr	r1, [pc, #12]	; (8001974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001966:	5ccb      	ldrb	r3, [r1, r3]
 8001968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800196c:	4618      	mov	r0, r3
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40023800 	.word	0x40023800
 8001974:	0800353c 	.word	0x0800353c

08001978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800197c:	f7ff ffdc 	bl	8001938 <HAL_RCC_GetHCLKFreq>
 8001980:	4602      	mov	r2, r0
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	0b5b      	lsrs	r3, r3, #13
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	4903      	ldr	r1, [pc, #12]	; (800199c <HAL_RCC_GetPCLK2Freq+0x24>)
 800198e:	5ccb      	ldrb	r3, [r1, r3]
 8001990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001994:	4618      	mov	r0, r3
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40023800 	.word	0x40023800
 800199c:	0800353c 	.word	0x0800353c

080019a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e042      	b.n	8001a38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d106      	bne.n	80019cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7fe ff9a 	bl	8000900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2224      	movs	r2, #36	; 0x24
 80019d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f82b 	bl	8001a40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	691a      	ldr	r2, [r3, #16]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	695a      	ldr	r2, [r3, #20]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2220      	movs	r2, #32
 8001a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a44:	b0c0      	sub	sp, #256	; 0x100
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a5c:	68d9      	ldr	r1, [r3, #12]
 8001a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	ea40 0301 	orr.w	r3, r0, r1
 8001a68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	431a      	orrs	r2, r3
 8001a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001a98:	f021 010c 	bic.w	r1, r1, #12
 8001a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001aa6:	430b      	orrs	r3, r1
 8001aa8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001aba:	6999      	ldr	r1, [r3, #24]
 8001abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	ea40 0301 	orr.w	r3, r0, r1
 8001ac6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	4b8f      	ldr	r3, [pc, #572]	; (8001d0c <UART_SetConfig+0x2cc>)
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d005      	beq.n	8001ae0 <UART_SetConfig+0xa0>
 8001ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4b8d      	ldr	r3, [pc, #564]	; (8001d10 <UART_SetConfig+0x2d0>)
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d104      	bne.n	8001aea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ae0:	f7ff ff4a 	bl	8001978 <HAL_RCC_GetPCLK2Freq>
 8001ae4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001ae8:	e003      	b.n	8001af2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001aea:	f7ff ff31 	bl	8001950 <HAL_RCC_GetPCLK1Freq>
 8001aee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001afc:	f040 810c 	bne.w	8001d18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b04:	2200      	movs	r2, #0
 8001b06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001b0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001b0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001b12:	4622      	mov	r2, r4
 8001b14:	462b      	mov	r3, r5
 8001b16:	1891      	adds	r1, r2, r2
 8001b18:	65b9      	str	r1, [r7, #88]	; 0x58
 8001b1a:	415b      	adcs	r3, r3
 8001b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b22:	4621      	mov	r1, r4
 8001b24:	eb12 0801 	adds.w	r8, r2, r1
 8001b28:	4629      	mov	r1, r5
 8001b2a:	eb43 0901 	adc.w	r9, r3, r1
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b42:	4690      	mov	r8, r2
 8001b44:	4699      	mov	r9, r3
 8001b46:	4623      	mov	r3, r4
 8001b48:	eb18 0303 	adds.w	r3, r8, r3
 8001b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001b50:	462b      	mov	r3, r5
 8001b52:	eb49 0303 	adc.w	r3, r9, r3
 8001b56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001b66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001b6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001b6e:	460b      	mov	r3, r1
 8001b70:	18db      	adds	r3, r3, r3
 8001b72:	653b      	str	r3, [r7, #80]	; 0x50
 8001b74:	4613      	mov	r3, r2
 8001b76:	eb42 0303 	adc.w	r3, r2, r3
 8001b7a:	657b      	str	r3, [r7, #84]	; 0x54
 8001b7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001b80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001b84:	f7fe fb2c 	bl	80001e0 <__aeabi_uldivmod>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4b61      	ldr	r3, [pc, #388]	; (8001d14 <UART_SetConfig+0x2d4>)
 8001b8e:	fba3 2302 	umull	r2, r3, r3, r2
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	011c      	lsls	r4, r3, #4
 8001b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ba0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001ba4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001ba8:	4642      	mov	r2, r8
 8001baa:	464b      	mov	r3, r9
 8001bac:	1891      	adds	r1, r2, r2
 8001bae:	64b9      	str	r1, [r7, #72]	; 0x48
 8001bb0:	415b      	adcs	r3, r3
 8001bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bb8:	4641      	mov	r1, r8
 8001bba:	eb12 0a01 	adds.w	sl, r2, r1
 8001bbe:	4649      	mov	r1, r9
 8001bc0:	eb43 0b01 	adc.w	fp, r3, r1
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001bd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001bd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001bd8:	4692      	mov	sl, r2
 8001bda:	469b      	mov	fp, r3
 8001bdc:	4643      	mov	r3, r8
 8001bde:	eb1a 0303 	adds.w	r3, sl, r3
 8001be2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001be6:	464b      	mov	r3, r9
 8001be8:	eb4b 0303 	adc.w	r3, fp, r3
 8001bec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001bfc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001c00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001c04:	460b      	mov	r3, r1
 8001c06:	18db      	adds	r3, r3, r3
 8001c08:	643b      	str	r3, [r7, #64]	; 0x40
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	eb42 0303 	adc.w	r3, r2, r3
 8001c10:	647b      	str	r3, [r7, #68]	; 0x44
 8001c12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001c16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001c1a:	f7fe fae1 	bl	80001e0 <__aeabi_uldivmod>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4611      	mov	r1, r2
 8001c24:	4b3b      	ldr	r3, [pc, #236]	; (8001d14 <UART_SetConfig+0x2d4>)
 8001c26:	fba3 2301 	umull	r2, r3, r3, r1
 8001c2a:	095b      	lsrs	r3, r3, #5
 8001c2c:	2264      	movs	r2, #100	; 0x64
 8001c2e:	fb02 f303 	mul.w	r3, r2, r3
 8001c32:	1acb      	subs	r3, r1, r3
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001c3a:	4b36      	ldr	r3, [pc, #216]	; (8001d14 <UART_SetConfig+0x2d4>)
 8001c3c:	fba3 2302 	umull	r2, r3, r3, r2
 8001c40:	095b      	lsrs	r3, r3, #5
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001c48:	441c      	add	r4, r3
 8001c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001c58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001c5c:	4642      	mov	r2, r8
 8001c5e:	464b      	mov	r3, r9
 8001c60:	1891      	adds	r1, r2, r2
 8001c62:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c64:	415b      	adcs	r3, r3
 8001c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c6c:	4641      	mov	r1, r8
 8001c6e:	1851      	adds	r1, r2, r1
 8001c70:	6339      	str	r1, [r7, #48]	; 0x30
 8001c72:	4649      	mov	r1, r9
 8001c74:	414b      	adcs	r3, r1
 8001c76:	637b      	str	r3, [r7, #52]	; 0x34
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001c84:	4659      	mov	r1, fp
 8001c86:	00cb      	lsls	r3, r1, #3
 8001c88:	4651      	mov	r1, sl
 8001c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c8e:	4651      	mov	r1, sl
 8001c90:	00ca      	lsls	r2, r1, #3
 8001c92:	4610      	mov	r0, r2
 8001c94:	4619      	mov	r1, r3
 8001c96:	4603      	mov	r3, r0
 8001c98:	4642      	mov	r2, r8
 8001c9a:	189b      	adds	r3, r3, r2
 8001c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ca0:	464b      	mov	r3, r9
 8001ca2:	460a      	mov	r2, r1
 8001ca4:	eb42 0303 	adc.w	r3, r2, r3
 8001ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001cb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001cbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	18db      	adds	r3, r3, r3
 8001cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	eb42 0303 	adc.w	r3, r2, r3
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001cd6:	f7fe fa83 	bl	80001e0 <__aeabi_uldivmod>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <UART_SetConfig+0x2d4>)
 8001ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ce4:	095b      	lsrs	r3, r3, #5
 8001ce6:	2164      	movs	r1, #100	; 0x64
 8001ce8:	fb01 f303 	mul.w	r3, r1, r3
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	3332      	adds	r3, #50	; 0x32
 8001cf2:	4a08      	ldr	r2, [pc, #32]	; (8001d14 <UART_SetConfig+0x2d4>)
 8001cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf8:	095b      	lsrs	r3, r3, #5
 8001cfa:	f003 0207 	and.w	r2, r3, #7
 8001cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4422      	add	r2, r4
 8001d06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001d08:	e106      	b.n	8001f18 <UART_SetConfig+0x4d8>
 8001d0a:	bf00      	nop
 8001d0c:	40011000 	.word	0x40011000
 8001d10:	40011400 	.word	0x40011400
 8001d14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001d22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001d26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001d2a:	4642      	mov	r2, r8
 8001d2c:	464b      	mov	r3, r9
 8001d2e:	1891      	adds	r1, r2, r2
 8001d30:	6239      	str	r1, [r7, #32]
 8001d32:	415b      	adcs	r3, r3
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
 8001d36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d3a:	4641      	mov	r1, r8
 8001d3c:	1854      	adds	r4, r2, r1
 8001d3e:	4649      	mov	r1, r9
 8001d40:	eb43 0501 	adc.w	r5, r3, r1
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	00eb      	lsls	r3, r5, #3
 8001d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d52:	00e2      	lsls	r2, r4, #3
 8001d54:	4614      	mov	r4, r2
 8001d56:	461d      	mov	r5, r3
 8001d58:	4643      	mov	r3, r8
 8001d5a:	18e3      	adds	r3, r4, r3
 8001d5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d60:	464b      	mov	r3, r9
 8001d62:	eb45 0303 	adc.w	r3, r5, r3
 8001d66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001d86:	4629      	mov	r1, r5
 8001d88:	008b      	lsls	r3, r1, #2
 8001d8a:	4621      	mov	r1, r4
 8001d8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d90:	4621      	mov	r1, r4
 8001d92:	008a      	lsls	r2, r1, #2
 8001d94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001d98:	f7fe fa22 	bl	80001e0 <__aeabi_uldivmod>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4b60      	ldr	r3, [pc, #384]	; (8001f24 <UART_SetConfig+0x4e4>)
 8001da2:	fba3 2302 	umull	r2, r3, r3, r2
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	011c      	lsls	r4, r3, #4
 8001daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dae:	2200      	movs	r2, #0
 8001db0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001db4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001db8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001dbc:	4642      	mov	r2, r8
 8001dbe:	464b      	mov	r3, r9
 8001dc0:	1891      	adds	r1, r2, r2
 8001dc2:	61b9      	str	r1, [r7, #24]
 8001dc4:	415b      	adcs	r3, r3
 8001dc6:	61fb      	str	r3, [r7, #28]
 8001dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dcc:	4641      	mov	r1, r8
 8001dce:	1851      	adds	r1, r2, r1
 8001dd0:	6139      	str	r1, [r7, #16]
 8001dd2:	4649      	mov	r1, r9
 8001dd4:	414b      	adcs	r3, r1
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001de4:	4659      	mov	r1, fp
 8001de6:	00cb      	lsls	r3, r1, #3
 8001de8:	4651      	mov	r1, sl
 8001dea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dee:	4651      	mov	r1, sl
 8001df0:	00ca      	lsls	r2, r1, #3
 8001df2:	4610      	mov	r0, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	4603      	mov	r3, r0
 8001df8:	4642      	mov	r2, r8
 8001dfa:	189b      	adds	r3, r3, r2
 8001dfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e00:	464b      	mov	r3, r9
 8001e02:	460a      	mov	r2, r1
 8001e04:	eb42 0303 	adc.w	r3, r2, r3
 8001e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001e24:	4649      	mov	r1, r9
 8001e26:	008b      	lsls	r3, r1, #2
 8001e28:	4641      	mov	r1, r8
 8001e2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e2e:	4641      	mov	r1, r8
 8001e30:	008a      	lsls	r2, r1, #2
 8001e32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001e36:	f7fe f9d3 	bl	80001e0 <__aeabi_uldivmod>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4b38      	ldr	r3, [pc, #224]	; (8001f24 <UART_SetConfig+0x4e4>)
 8001e42:	fba3 2301 	umull	r2, r3, r3, r1
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	2264      	movs	r2, #100	; 0x64
 8001e4a:	fb02 f303 	mul.w	r3, r2, r3
 8001e4e:	1acb      	subs	r3, r1, r3
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	3332      	adds	r3, #50	; 0x32
 8001e54:	4a33      	ldr	r2, [pc, #204]	; (8001f24 <UART_SetConfig+0x4e4>)
 8001e56:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5a:	095b      	lsrs	r3, r3, #5
 8001e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e60:	441c      	add	r4, r3
 8001e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e66:	2200      	movs	r2, #0
 8001e68:	673b      	str	r3, [r7, #112]	; 0x70
 8001e6a:	677a      	str	r2, [r7, #116]	; 0x74
 8001e6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001e70:	4642      	mov	r2, r8
 8001e72:	464b      	mov	r3, r9
 8001e74:	1891      	adds	r1, r2, r2
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	415b      	adcs	r3, r3
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e80:	4641      	mov	r1, r8
 8001e82:	1851      	adds	r1, r2, r1
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	4649      	mov	r1, r9
 8001e88:	414b      	adcs	r3, r1
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001e98:	4659      	mov	r1, fp
 8001e9a:	00cb      	lsls	r3, r1, #3
 8001e9c:	4651      	mov	r1, sl
 8001e9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ea2:	4651      	mov	r1, sl
 8001ea4:	00ca      	lsls	r2, r1, #3
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4642      	mov	r2, r8
 8001eae:	189b      	adds	r3, r3, r2
 8001eb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8001eb2:	464b      	mov	r3, r9
 8001eb4:	460a      	mov	r2, r1
 8001eb6:	eb42 0303 	adc.w	r3, r2, r3
 8001eba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	663b      	str	r3, [r7, #96]	; 0x60
 8001ec6:	667a      	str	r2, [r7, #100]	; 0x64
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001ed4:	4649      	mov	r1, r9
 8001ed6:	008b      	lsls	r3, r1, #2
 8001ed8:	4641      	mov	r1, r8
 8001eda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ede:	4641      	mov	r1, r8
 8001ee0:	008a      	lsls	r2, r1, #2
 8001ee2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001ee6:	f7fe f97b 	bl	80001e0 <__aeabi_uldivmod>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <UART_SetConfig+0x4e4>)
 8001ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ef4:	095b      	lsrs	r3, r3, #5
 8001ef6:	2164      	movs	r1, #100	; 0x64
 8001ef8:	fb01 f303 	mul.w	r3, r1, r3
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	3332      	adds	r3, #50	; 0x32
 8001f02:	4a08      	ldr	r2, [pc, #32]	; (8001f24 <UART_SetConfig+0x4e4>)
 8001f04:	fba2 2303 	umull	r2, r3, r2, r3
 8001f08:	095b      	lsrs	r3, r3, #5
 8001f0a:	f003 020f 	and.w	r2, r3, #15
 8001f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4422      	add	r2, r4
 8001f16:	609a      	str	r2, [r3, #8]
}
 8001f18:	bf00      	nop
 8001f1a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f24:	51eb851f 	.word	0x51eb851f

08001f28 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f3a:	2b84      	cmp	r3, #132	; 0x84
 8001f3c:	d005      	beq.n	8001f4a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001f3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4413      	add	r3, r2
 8001f46:	3303      	adds	r3, #3
 8001f48:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001f5c:	f000 fade 	bl	800251c <vTaskStartScheduler>
  
  return osOK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001f66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f68:	b089      	sub	sp, #36	; 0x24
 8001f6a:	af04      	add	r7, sp, #16
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d020      	beq.n	8001fba <osThreadCreate+0x54>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d01c      	beq.n	8001fba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685c      	ldr	r4, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691e      	ldr	r6, [r3, #16]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ffc8 	bl	8001f28 <makeFreeRtosPriority>
 8001f98:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fa2:	9202      	str	r2, [sp, #8]
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	9100      	str	r1, [sp, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	4632      	mov	r2, r6
 8001fac:	4629      	mov	r1, r5
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f000 f8ed 	bl	800218e <xTaskCreateStatic>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	e01c      	b.n	8001ff4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685c      	ldr	r4, [r3, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fc6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff ffaa 	bl	8001f28 <makeFreeRtosPriority>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	f107 030c 	add.w	r3, r7, #12
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	9200      	str	r2, [sp, #0]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	4632      	mov	r2, r6
 8001fe2:	4629      	mov	r1, r5
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	f000 f92f 	bl	8002248 <xTaskCreate>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d001      	beq.n	8001ff4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	e000      	b.n	8001ff6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ffe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b084      	sub	sp, #16
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <osDelay+0x16>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	e000      	b.n	8002016 <osDelay+0x18>
 8002014:	2301      	movs	r3, #1
 8002016:	4618      	mov	r0, r3
 8002018:	f000 fa4c 	bl	80024b4 <vTaskDelay>
  
  return osOK;
 800201c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f103 0208 	add.w	r2, r3, #8
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800203e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f103 0208 	add.w	r2, r3, #8
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f103 0208 	add.w	r2, r3, #8
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	1c5a      	adds	r2, r3, #1
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	601a      	str	r2, [r3, #0]
}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020de:	d103      	bne.n	80020e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	e00c      	b.n	8002102 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3308      	adds	r3, #8
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	e002      	b.n	80020f6 <vListInsert+0x2e>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d2f6      	bcs.n	80020f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	601a      	str	r2, [r3, #0]
}
 800212e:	bf00      	nop
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800213a:	b480      	push	{r7}
 800213c:	b085      	sub	sp, #20
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6892      	ldr	r2, [r2, #8]
 8002150:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6852      	ldr	r2, [r2, #4]
 800215a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	429a      	cmp	r2, r3
 8002164:	d103      	bne.n	800216e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	1e5a      	subs	r2, r3, #1
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800218e:	b580      	push	{r7, lr}
 8002190:	b08e      	sub	sp, #56	; 0x38
 8002192:	af04      	add	r7, sp, #16
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800219c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10a      	bne.n	80021b8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80021a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a6:	f383 8811 	msr	BASEPRI, r3
 80021aa:	f3bf 8f6f 	isb	sy
 80021ae:	f3bf 8f4f 	dsb	sy
 80021b2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80021b4:	bf00      	nop
 80021b6:	e7fe      	b.n	80021b6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80021b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10a      	bne.n	80021d4 <xTaskCreateStatic+0x46>
	__asm volatile
 80021be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c2:	f383 8811 	msr	BASEPRI, r3
 80021c6:	f3bf 8f6f 	isb	sy
 80021ca:	f3bf 8f4f 	dsb	sy
 80021ce:	61fb      	str	r3, [r7, #28]
}
 80021d0:	bf00      	nop
 80021d2:	e7fe      	b.n	80021d2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80021d4:	2354      	movs	r3, #84	; 0x54
 80021d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	2b54      	cmp	r3, #84	; 0x54
 80021dc:	d00a      	beq.n	80021f4 <xTaskCreateStatic+0x66>
	__asm volatile
 80021de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e2:	f383 8811 	msr	BASEPRI, r3
 80021e6:	f3bf 8f6f 	isb	sy
 80021ea:	f3bf 8f4f 	dsb	sy
 80021ee:	61bb      	str	r3, [r7, #24]
}
 80021f0:	bf00      	nop
 80021f2:	e7fe      	b.n	80021f2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80021f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80021f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d01e      	beq.n	800223a <xTaskCreateStatic+0xac>
 80021fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d01b      	beq.n	800223a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800220a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	2202      	movs	r2, #2
 8002210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002214:	2300      	movs	r3, #0
 8002216:	9303      	str	r3, [sp, #12]
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	9302      	str	r3, [sp, #8]
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	9301      	str	r3, [sp, #4]
 8002222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	68b9      	ldr	r1, [r7, #8]
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 f850 	bl	80022d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002232:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002234:	f000 f8d4 	bl	80023e0 <prvAddNewTaskToReadyList>
 8002238:	e001      	b.n	800223e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800223e:	697b      	ldr	r3, [r7, #20]
	}
 8002240:	4618      	mov	r0, r3
 8002242:	3728      	adds	r7, #40	; 0x28
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08c      	sub	sp, #48	; 0x30
 800224c:	af04      	add	r7, sp, #16
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4618      	mov	r0, r3
 800225e:	f000 fee3 	bl	8003028 <pvPortMalloc>
 8002262:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00e      	beq.n	8002288 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800226a:	2054      	movs	r0, #84	; 0x54
 800226c:	f000 fedc 	bl	8003028 <pvPortMalloc>
 8002270:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	631a      	str	r2, [r3, #48]	; 0x30
 800227e:	e005      	b.n	800228c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002280:	6978      	ldr	r0, [r7, #20]
 8002282:	f000 ff9d 	bl	80031c0 <vPortFree>
 8002286:	e001      	b.n	800228c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002288:	2300      	movs	r3, #0
 800228a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d017      	beq.n	80022c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800229a:	88fa      	ldrh	r2, [r7, #6]
 800229c:	2300      	movs	r3, #0
 800229e:	9303      	str	r3, [sp, #12]
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	9302      	str	r3, [sp, #8]
 80022a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	68b9      	ldr	r1, [r7, #8]
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 f80e 	bl	80022d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80022b6:	69f8      	ldr	r0, [r7, #28]
 80022b8:	f000 f892 	bl	80023e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80022bc:	2301      	movs	r3, #1
 80022be:	61bb      	str	r3, [r7, #24]
 80022c0:	e002      	b.n	80022c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80022c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80022c8:	69bb      	ldr	r3, [r7, #24]
	}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3720      	adds	r7, #32
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b088      	sub	sp, #32
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80022e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022ea:	3b01      	subs	r3, #1
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	f023 0307 	bic.w	r3, r3, #7
 80022f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00a      	beq.n	800231a <prvInitialiseNewTask+0x48>
	__asm volatile
 8002304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002308:	f383 8811 	msr	BASEPRI, r3
 800230c:	f3bf 8f6f 	isb	sy
 8002310:	f3bf 8f4f 	dsb	sy
 8002314:	617b      	str	r3, [r7, #20]
}
 8002316:	bf00      	nop
 8002318:	e7fe      	b.n	8002318 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d01f      	beq.n	8002360 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002320:	2300      	movs	r3, #0
 8002322:	61fb      	str	r3, [r7, #28]
 8002324:	e012      	b.n	800234c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	4413      	add	r3, r2
 800232c:	7819      	ldrb	r1, [r3, #0]
 800232e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	4413      	add	r3, r2
 8002334:	3334      	adds	r3, #52	; 0x34
 8002336:	460a      	mov	r2, r1
 8002338:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	4413      	add	r3, r2
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d006      	beq.n	8002354 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3301      	adds	r3, #1
 800234a:	61fb      	str	r3, [r7, #28]
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	2b0f      	cmp	r3, #15
 8002350:	d9e9      	bls.n	8002326 <prvInitialiseNewTask+0x54>
 8002352:	e000      	b.n	8002356 <prvInitialiseNewTask+0x84>
			{
				break;
 8002354:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800235e:	e003      	b.n	8002368 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236a:	2b06      	cmp	r3, #6
 800236c:	d901      	bls.n	8002372 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800236e:	2306      	movs	r3, #6
 8002370:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002374:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002376:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800237c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800237e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002380:	2200      	movs	r2, #0
 8002382:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002386:	3304      	adds	r3, #4
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fe6c 	bl	8002066 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002390:	3318      	adds	r3, #24
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fe67 	bl	8002066 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800239c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800239e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a0:	f1c3 0207 	rsb	r2, r3, #7
 80023a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80023a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80023ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b0:	2200      	movs	r2, #0
 80023b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80023b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	68f9      	ldr	r1, [r7, #12]
 80023c0:	69b8      	ldr	r0, [r7, #24]
 80023c2:	f000 fc23 	bl	8002c0c <pxPortInitialiseStack>
 80023c6:	4602      	mov	r2, r0
 80023c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80023cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d002      	beq.n	80023d8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80023d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80023d8:	bf00      	nop
 80023da:	3720      	adds	r7, #32
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80023e8:	f000 fd3c 	bl	8002e64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80023ec:	4b2a      	ldr	r3, [pc, #168]	; (8002498 <prvAddNewTaskToReadyList+0xb8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	3301      	adds	r3, #1
 80023f2:	4a29      	ldr	r2, [pc, #164]	; (8002498 <prvAddNewTaskToReadyList+0xb8>)
 80023f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80023f6:	4b29      	ldr	r3, [pc, #164]	; (800249c <prvAddNewTaskToReadyList+0xbc>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80023fe:	4a27      	ldr	r2, [pc, #156]	; (800249c <prvAddNewTaskToReadyList+0xbc>)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002404:	4b24      	ldr	r3, [pc, #144]	; (8002498 <prvAddNewTaskToReadyList+0xb8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d110      	bne.n	800242e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800240c:	f000 fabc 	bl	8002988 <prvInitialiseTaskLists>
 8002410:	e00d      	b.n	800242e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002412:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <prvAddNewTaskToReadyList+0xc0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d109      	bne.n	800242e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800241a:	4b20      	ldr	r3, [pc, #128]	; (800249c <prvAddNewTaskToReadyList+0xbc>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	429a      	cmp	r2, r3
 8002426:	d802      	bhi.n	800242e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002428:	4a1c      	ldr	r2, [pc, #112]	; (800249c <prvAddNewTaskToReadyList+0xbc>)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800242e:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <prvAddNewTaskToReadyList+0xc4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	3301      	adds	r3, #1
 8002434:	4a1b      	ldr	r2, [pc, #108]	; (80024a4 <prvAddNewTaskToReadyList+0xc4>)
 8002436:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243c:	2201      	movs	r2, #1
 800243e:	409a      	lsls	r2, r3
 8002440:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <prvAddNewTaskToReadyList+0xc8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4313      	orrs	r3, r2
 8002446:	4a18      	ldr	r2, [pc, #96]	; (80024a8 <prvAddNewTaskToReadyList+0xc8>)
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4a15      	ldr	r2, [pc, #84]	; (80024ac <prvAddNewTaskToReadyList+0xcc>)
 8002458:	441a      	add	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3304      	adds	r3, #4
 800245e:	4619      	mov	r1, r3
 8002460:	4610      	mov	r0, r2
 8002462:	f7ff fe0d 	bl	8002080 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002466:	f000 fd2d 	bl	8002ec4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800246a:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <prvAddNewTaskToReadyList+0xc0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00e      	beq.n	8002490 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002472:	4b0a      	ldr	r3, [pc, #40]	; (800249c <prvAddNewTaskToReadyList+0xbc>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	429a      	cmp	r2, r3
 800247e:	d207      	bcs.n	8002490 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <prvAddNewTaskToReadyList+0xd0>)
 8002482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	200003e0 	.word	0x200003e0
 800249c:	200002e0 	.word	0x200002e0
 80024a0:	200003ec 	.word	0x200003ec
 80024a4:	200003fc 	.word	0x200003fc
 80024a8:	200003e8 	.word	0x200003e8
 80024ac:	200002e4 	.word	0x200002e4
 80024b0:	e000ed04 	.word	0xe000ed04

080024b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d017      	beq.n	80024f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80024c6:	4b13      	ldr	r3, [pc, #76]	; (8002514 <vTaskDelay+0x60>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <vTaskDelay+0x30>
	__asm volatile
 80024ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d2:	f383 8811 	msr	BASEPRI, r3
 80024d6:	f3bf 8f6f 	isb	sy
 80024da:	f3bf 8f4f 	dsb	sy
 80024de:	60bb      	str	r3, [r7, #8]
}
 80024e0:	bf00      	nop
 80024e2:	e7fe      	b.n	80024e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80024e4:	f000 f87a 	bl	80025dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80024e8:	2100      	movs	r1, #0
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fb28 	bl	8002b40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80024f0:	f000 f882 	bl	80025f8 <xTaskResumeAll>
 80024f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d107      	bne.n	800250c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <vTaskDelay+0x64>)
 80024fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	f3bf 8f4f 	dsb	sy
 8002508:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000408 	.word	0x20000408
 8002518:	e000ed04 	.word	0xe000ed04

0800251c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08a      	sub	sp, #40	; 0x28
 8002520:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002526:	2300      	movs	r3, #0
 8002528:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800252a:	463a      	mov	r2, r7
 800252c:	1d39      	adds	r1, r7, #4
 800252e:	f107 0308 	add.w	r3, r7, #8
 8002532:	4618      	mov	r0, r3
 8002534:	f7fd ffd2 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002538:	6839      	ldr	r1, [r7, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	9202      	str	r2, [sp, #8]
 8002540:	9301      	str	r3, [sp, #4]
 8002542:	2300      	movs	r3, #0
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	2300      	movs	r3, #0
 8002548:	460a      	mov	r2, r1
 800254a:	491e      	ldr	r1, [pc, #120]	; (80025c4 <vTaskStartScheduler+0xa8>)
 800254c:	481e      	ldr	r0, [pc, #120]	; (80025c8 <vTaskStartScheduler+0xac>)
 800254e:	f7ff fe1e 	bl	800218e <xTaskCreateStatic>
 8002552:	4603      	mov	r3, r0
 8002554:	4a1d      	ldr	r2, [pc, #116]	; (80025cc <vTaskStartScheduler+0xb0>)
 8002556:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002558:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <vTaskStartScheduler+0xb0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002560:	2301      	movs	r3, #1
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	e001      	b.n	800256a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d116      	bne.n	800259e <vTaskStartScheduler+0x82>
	__asm volatile
 8002570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002574:	f383 8811 	msr	BASEPRI, r3
 8002578:	f3bf 8f6f 	isb	sy
 800257c:	f3bf 8f4f 	dsb	sy
 8002580:	613b      	str	r3, [r7, #16]
}
 8002582:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002584:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <vTaskStartScheduler+0xb4>)
 8002586:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800258a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800258c:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <vTaskStartScheduler+0xb8>)
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002592:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <vTaskStartScheduler+0xbc>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002598:	f000 fbc2 	bl	8002d20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800259c:	e00e      	b.n	80025bc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025a4:	d10a      	bne.n	80025bc <vTaskStartScheduler+0xa0>
	__asm volatile
 80025a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025aa:	f383 8811 	msr	BASEPRI, r3
 80025ae:	f3bf 8f6f 	isb	sy
 80025b2:	f3bf 8f4f 	dsb	sy
 80025b6:	60fb      	str	r3, [r7, #12]
}
 80025b8:	bf00      	nop
 80025ba:	e7fe      	b.n	80025ba <vTaskStartScheduler+0x9e>
}
 80025bc:	bf00      	nop
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	08003524 	.word	0x08003524
 80025c8:	08002959 	.word	0x08002959
 80025cc:	20000404 	.word	0x20000404
 80025d0:	20000400 	.word	0x20000400
 80025d4:	200003ec 	.word	0x200003ec
 80025d8:	200003e4 	.word	0x200003e4

080025dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <vTaskSuspendAll+0x18>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	3301      	adds	r3, #1
 80025e6:	4a03      	ldr	r2, [pc, #12]	; (80025f4 <vTaskSuspendAll+0x18>)
 80025e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80025ea:	bf00      	nop
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	20000408 	.word	0x20000408

080025f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002606:	4b41      	ldr	r3, [pc, #260]	; (800270c <xTaskResumeAll+0x114>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10a      	bne.n	8002624 <xTaskResumeAll+0x2c>
	__asm volatile
 800260e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002612:	f383 8811 	msr	BASEPRI, r3
 8002616:	f3bf 8f6f 	isb	sy
 800261a:	f3bf 8f4f 	dsb	sy
 800261e:	603b      	str	r3, [r7, #0]
}
 8002620:	bf00      	nop
 8002622:	e7fe      	b.n	8002622 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002624:	f000 fc1e 	bl	8002e64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002628:	4b38      	ldr	r3, [pc, #224]	; (800270c <xTaskResumeAll+0x114>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	3b01      	subs	r3, #1
 800262e:	4a37      	ldr	r2, [pc, #220]	; (800270c <xTaskResumeAll+0x114>)
 8002630:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002632:	4b36      	ldr	r3, [pc, #216]	; (800270c <xTaskResumeAll+0x114>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d161      	bne.n	80026fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800263a:	4b35      	ldr	r3, [pc, #212]	; (8002710 <xTaskResumeAll+0x118>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d05d      	beq.n	80026fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002642:	e02e      	b.n	80026a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002644:	4b33      	ldr	r3, [pc, #204]	; (8002714 <xTaskResumeAll+0x11c>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	3318      	adds	r3, #24
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fd72 	bl	800213a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3304      	adds	r3, #4
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fd6d 	bl	800213a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	2201      	movs	r2, #1
 8002666:	409a      	lsls	r2, r3
 8002668:	4b2b      	ldr	r3, [pc, #172]	; (8002718 <xTaskResumeAll+0x120>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4313      	orrs	r3, r2
 800266e:	4a2a      	ldr	r2, [pc, #168]	; (8002718 <xTaskResumeAll+0x120>)
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4a27      	ldr	r2, [pc, #156]	; (800271c <xTaskResumeAll+0x124>)
 8002680:	441a      	add	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	3304      	adds	r3, #4
 8002686:	4619      	mov	r1, r3
 8002688:	4610      	mov	r0, r2
 800268a:	f7ff fcf9 	bl	8002080 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002692:	4b23      	ldr	r3, [pc, #140]	; (8002720 <xTaskResumeAll+0x128>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002698:	429a      	cmp	r2, r3
 800269a:	d302      	bcc.n	80026a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800269c:	4b21      	ldr	r3, [pc, #132]	; (8002724 <xTaskResumeAll+0x12c>)
 800269e:	2201      	movs	r2, #1
 80026a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026a2:	4b1c      	ldr	r3, [pc, #112]	; (8002714 <xTaskResumeAll+0x11c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1cc      	bne.n	8002644 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80026b0:	f000 fa08 	bl	8002ac4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80026b4:	4b1c      	ldr	r3, [pc, #112]	; (8002728 <xTaskResumeAll+0x130>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d010      	beq.n	80026e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80026c0:	f000 f836 	bl	8002730 <xTaskIncrementTick>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80026ca:	4b16      	ldr	r3, [pc, #88]	; (8002724 <xTaskResumeAll+0x12c>)
 80026cc:	2201      	movs	r2, #1
 80026ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f1      	bne.n	80026c0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80026dc:	4b12      	ldr	r3, [pc, #72]	; (8002728 <xTaskResumeAll+0x130>)
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80026e2:	4b10      	ldr	r3, [pc, #64]	; (8002724 <xTaskResumeAll+0x12c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d009      	beq.n	80026fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80026ea:	2301      	movs	r3, #1
 80026ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80026ee:	4b0f      	ldr	r3, [pc, #60]	; (800272c <xTaskResumeAll+0x134>)
 80026f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	f3bf 8f4f 	dsb	sy
 80026fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80026fe:	f000 fbe1 	bl	8002ec4 <vPortExitCritical>

	return xAlreadyYielded;
 8002702:	68bb      	ldr	r3, [r7, #8]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20000408 	.word	0x20000408
 8002710:	200003e0 	.word	0x200003e0
 8002714:	200003a0 	.word	0x200003a0
 8002718:	200003e8 	.word	0x200003e8
 800271c:	200002e4 	.word	0x200002e4
 8002720:	200002e0 	.word	0x200002e0
 8002724:	200003f4 	.word	0x200003f4
 8002728:	200003f0 	.word	0x200003f0
 800272c:	e000ed04 	.word	0xe000ed04

08002730 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800273a:	4b4e      	ldr	r3, [pc, #312]	; (8002874 <xTaskIncrementTick+0x144>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	f040 808e 	bne.w	8002860 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002744:	4b4c      	ldr	r3, [pc, #304]	; (8002878 <xTaskIncrementTick+0x148>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	3301      	adds	r3, #1
 800274a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800274c:	4a4a      	ldr	r2, [pc, #296]	; (8002878 <xTaskIncrementTick+0x148>)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d120      	bne.n	800279a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002758:	4b48      	ldr	r3, [pc, #288]	; (800287c <xTaskIncrementTick+0x14c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <xTaskIncrementTick+0x48>
	__asm volatile
 8002762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002766:	f383 8811 	msr	BASEPRI, r3
 800276a:	f3bf 8f6f 	isb	sy
 800276e:	f3bf 8f4f 	dsb	sy
 8002772:	603b      	str	r3, [r7, #0]
}
 8002774:	bf00      	nop
 8002776:	e7fe      	b.n	8002776 <xTaskIncrementTick+0x46>
 8002778:	4b40      	ldr	r3, [pc, #256]	; (800287c <xTaskIncrementTick+0x14c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	4b40      	ldr	r3, [pc, #256]	; (8002880 <xTaskIncrementTick+0x150>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a3e      	ldr	r2, [pc, #248]	; (800287c <xTaskIncrementTick+0x14c>)
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	4a3e      	ldr	r2, [pc, #248]	; (8002880 <xTaskIncrementTick+0x150>)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	4b3d      	ldr	r3, [pc, #244]	; (8002884 <xTaskIncrementTick+0x154>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3301      	adds	r3, #1
 8002792:	4a3c      	ldr	r2, [pc, #240]	; (8002884 <xTaskIncrementTick+0x154>)
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	f000 f995 	bl	8002ac4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800279a:	4b3b      	ldr	r3, [pc, #236]	; (8002888 <xTaskIncrementTick+0x158>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d348      	bcc.n	8002836 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027a4:	4b35      	ldr	r3, [pc, #212]	; (800287c <xTaskIncrementTick+0x14c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d104      	bne.n	80027b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027ae:	4b36      	ldr	r3, [pc, #216]	; (8002888 <xTaskIncrementTick+0x158>)
 80027b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027b4:	601a      	str	r2, [r3, #0]
					break;
 80027b6:	e03e      	b.n	8002836 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027b8:	4b30      	ldr	r3, [pc, #192]	; (800287c <xTaskIncrementTick+0x14c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d203      	bcs.n	80027d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80027d0:	4a2d      	ldr	r2, [pc, #180]	; (8002888 <xTaskIncrementTick+0x158>)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80027d6:	e02e      	b.n	8002836 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	3304      	adds	r3, #4
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff fcac 	bl	800213a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d004      	beq.n	80027f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	3318      	adds	r3, #24
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fca3 	bl	800213a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	2201      	movs	r2, #1
 80027fa:	409a      	lsls	r2, r3
 80027fc:	4b23      	ldr	r3, [pc, #140]	; (800288c <xTaskIncrementTick+0x15c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4313      	orrs	r3, r2
 8002802:	4a22      	ldr	r2, [pc, #136]	; (800288c <xTaskIncrementTick+0x15c>)
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4a1f      	ldr	r2, [pc, #124]	; (8002890 <xTaskIncrementTick+0x160>)
 8002814:	441a      	add	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	3304      	adds	r3, #4
 800281a:	4619      	mov	r1, r3
 800281c:	4610      	mov	r0, r2
 800281e:	f7ff fc2f 	bl	8002080 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002826:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <xTaskIncrementTick+0x164>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	429a      	cmp	r2, r3
 800282e:	d3b9      	bcc.n	80027a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002830:	2301      	movs	r3, #1
 8002832:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002834:	e7b6      	b.n	80027a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002836:	4b17      	ldr	r3, [pc, #92]	; (8002894 <xTaskIncrementTick+0x164>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800283c:	4914      	ldr	r1, [pc, #80]	; (8002890 <xTaskIncrementTick+0x160>)
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d901      	bls.n	8002852 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800284e:	2301      	movs	r3, #1
 8002850:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002852:	4b11      	ldr	r3, [pc, #68]	; (8002898 <xTaskIncrementTick+0x168>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d007      	beq.n	800286a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800285a:	2301      	movs	r3, #1
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	e004      	b.n	800286a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002860:	4b0e      	ldr	r3, [pc, #56]	; (800289c <xTaskIncrementTick+0x16c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	3301      	adds	r3, #1
 8002866:	4a0d      	ldr	r2, [pc, #52]	; (800289c <xTaskIncrementTick+0x16c>)
 8002868:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800286a:	697b      	ldr	r3, [r7, #20]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20000408 	.word	0x20000408
 8002878:	200003e4 	.word	0x200003e4
 800287c:	20000398 	.word	0x20000398
 8002880:	2000039c 	.word	0x2000039c
 8002884:	200003f8 	.word	0x200003f8
 8002888:	20000400 	.word	0x20000400
 800288c:	200003e8 	.word	0x200003e8
 8002890:	200002e4 	.word	0x200002e4
 8002894:	200002e0 	.word	0x200002e0
 8002898:	200003f4 	.word	0x200003f4
 800289c:	200003f0 	.word	0x200003f0

080028a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80028a6:	4b27      	ldr	r3, [pc, #156]	; (8002944 <vTaskSwitchContext+0xa4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80028ae:	4b26      	ldr	r3, [pc, #152]	; (8002948 <vTaskSwitchContext+0xa8>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80028b4:	e03f      	b.n	8002936 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80028b6:	4b24      	ldr	r3, [pc, #144]	; (8002948 <vTaskSwitchContext+0xa8>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028bc:	4b23      	ldr	r3, [pc, #140]	; (800294c <vTaskSwitchContext+0xac>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	fab3 f383 	clz	r3, r3
 80028c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80028ca:	7afb      	ldrb	r3, [r7, #11]
 80028cc:	f1c3 031f 	rsb	r3, r3, #31
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	491f      	ldr	r1, [pc, #124]	; (8002950 <vTaskSwitchContext+0xb0>)
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10a      	bne.n	80028fc <vTaskSwitchContext+0x5c>
	__asm volatile
 80028e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ea:	f383 8811 	msr	BASEPRI, r3
 80028ee:	f3bf 8f6f 	isb	sy
 80028f2:	f3bf 8f4f 	dsb	sy
 80028f6:	607b      	str	r3, [r7, #4]
}
 80028f8:	bf00      	nop
 80028fa:	e7fe      	b.n	80028fa <vTaskSwitchContext+0x5a>
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	4613      	mov	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4a12      	ldr	r2, [pc, #72]	; (8002950 <vTaskSwitchContext+0xb0>)
 8002908:	4413      	add	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	3308      	adds	r3, #8
 800291e:	429a      	cmp	r2, r3
 8002920:	d104      	bne.n	800292c <vTaskSwitchContext+0x8c>
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	4a08      	ldr	r2, [pc, #32]	; (8002954 <vTaskSwitchContext+0xb4>)
 8002934:	6013      	str	r3, [r2, #0]
}
 8002936:	bf00      	nop
 8002938:	371c      	adds	r7, #28
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	20000408 	.word	0x20000408
 8002948:	200003f4 	.word	0x200003f4
 800294c:	200003e8 	.word	0x200003e8
 8002950:	200002e4 	.word	0x200002e4
 8002954:	200002e0 	.word	0x200002e0

08002958 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002960:	f000 f852 	bl	8002a08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002964:	4b06      	ldr	r3, [pc, #24]	; (8002980 <prvIdleTask+0x28>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d9f9      	bls.n	8002960 <prvIdleTask+0x8>
			{
				taskYIELD();
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <prvIdleTask+0x2c>)
 800296e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	f3bf 8f4f 	dsb	sy
 8002978:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800297c:	e7f0      	b.n	8002960 <prvIdleTask+0x8>
 800297e:	bf00      	nop
 8002980:	200002e4 	.word	0x200002e4
 8002984:	e000ed04 	.word	0xe000ed04

08002988 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800298e:	2300      	movs	r3, #0
 8002990:	607b      	str	r3, [r7, #4]
 8002992:	e00c      	b.n	80029ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4a12      	ldr	r2, [pc, #72]	; (80029e8 <prvInitialiseTaskLists+0x60>)
 80029a0:	4413      	add	r3, r2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fb3f 	bl	8002026 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3301      	adds	r3, #1
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b06      	cmp	r3, #6
 80029b2:	d9ef      	bls.n	8002994 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80029b4:	480d      	ldr	r0, [pc, #52]	; (80029ec <prvInitialiseTaskLists+0x64>)
 80029b6:	f7ff fb36 	bl	8002026 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80029ba:	480d      	ldr	r0, [pc, #52]	; (80029f0 <prvInitialiseTaskLists+0x68>)
 80029bc:	f7ff fb33 	bl	8002026 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80029c0:	480c      	ldr	r0, [pc, #48]	; (80029f4 <prvInitialiseTaskLists+0x6c>)
 80029c2:	f7ff fb30 	bl	8002026 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80029c6:	480c      	ldr	r0, [pc, #48]	; (80029f8 <prvInitialiseTaskLists+0x70>)
 80029c8:	f7ff fb2d 	bl	8002026 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80029cc:	480b      	ldr	r0, [pc, #44]	; (80029fc <prvInitialiseTaskLists+0x74>)
 80029ce:	f7ff fb2a 	bl	8002026 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80029d2:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <prvInitialiseTaskLists+0x78>)
 80029d4:	4a05      	ldr	r2, [pc, #20]	; (80029ec <prvInitialiseTaskLists+0x64>)
 80029d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80029d8:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <prvInitialiseTaskLists+0x7c>)
 80029da:	4a05      	ldr	r2, [pc, #20]	; (80029f0 <prvInitialiseTaskLists+0x68>)
 80029dc:	601a      	str	r2, [r3, #0]
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	200002e4 	.word	0x200002e4
 80029ec:	20000370 	.word	0x20000370
 80029f0:	20000384 	.word	0x20000384
 80029f4:	200003a0 	.word	0x200003a0
 80029f8:	200003b4 	.word	0x200003b4
 80029fc:	200003cc 	.word	0x200003cc
 8002a00:	20000398 	.word	0x20000398
 8002a04:	2000039c 	.word	0x2000039c

08002a08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a0e:	e019      	b.n	8002a44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002a10:	f000 fa28 	bl	8002e64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a14:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <prvCheckTasksWaitingTermination+0x50>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fb8a 	bl	800213a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002a26:	4b0d      	ldr	r3, [pc, #52]	; (8002a5c <prvCheckTasksWaitingTermination+0x54>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	4a0b      	ldr	r2, [pc, #44]	; (8002a5c <prvCheckTasksWaitingTermination+0x54>)
 8002a2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002a30:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <prvCheckTasksWaitingTermination+0x58>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	3b01      	subs	r3, #1
 8002a36:	4a0a      	ldr	r2, [pc, #40]	; (8002a60 <prvCheckTasksWaitingTermination+0x58>)
 8002a38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002a3a:	f000 fa43 	bl	8002ec4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f810 	bl	8002a64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <prvCheckTasksWaitingTermination+0x58>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1e1      	bne.n	8002a10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002a4c:	bf00      	nop
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	200003b4 	.word	0x200003b4
 8002a5c:	200003e0 	.word	0x200003e0
 8002a60:	200003c8 	.word	0x200003c8

08002a64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d108      	bne.n	8002a88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fba0 	bl	80031c0 <vPortFree>
				vPortFree( pxTCB );
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 fb9d 	bl	80031c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002a86:	e018      	b.n	8002aba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d103      	bne.n	8002a9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 fb94 	bl	80031c0 <vPortFree>
	}
 8002a98:	e00f      	b.n	8002aba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d00a      	beq.n	8002aba <prvDeleteTCB+0x56>
	__asm volatile
 8002aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa8:	f383 8811 	msr	BASEPRI, r3
 8002aac:	f3bf 8f6f 	isb	sy
 8002ab0:	f3bf 8f4f 	dsb	sy
 8002ab4:	60fb      	str	r3, [r7, #12]
}
 8002ab6:	bf00      	nop
 8002ab8:	e7fe      	b.n	8002ab8 <prvDeleteTCB+0x54>
	}
 8002aba:	bf00      	nop
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002aca:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <prvResetNextTaskUnblockTime+0x38>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d104      	bne.n	8002ade <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <prvResetNextTaskUnblockTime+0x3c>)
 8002ad6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ada:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002adc:	e008      	b.n	8002af0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ade:	4b07      	ldr	r3, [pc, #28]	; (8002afc <prvResetNextTaskUnblockTime+0x38>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <prvResetNextTaskUnblockTime+0x3c>)
 8002aee:	6013      	str	r3, [r2, #0]
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	20000398 	.word	0x20000398
 8002b00:	20000400 	.word	0x20000400

08002b04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002b0a:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <xTaskGetSchedulerState+0x34>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d102      	bne.n	8002b18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002b12:	2301      	movs	r3, #1
 8002b14:	607b      	str	r3, [r7, #4]
 8002b16:	e008      	b.n	8002b2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b18:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <xTaskGetSchedulerState+0x38>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d102      	bne.n	8002b26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002b20:	2302      	movs	r3, #2
 8002b22:	607b      	str	r3, [r7, #4]
 8002b24:	e001      	b.n	8002b2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002b26:	2300      	movs	r3, #0
 8002b28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002b2a:	687b      	ldr	r3, [r7, #4]
	}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	200003ec 	.word	0x200003ec
 8002b3c:	20000408 	.word	0x20000408

08002b40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002b4a:	4b29      	ldr	r3, [pc, #164]	; (8002bf0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b50:	4b28      	ldr	r3, [pc, #160]	; (8002bf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	3304      	adds	r3, #4
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff faef 	bl	800213a <uxListRemove>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10b      	bne.n	8002b7a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002b62:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	2201      	movs	r2, #1
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	4b21      	ldr	r3, [pc, #132]	; (8002bf8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4013      	ands	r3, r2
 8002b76:	4a20      	ldr	r2, [pc, #128]	; (8002bf8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002b78:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b80:	d10a      	bne.n	8002b98 <prvAddCurrentTaskToDelayedList+0x58>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d007      	beq.n	8002b98 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002b88:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	4619      	mov	r1, r3
 8002b90:	481a      	ldr	r0, [pc, #104]	; (8002bfc <prvAddCurrentTaskToDelayedList+0xbc>)
 8002b92:	f7ff fa75 	bl	8002080 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002b96:	e026      	b.n	8002be6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002ba0:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d209      	bcs.n	8002bc4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bb0:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	f7ff fa83 	bl	80020c8 <vListInsert>
}
 8002bc2:	e010      	b.n	8002be6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bc4:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	f7ff fa79 	bl	80020c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002bd6:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d202      	bcs.n	8002be6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002be0:	4a09      	ldr	r2, [pc, #36]	; (8002c08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	6013      	str	r3, [r2, #0]
}
 8002be6:	bf00      	nop
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	200003e4 	.word	0x200003e4
 8002bf4:	200002e0 	.word	0x200002e0
 8002bf8:	200003e8 	.word	0x200003e8
 8002bfc:	200003cc 	.word	0x200003cc
 8002c00:	2000039c 	.word	0x2000039c
 8002c04:	20000398 	.word	0x20000398
 8002c08:	20000400 	.word	0x20000400

08002c0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	3b04      	subs	r3, #4
 8002c1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3b04      	subs	r3, #4
 8002c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f023 0201 	bic.w	r2, r3, #1
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	3b04      	subs	r3, #4
 8002c3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002c3c:	4a0c      	ldr	r2, [pc, #48]	; (8002c70 <pxPortInitialiseStack+0x64>)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	3b14      	subs	r3, #20
 8002c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3b04      	subs	r3, #4
 8002c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f06f 0202 	mvn.w	r2, #2
 8002c5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	3b20      	subs	r3, #32
 8002c60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002c62:	68fb      	ldr	r3, [r7, #12]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	08002c75 	.word	0x08002c75

08002c74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002c7e:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <prvTaskExitError+0x54>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c86:	d00a      	beq.n	8002c9e <prvTaskExitError+0x2a>
	__asm volatile
 8002c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	60fb      	str	r3, [r7, #12]
}
 8002c9a:	bf00      	nop
 8002c9c:	e7fe      	b.n	8002c9c <prvTaskExitError+0x28>
	__asm volatile
 8002c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca2:	f383 8811 	msr	BASEPRI, r3
 8002ca6:	f3bf 8f6f 	isb	sy
 8002caa:	f3bf 8f4f 	dsb	sy
 8002cae:	60bb      	str	r3, [r7, #8]
}
 8002cb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002cb2:	bf00      	nop
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0fc      	beq.n	8002cb4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002cba:	bf00      	nop
 8002cbc:	bf00      	nop
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	2000000c 	.word	0x2000000c
 8002ccc:	00000000 	.word	0x00000000

08002cd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002cd0:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <pxCurrentTCBConst2>)
 8002cd2:	6819      	ldr	r1, [r3, #0]
 8002cd4:	6808      	ldr	r0, [r1, #0]
 8002cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cda:	f380 8809 	msr	PSP, r0
 8002cde:	f3bf 8f6f 	isb	sy
 8002ce2:	f04f 0000 	mov.w	r0, #0
 8002ce6:	f380 8811 	msr	BASEPRI, r0
 8002cea:	4770      	bx	lr
 8002cec:	f3af 8000 	nop.w

08002cf0 <pxCurrentTCBConst2>:
 8002cf0:	200002e0 	.word	0x200002e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop

08002cf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002cf8:	4808      	ldr	r0, [pc, #32]	; (8002d1c <prvPortStartFirstTask+0x24>)
 8002cfa:	6800      	ldr	r0, [r0, #0]
 8002cfc:	6800      	ldr	r0, [r0, #0]
 8002cfe:	f380 8808 	msr	MSP, r0
 8002d02:	f04f 0000 	mov.w	r0, #0
 8002d06:	f380 8814 	msr	CONTROL, r0
 8002d0a:	b662      	cpsie	i
 8002d0c:	b661      	cpsie	f
 8002d0e:	f3bf 8f4f 	dsb	sy
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	df00      	svc	0
 8002d18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002d1a:	bf00      	nop
 8002d1c:	e000ed08 	.word	0xe000ed08

08002d20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002d26:	4b46      	ldr	r3, [pc, #280]	; (8002e40 <xPortStartScheduler+0x120>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a46      	ldr	r2, [pc, #280]	; (8002e44 <xPortStartScheduler+0x124>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d10a      	bne.n	8002d46 <xPortStartScheduler+0x26>
	__asm volatile
 8002d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d34:	f383 8811 	msr	BASEPRI, r3
 8002d38:	f3bf 8f6f 	isb	sy
 8002d3c:	f3bf 8f4f 	dsb	sy
 8002d40:	613b      	str	r3, [r7, #16]
}
 8002d42:	bf00      	nop
 8002d44:	e7fe      	b.n	8002d44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002d46:	4b3e      	ldr	r3, [pc, #248]	; (8002e40 <xPortStartScheduler+0x120>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a3f      	ldr	r2, [pc, #252]	; (8002e48 <xPortStartScheduler+0x128>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d10a      	bne.n	8002d66 <xPortStartScheduler+0x46>
	__asm volatile
 8002d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	60fb      	str	r3, [r7, #12]
}
 8002d62:	bf00      	nop
 8002d64:	e7fe      	b.n	8002d64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002d66:	4b39      	ldr	r3, [pc, #228]	; (8002e4c <xPortStartScheduler+0x12c>)
 8002d68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	22ff      	movs	r2, #255	; 0xff
 8002d76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4b31      	ldr	r3, [pc, #196]	; (8002e50 <xPortStartScheduler+0x130>)
 8002d8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002d8e:	4b31      	ldr	r3, [pc, #196]	; (8002e54 <xPortStartScheduler+0x134>)
 8002d90:	2207      	movs	r2, #7
 8002d92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d94:	e009      	b.n	8002daa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002d96:	4b2f      	ldr	r3, [pc, #188]	; (8002e54 <xPortStartScheduler+0x134>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	4a2d      	ldr	r2, [pc, #180]	; (8002e54 <xPortStartScheduler+0x134>)
 8002d9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002daa:	78fb      	ldrb	r3, [r7, #3]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db2:	2b80      	cmp	r3, #128	; 0x80
 8002db4:	d0ef      	beq.n	8002d96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002db6:	4b27      	ldr	r3, [pc, #156]	; (8002e54 <xPortStartScheduler+0x134>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f1c3 0307 	rsb	r3, r3, #7
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d00a      	beq.n	8002dd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8002dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc6:	f383 8811 	msr	BASEPRI, r3
 8002dca:	f3bf 8f6f 	isb	sy
 8002dce:	f3bf 8f4f 	dsb	sy
 8002dd2:	60bb      	str	r3, [r7, #8]
}
 8002dd4:	bf00      	nop
 8002dd6:	e7fe      	b.n	8002dd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002dd8:	4b1e      	ldr	r3, [pc, #120]	; (8002e54 <xPortStartScheduler+0x134>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	021b      	lsls	r3, r3, #8
 8002dde:	4a1d      	ldr	r2, [pc, #116]	; (8002e54 <xPortStartScheduler+0x134>)
 8002de0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002de2:	4b1c      	ldr	r3, [pc, #112]	; (8002e54 <xPortStartScheduler+0x134>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002dea:	4a1a      	ldr	r2, [pc, #104]	; (8002e54 <xPortStartScheduler+0x134>)
 8002dec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002df6:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <xPortStartScheduler+0x138>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a17      	ldr	r2, [pc, #92]	; (8002e58 <xPortStartScheduler+0x138>)
 8002dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002e02:	4b15      	ldr	r3, [pc, #84]	; (8002e58 <xPortStartScheduler+0x138>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a14      	ldr	r2, [pc, #80]	; (8002e58 <xPortStartScheduler+0x138>)
 8002e08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002e0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002e0e:	f000 f8dd 	bl	8002fcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002e12:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <xPortStartScheduler+0x13c>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002e18:	f000 f8fc 	bl	8003014 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002e1c:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <xPortStartScheduler+0x140>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a0f      	ldr	r2, [pc, #60]	; (8002e60 <xPortStartScheduler+0x140>)
 8002e22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002e26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002e28:	f7ff ff66 	bl	8002cf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002e2c:	f7ff fd38 	bl	80028a0 <vTaskSwitchContext>
	prvTaskExitError();
 8002e30:	f7ff ff20 	bl	8002c74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	e000ed00 	.word	0xe000ed00
 8002e44:	410fc271 	.word	0x410fc271
 8002e48:	410fc270 	.word	0x410fc270
 8002e4c:	e000e400 	.word	0xe000e400
 8002e50:	2000040c 	.word	0x2000040c
 8002e54:	20000410 	.word	0x20000410
 8002e58:	e000ed20 	.word	0xe000ed20
 8002e5c:	2000000c 	.word	0x2000000c
 8002e60:	e000ef34 	.word	0xe000ef34

08002e64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
	__asm volatile
 8002e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6e:	f383 8811 	msr	BASEPRI, r3
 8002e72:	f3bf 8f6f 	isb	sy
 8002e76:	f3bf 8f4f 	dsb	sy
 8002e7a:	607b      	str	r3, [r7, #4]
}
 8002e7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002e7e:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <vPortEnterCritical+0x58>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	3301      	adds	r3, #1
 8002e84:	4a0d      	ldr	r2, [pc, #52]	; (8002ebc <vPortEnterCritical+0x58>)
 8002e86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <vPortEnterCritical+0x58>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d10f      	bne.n	8002eb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002e90:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <vPortEnterCritical+0x5c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8002e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9e:	f383 8811 	msr	BASEPRI, r3
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	603b      	str	r3, [r7, #0]
}
 8002eac:	bf00      	nop
 8002eae:	e7fe      	b.n	8002eae <vPortEnterCritical+0x4a>
	}
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	2000000c 	.word	0x2000000c
 8002ec0:	e000ed04 	.word	0xe000ed04

08002ec4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <vPortExitCritical+0x50>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10a      	bne.n	8002ee8 <vPortExitCritical+0x24>
	__asm volatile
 8002ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed6:	f383 8811 	msr	BASEPRI, r3
 8002eda:	f3bf 8f6f 	isb	sy
 8002ede:	f3bf 8f4f 	dsb	sy
 8002ee2:	607b      	str	r3, [r7, #4]
}
 8002ee4:	bf00      	nop
 8002ee6:	e7fe      	b.n	8002ee6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002ee8:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <vPortExitCritical+0x50>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3b01      	subs	r3, #1
 8002eee:	4a09      	ldr	r2, [pc, #36]	; (8002f14 <vPortExitCritical+0x50>)
 8002ef0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002ef2:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <vPortExitCritical+0x50>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d105      	bne.n	8002f06 <vPortExitCritical+0x42>
 8002efa:	2300      	movs	r3, #0
 8002efc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	2000000c 	.word	0x2000000c
	...

08002f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002f20:	f3ef 8009 	mrs	r0, PSP
 8002f24:	f3bf 8f6f 	isb	sy
 8002f28:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <pxCurrentTCBConst>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	f01e 0f10 	tst.w	lr, #16
 8002f30:	bf08      	it	eq
 8002f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f3a:	6010      	str	r0, [r2, #0]
 8002f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002f40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002f44:	f380 8811 	msr	BASEPRI, r0
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	f3bf 8f6f 	isb	sy
 8002f50:	f7ff fca6 	bl	80028a0 <vTaskSwitchContext>
 8002f54:	f04f 0000 	mov.w	r0, #0
 8002f58:	f380 8811 	msr	BASEPRI, r0
 8002f5c:	bc09      	pop	{r0, r3}
 8002f5e:	6819      	ldr	r1, [r3, #0]
 8002f60:	6808      	ldr	r0, [r1, #0]
 8002f62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f66:	f01e 0f10 	tst.w	lr, #16
 8002f6a:	bf08      	it	eq
 8002f6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002f70:	f380 8809 	msr	PSP, r0
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	f3af 8000 	nop.w

08002f80 <pxCurrentTCBConst>:
 8002f80:	200002e0 	.word	0x200002e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop

08002f88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8002f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f92:	f383 8811 	msr	BASEPRI, r3
 8002f96:	f3bf 8f6f 	isb	sy
 8002f9a:	f3bf 8f4f 	dsb	sy
 8002f9e:	607b      	str	r3, [r7, #4]
}
 8002fa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002fa2:	f7ff fbc5 	bl	8002730 <xTaskIncrementTick>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <xPortSysTickHandler+0x40>)
 8002fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	f383 8811 	msr	BASEPRI, r3
}
 8002fbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002fc0:	bf00      	nop
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	e000ed04 	.word	0xe000ed04

08002fcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <vPortSetupTimerInterrupt+0x34>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002fd6:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <vPortSetupTimerInterrupt+0x38>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002fdc:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <vPortSetupTimerInterrupt+0x3c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a0a      	ldr	r2, [pc, #40]	; (800300c <vPortSetupTimerInterrupt+0x40>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	099b      	lsrs	r3, r3, #6
 8002fe8:	4a09      	ldr	r2, [pc, #36]	; (8003010 <vPortSetupTimerInterrupt+0x44>)
 8002fea:	3b01      	subs	r3, #1
 8002fec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002fee:	4b04      	ldr	r3, [pc, #16]	; (8003000 <vPortSetupTimerInterrupt+0x34>)
 8002ff0:	2207      	movs	r2, #7
 8002ff2:	601a      	str	r2, [r3, #0]
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	e000e010 	.word	0xe000e010
 8003004:	e000e018 	.word	0xe000e018
 8003008:	20000000 	.word	0x20000000
 800300c:	10624dd3 	.word	0x10624dd3
 8003010:	e000e014 	.word	0xe000e014

08003014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003014:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003024 <vPortEnableVFP+0x10>
 8003018:	6801      	ldr	r1, [r0, #0]
 800301a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800301e:	6001      	str	r1, [r0, #0]
 8003020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003022:	bf00      	nop
 8003024:	e000ed88 	.word	0xe000ed88

08003028 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08a      	sub	sp, #40	; 0x28
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003030:	2300      	movs	r3, #0
 8003032:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003034:	f7ff fad2 	bl	80025dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003038:	4b5b      	ldr	r3, [pc, #364]	; (80031a8 <pvPortMalloc+0x180>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003040:	f000 f920 	bl	8003284 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003044:	4b59      	ldr	r3, [pc, #356]	; (80031ac <pvPortMalloc+0x184>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	f040 8093 	bne.w	8003178 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d01d      	beq.n	8003094 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003058:	2208      	movs	r2, #8
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	2b00      	cmp	r3, #0
 8003068:	d014      	beq.n	8003094 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f023 0307 	bic.w	r3, r3, #7
 8003070:	3308      	adds	r3, #8
 8003072:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <pvPortMalloc+0x6c>
	__asm volatile
 800307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003082:	f383 8811 	msr	BASEPRI, r3
 8003086:	f3bf 8f6f 	isb	sy
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	617b      	str	r3, [r7, #20]
}
 8003090:	bf00      	nop
 8003092:	e7fe      	b.n	8003092 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d06e      	beq.n	8003178 <pvPortMalloc+0x150>
 800309a:	4b45      	ldr	r3, [pc, #276]	; (80031b0 <pvPortMalloc+0x188>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d869      	bhi.n	8003178 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80030a4:	4b43      	ldr	r3, [pc, #268]	; (80031b4 <pvPortMalloc+0x18c>)
 80030a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80030a8:	4b42      	ldr	r3, [pc, #264]	; (80031b4 <pvPortMalloc+0x18c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030ae:	e004      	b.n	80030ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d903      	bls.n	80030cc <pvPortMalloc+0xa4>
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f1      	bne.n	80030b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80030cc:	4b36      	ldr	r3, [pc, #216]	; (80031a8 <pvPortMalloc+0x180>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d050      	beq.n	8003178 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2208      	movs	r2, #8
 80030dc:	4413      	add	r3, r2
 80030de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	1ad2      	subs	r2, r2, r3
 80030f0:	2308      	movs	r3, #8
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d91f      	bls.n	8003138 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80030f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4413      	add	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00a      	beq.n	8003120 <pvPortMalloc+0xf8>
	__asm volatile
 800310a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310e:	f383 8811 	msr	BASEPRI, r3
 8003112:	f3bf 8f6f 	isb	sy
 8003116:	f3bf 8f4f 	dsb	sy
 800311a:	613b      	str	r3, [r7, #16]
}
 800311c:	bf00      	nop
 800311e:	e7fe      	b.n	800311e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	1ad2      	subs	r2, r2, r3
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003132:	69b8      	ldr	r0, [r7, #24]
 8003134:	f000 f908 	bl	8003348 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003138:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <pvPortMalloc+0x188>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	4a1b      	ldr	r2, [pc, #108]	; (80031b0 <pvPortMalloc+0x188>)
 8003144:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003146:	4b1a      	ldr	r3, [pc, #104]	; (80031b0 <pvPortMalloc+0x188>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <pvPortMalloc+0x190>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d203      	bcs.n	800315a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003152:	4b17      	ldr	r3, [pc, #92]	; (80031b0 <pvPortMalloc+0x188>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a18      	ldr	r2, [pc, #96]	; (80031b8 <pvPortMalloc+0x190>)
 8003158:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	4b13      	ldr	r3, [pc, #76]	; (80031ac <pvPortMalloc+0x184>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	431a      	orrs	r2, r3
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800316e:	4b13      	ldr	r3, [pc, #76]	; (80031bc <pvPortMalloc+0x194>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	3301      	adds	r3, #1
 8003174:	4a11      	ldr	r2, [pc, #68]	; (80031bc <pvPortMalloc+0x194>)
 8003176:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003178:	f7ff fa3e 	bl	80025f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <pvPortMalloc+0x174>
	__asm volatile
 8003186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318a:	f383 8811 	msr	BASEPRI, r3
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	f3bf 8f4f 	dsb	sy
 8003196:	60fb      	str	r3, [r7, #12]
}
 8003198:	bf00      	nop
 800319a:	e7fe      	b.n	800319a <pvPortMalloc+0x172>
	return pvReturn;
 800319c:	69fb      	ldr	r3, [r7, #28]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3728      	adds	r7, #40	; 0x28
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	2000401c 	.word	0x2000401c
 80031ac:	20004030 	.word	0x20004030
 80031b0:	20004020 	.word	0x20004020
 80031b4:	20004014 	.word	0x20004014
 80031b8:	20004024 	.word	0x20004024
 80031bc:	20004028 	.word	0x20004028

080031c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d04d      	beq.n	800326e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80031d2:	2308      	movs	r3, #8
 80031d4:	425b      	negs	r3, r3
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	4413      	add	r3, r2
 80031da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	4b24      	ldr	r3, [pc, #144]	; (8003278 <vPortFree+0xb8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10a      	bne.n	8003204 <vPortFree+0x44>
	__asm volatile
 80031ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f2:	f383 8811 	msr	BASEPRI, r3
 80031f6:	f3bf 8f6f 	isb	sy
 80031fa:	f3bf 8f4f 	dsb	sy
 80031fe:	60fb      	str	r3, [r7, #12]
}
 8003200:	bf00      	nop
 8003202:	e7fe      	b.n	8003202 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <vPortFree+0x62>
	__asm volatile
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	60bb      	str	r3, [r7, #8]
}
 800321e:	bf00      	nop
 8003220:	e7fe      	b.n	8003220 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	4b14      	ldr	r3, [pc, #80]	; (8003278 <vPortFree+0xb8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4013      	ands	r3, r2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01e      	beq.n	800326e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d11a      	bne.n	800326e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <vPortFree+0xb8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	43db      	mvns	r3, r3
 8003242:	401a      	ands	r2, r3
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003248:	f7ff f9c8 	bl	80025dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	4b0a      	ldr	r3, [pc, #40]	; (800327c <vPortFree+0xbc>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4413      	add	r3, r2
 8003256:	4a09      	ldr	r2, [pc, #36]	; (800327c <vPortFree+0xbc>)
 8003258:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800325a:	6938      	ldr	r0, [r7, #16]
 800325c:	f000 f874 	bl	8003348 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003260:	4b07      	ldr	r3, [pc, #28]	; (8003280 <vPortFree+0xc0>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	3301      	adds	r3, #1
 8003266:	4a06      	ldr	r2, [pc, #24]	; (8003280 <vPortFree+0xc0>)
 8003268:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800326a:	f7ff f9c5 	bl	80025f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800326e:	bf00      	nop
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20004030 	.word	0x20004030
 800327c:	20004020 	.word	0x20004020
 8003280:	2000402c 	.word	0x2000402c

08003284 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800328a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800328e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003290:	4b27      	ldr	r3, [pc, #156]	; (8003330 <prvHeapInit+0xac>)
 8003292:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00c      	beq.n	80032b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	3307      	adds	r3, #7
 80032a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 0307 	bic.w	r3, r3, #7
 80032aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	4a1f      	ldr	r2, [pc, #124]	; (8003330 <prvHeapInit+0xac>)
 80032b4:	4413      	add	r3, r2
 80032b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80032bc:	4a1d      	ldr	r2, [pc, #116]	; (8003334 <prvHeapInit+0xb0>)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80032c2:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <prvHeapInit+0xb0>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	4413      	add	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80032d0:	2208      	movs	r2, #8
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	1a9b      	subs	r3, r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f023 0307 	bic.w	r3, r3, #7
 80032de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4a15      	ldr	r2, [pc, #84]	; (8003338 <prvHeapInit+0xb4>)
 80032e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80032e6:	4b14      	ldr	r3, [pc, #80]	; (8003338 <prvHeapInit+0xb4>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2200      	movs	r2, #0
 80032ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80032ee:	4b12      	ldr	r3, [pc, #72]	; (8003338 <prvHeapInit+0xb4>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	1ad2      	subs	r2, r2, r3
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003304:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <prvHeapInit+0xb4>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4a0a      	ldr	r2, [pc, #40]	; (800333c <prvHeapInit+0xb8>)
 8003312:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	4a09      	ldr	r2, [pc, #36]	; (8003340 <prvHeapInit+0xbc>)
 800331a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800331c:	4b09      	ldr	r3, [pc, #36]	; (8003344 <prvHeapInit+0xc0>)
 800331e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003322:	601a      	str	r2, [r3, #0]
}
 8003324:	bf00      	nop
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	20000414 	.word	0x20000414
 8003334:	20004014 	.word	0x20004014
 8003338:	2000401c 	.word	0x2000401c
 800333c:	20004024 	.word	0x20004024
 8003340:	20004020 	.word	0x20004020
 8003344:	20004030 	.word	0x20004030

08003348 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003350:	4b28      	ldr	r3, [pc, #160]	; (80033f4 <prvInsertBlockIntoFreeList+0xac>)
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	e002      	b.n	800335c <prvInsertBlockIntoFreeList+0x14>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	429a      	cmp	r2, r3
 8003364:	d8f7      	bhi.n	8003356 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	4413      	add	r3, r2
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	429a      	cmp	r2, r3
 8003376:	d108      	bne.n	800338a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	441a      	add	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	441a      	add	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d118      	bne.n	80033d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	4b15      	ldr	r3, [pc, #84]	; (80033f8 <prvInsertBlockIntoFreeList+0xb0>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d00d      	beq.n	80033c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	441a      	add	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	e008      	b.n	80033d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80033c6:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <prvInsertBlockIntoFreeList+0xb0>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	e003      	b.n	80033d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d002      	beq.n	80033e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033e6:	bf00      	nop
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	20004014 	.word	0x20004014
 80033f8:	2000401c 	.word	0x2000401c

080033fc <memset>:
 80033fc:	4402      	add	r2, r0
 80033fe:	4603      	mov	r3, r0
 8003400:	4293      	cmp	r3, r2
 8003402:	d100      	bne.n	8003406 <memset+0xa>
 8003404:	4770      	bx	lr
 8003406:	f803 1b01 	strb.w	r1, [r3], #1
 800340a:	e7f9      	b.n	8003400 <memset+0x4>

0800340c <__libc_init_array>:
 800340c:	b570      	push	{r4, r5, r6, lr}
 800340e:	4d0d      	ldr	r5, [pc, #52]	; (8003444 <__libc_init_array+0x38>)
 8003410:	4c0d      	ldr	r4, [pc, #52]	; (8003448 <__libc_init_array+0x3c>)
 8003412:	1b64      	subs	r4, r4, r5
 8003414:	10a4      	asrs	r4, r4, #2
 8003416:	2600      	movs	r6, #0
 8003418:	42a6      	cmp	r6, r4
 800341a:	d109      	bne.n	8003430 <__libc_init_array+0x24>
 800341c:	4d0b      	ldr	r5, [pc, #44]	; (800344c <__libc_init_array+0x40>)
 800341e:	4c0c      	ldr	r4, [pc, #48]	; (8003450 <__libc_init_array+0x44>)
 8003420:	f000 f818 	bl	8003454 <_init>
 8003424:	1b64      	subs	r4, r4, r5
 8003426:	10a4      	asrs	r4, r4, #2
 8003428:	2600      	movs	r6, #0
 800342a:	42a6      	cmp	r6, r4
 800342c:	d105      	bne.n	800343a <__libc_init_array+0x2e>
 800342e:	bd70      	pop	{r4, r5, r6, pc}
 8003430:	f855 3b04 	ldr.w	r3, [r5], #4
 8003434:	4798      	blx	r3
 8003436:	3601      	adds	r6, #1
 8003438:	e7ee      	b.n	8003418 <__libc_init_array+0xc>
 800343a:	f855 3b04 	ldr.w	r3, [r5], #4
 800343e:	4798      	blx	r3
 8003440:	3601      	adds	r6, #1
 8003442:	e7f2      	b.n	800342a <__libc_init_array+0x1e>
 8003444:	0800354c 	.word	0x0800354c
 8003448:	0800354c 	.word	0x0800354c
 800344c:	0800354c 	.word	0x0800354c
 8003450:	08003550 	.word	0x08003550

08003454 <_init>:
 8003454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003456:	bf00      	nop
 8003458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800345a:	bc08      	pop	{r3}
 800345c:	469e      	mov	lr, r3
 800345e:	4770      	bx	lr

08003460 <_fini>:
 8003460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003462:	bf00      	nop
 8003464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003466:	bc08      	pop	{r3}
 8003468:	469e      	mov	lr, r3
 800346a:	4770      	bx	lr
