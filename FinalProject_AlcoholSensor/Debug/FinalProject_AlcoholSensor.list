
FinalProject_AlcoholSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000329c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800343c  0800343c  0001343c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034cc  080034cc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080034cc  080034cc  000134cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034d4  080034d4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034d4  080034d4  000134d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034d8  080034d8  000134d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080034dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000005c  08003538  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08003538  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000085e9  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015e1  00000000  00000000  000286b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000748  00000000  00000000  00029ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000590  00000000  00000000  0002a3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015ed5  00000000  00000000  0002a978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008e41  00000000  00000000  0004084d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fa27  00000000  00000000  0004968e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000220c  00000000  00000000  000d90b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000db2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003424 	.word	0x08003424

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003424 	.word	0x08003424

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <uartPrint>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uartPrint(const char* msg) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, msg, strlen(msg), 100);
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f7ff fe23 	bl	80001e0 <strlen>
 800059a:	4603      	mov	r3, r0
 800059c:	b29a      	uxth	r2, r3
 800059e:	2364      	movs	r3, #100	; 0x64
 80005a0:	6879      	ldr	r1, [r7, #4]
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <uartPrint+0x24>)
 80005a4:	f001 fede 	bl	8002364 <HAL_UART_Transmit>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200000c0 	.word	0x200000c0

080005b4 <uartPrintln>:

void uartPrintln(const char* msg) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	uartPrint(msg);
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f7ff ffe5 	bl	800058c <uartPrint>
	uartPrint("\r\n");
 80005c2:	4803      	ldr	r0, [pc, #12]	; (80005d0 <uartPrintln+0x1c>)
 80005c4:	f7ff ffe2 	bl	800058c <uartPrint>
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	0800343c 	.word	0x0800343c

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b09e      	sub	sp, #120	; 0x78
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 fb03 	bl	8000be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f857 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 f93b 	bl	800085c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e6:	f000 f90f 	bl	8000808 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005ea:	f000 f8bb 	bl	8000764 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  char line[100];
  int alcoholThreshold = 1300;
 80005ee:	f240 5314 	movw	r3, #1300	; 0x514
 80005f2:	673b      	str	r3, [r7, #112]	; 0x70
  int alcoholState = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	677b      	str	r3, [r7, #116]	; 0x74
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	2102      	movs	r1, #2
 80005fc:	481f      	ldr	r0, [pc, #124]	; (800067c <main+0xa8>)
 80005fe:	f001 f9af 	bl	8001960 <HAL_GPIO_WritePin>
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8000602:	481f      	ldr	r0, [pc, #124]	; (8000680 <main+0xac>)
 8000604:	f000 fbc8 	bl	8000d98 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 8000608:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800060c:	481c      	ldr	r0, [pc, #112]	; (8000680 <main+0xac>)
 800060e:	f000 fc77 	bl	8000f00 <HAL_ADC_PollForConversion>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d12c      	bne.n	8000672 <main+0x9e>
		  int alcoholLevel = HAL_ADC_GetValue(&hadc1);
 8000618:	4819      	ldr	r0, [pc, #100]	; (8000680 <main+0xac>)
 800061a:	f000 fcfc 	bl	8001016 <HAL_ADC_GetValue>
 800061e:	4603      	mov	r3, r0
 8000620:	66fb      	str	r3, [r7, #108]	; 0x6c
		  int tick = HAL_GetTick();
 8000622:	f000 fb45 	bl	8000cb0 <HAL_GetTick>
 8000626:	4603      	mov	r3, r0
 8000628:	66bb      	str	r3, [r7, #104]	; 0x68
		  sprintf(line, "Time: %d, Alcohol: %d", tick, alcoholLevel);
 800062a:	1d38      	adds	r0, r7, #4
 800062c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800062e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000630:	4914      	ldr	r1, [pc, #80]	; (8000684 <main+0xb0>)
 8000632:	f002 fa53 	bl	8002adc <siprintf>
		  if(alcoholLevel > alcoholThreshold) {
 8000636:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000638:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800063a:	429a      	cmp	r2, r3
 800063c:	dd0d      	ble.n	800065a <main+0x86>
			  if(alcoholState == 0) {
 800063e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000640:	2b00      	cmp	r3, #0
 8000642:	d107      	bne.n	8000654 <main+0x80>
				  uartPrintln("Entering state 1");
 8000644:	4810      	ldr	r0, [pc, #64]	; (8000688 <main+0xb4>)
 8000646:	f7ff ffb5 	bl	80005b4 <uartPrintln>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	2102      	movs	r1, #2
 800064e:	480b      	ldr	r0, [pc, #44]	; (800067c <main+0xa8>)
 8000650:	f001 f986 	bl	8001960 <HAL_GPIO_WritePin>
//				  HAL_Delay(200);
//				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
			  }
			  alcoholState = 1;
 8000654:	2301      	movs	r3, #1
 8000656:	677b      	str	r3, [r7, #116]	; 0x74
 8000658:	e007      	b.n	800066a <main+0x96>
		  } else {
			  if(alcoholState == 1) {
 800065a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800065c:	2b01      	cmp	r3, #1
 800065e:	d102      	bne.n	8000666 <main+0x92>
				  uartPrintln("Entering state 0");
 8000660:	480a      	ldr	r0, [pc, #40]	; (800068c <main+0xb8>)
 8000662:	f7ff ffa7 	bl	80005b4 <uartPrintln>
			  }
			  alcoholState = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	677b      	str	r3, [r7, #116]	; 0x74
		  }
		  uartPrintln(line);
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ffa1 	bl	80005b4 <uartPrintln>

	  }
	  HAL_Delay(1000);
 8000672:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000676:	f000 fb27 	bl	8000cc8 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 800067a:	e7c2      	b.n	8000602 <main+0x2e>
 800067c:	40020000 	.word	0x40020000
 8000680:	20000078 	.word	0x20000078
 8000684:	08003440 	.word	0x08003440
 8000688:	08003458 	.word	0x08003458
 800068c:	0800346c 	.word	0x0800346c

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	; 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	2230      	movs	r2, #48	; 0x30
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 fa3c 	bl	8002b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	4b28      	ldr	r3, [pc, #160]	; (800075c <SystemClock_Config+0xcc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	4a27      	ldr	r2, [pc, #156]	; (800075c <SystemClock_Config+0xcc>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	; 0x40
 80006c4:	4b25      	ldr	r3, [pc, #148]	; (800075c <SystemClock_Config+0xcc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	4b22      	ldr	r3, [pc, #136]	; (8000760 <SystemClock_Config+0xd0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a21      	ldr	r2, [pc, #132]	; (8000760 <SystemClock_Config+0xd0>)
 80006da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <SystemClock_Config+0xd0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2310      	movs	r3, #16
 80006f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000700:	2310      	movs	r3, #16
 8000702:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000704:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000708:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800070a:	2304      	movs	r3, #4
 800070c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800070e:	2304      	movs	r3, #4
 8000710:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000712:	f107 0320 	add.w	r3, r7, #32
 8000716:	4618      	mov	r0, r3
 8000718:	f001 f93c 	bl	8001994 <HAL_RCC_OscConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000722:	f000 f909 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000726:	230f      	movs	r3, #15
 8000728:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072a:	2302      	movs	r3, #2
 800072c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000736:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	2102      	movs	r1, #2
 8000742:	4618      	mov	r0, r3
 8000744:	f001 fb9e 	bl	8001e84 <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800074e:	f000 f8f3 	bl	8000938 <Error_Handler>
  }
}
 8000752:	bf00      	nop
 8000754:	3750      	adds	r7, #80	; 0x50
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800076a:	463b      	mov	r3, r7
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000776:	4b21      	ldr	r3, [pc, #132]	; (80007fc <MX_ADC1_Init+0x98>)
 8000778:	4a21      	ldr	r2, [pc, #132]	; (8000800 <MX_ADC1_Init+0x9c>)
 800077a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <MX_ADC1_Init+0x98>)
 800077e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000782:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000784:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <MX_ADC1_Init+0x98>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_ADC1_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000790:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_ADC1_Init+0x98>)
 8000792:	2200      	movs	r2, #0
 8000794:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000796:	4b19      	ldr	r3, [pc, #100]	; (80007fc <MX_ADC1_Init+0x98>)
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_ADC1_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_ADC1_Init+0x98>)
 80007a6:	4a17      	ldr	r2, [pc, #92]	; (8000804 <MX_ADC1_Init+0xa0>)
 80007a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_ADC1_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_ADC1_Init+0x98>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_ADC1_Init+0x98>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_ADC1_Init+0x98>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c4:	480d      	ldr	r0, [pc, #52]	; (80007fc <MX_ADC1_Init+0x98>)
 80007c6:	f000 faa3 	bl	8000d10 <HAL_ADC_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007d0:	f000 f8b2 	bl	8000938 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007d8:	2301      	movs	r3, #1
 80007da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_ADC1_Init+0x98>)
 80007e6:	f000 fc23 	bl	8001030 <HAL_ADC_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007f0:	f000 f8a2 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000078 	.word	0x20000078
 8000800:	40012000 	.word	0x40012000
 8000804:	0f000001 	.word	0x0f000001

08000808 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <MX_USART2_UART_Init+0x50>)
 8000810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000840:	f001 fd40 	bl	80022c4 <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800084a:	f000 f875 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000c0 	.word	0x200000c0
 8000858:	40004400 	.word	0x40004400

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b2d      	ldr	r3, [pc, #180]	; (800092c <MX_GPIO_Init+0xd0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a2c      	ldr	r2, [pc, #176]	; (800092c <MX_GPIO_Init+0xd0>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b2a      	ldr	r3, [pc, #168]	; (800092c <MX_GPIO_Init+0xd0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b26      	ldr	r3, [pc, #152]	; (800092c <MX_GPIO_Init+0xd0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a25      	ldr	r2, [pc, #148]	; (800092c <MX_GPIO_Init+0xd0>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b23      	ldr	r3, [pc, #140]	; (800092c <MX_GPIO_Init+0xd0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	4b1f      	ldr	r3, [pc, #124]	; (800092c <MX_GPIO_Init+0xd0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a1e      	ldr	r2, [pc, #120]	; (800092c <MX_GPIO_Init+0xd0>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b1c      	ldr	r3, [pc, #112]	; (800092c <MX_GPIO_Init+0xd0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_GPIO_Init+0xd0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a17      	ldr	r2, [pc, #92]	; (800092c <MX_GPIO_Init+0xd0>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_GPIO_Init+0xd0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2122      	movs	r1, #34	; 0x22
 80008e6:	4812      	ldr	r0, [pc, #72]	; (8000930 <MX_GPIO_Init+0xd4>)
 80008e8:	f001 f83a 	bl	8001960 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	480c      	ldr	r0, [pc, #48]	; (8000934 <MX_GPIO_Init+0xd8>)
 8000904:	f000 fea8 	bl	8001658 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 8000908:	2322      	movs	r3, #34	; 0x22
 800090a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_GPIO_Init+0xd4>)
 8000920:	f000 fe9a 	bl	8001658 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	; 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800
 8000930:	40020000 	.word	0x40020000
 8000934:	40020800 	.word	0x40020800

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	e7fe      	b.n	8000940 <Error_Handler+0x8>
	...

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <HAL_MspInit+0x4c>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000958:	6453      	str	r3, [r2, #68]	; 0x44
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	4a08      	ldr	r2, [pc, #32]	; (8000990 <HAL_MspInit+0x4c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000982:	2007      	movs	r0, #7
 8000984:	f000 fe34 	bl	80015f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a17      	ldr	r2, [pc, #92]	; (8000a10 <HAL_ADC_MspInit+0x7c>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d127      	bne.n	8000a06 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <HAL_ADC_MspInit+0x80>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	4a15      	ldr	r2, [pc, #84]	; (8000a14 <HAL_ADC_MspInit+0x80>)
 80009c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c4:	6453      	str	r3, [r2, #68]	; 0x44
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <HAL_ADC_MspInit+0x80>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <HAL_ADC_MspInit+0x80>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <HAL_ADC_MspInit+0x80>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <HAL_ADC_MspInit+0x80>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ee:	2301      	movs	r3, #1
 80009f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f2:	2303      	movs	r3, #3
 80009f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	4805      	ldr	r0, [pc, #20]	; (8000a18 <HAL_ADC_MspInit+0x84>)
 8000a02:	f000 fe29 	bl	8001658 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a06:	bf00      	nop
 8000a08:	3728      	adds	r7, #40	; 0x28
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40012000 	.word	0x40012000
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40020000 	.word	0x40020000

08000a1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	; 0x28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a19      	ldr	r2, [pc, #100]	; (8000aa0 <HAL_UART_MspInit+0x84>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d12b      	bne.n	8000a96 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <HAL_UART_MspInit+0x88>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a17      	ldr	r2, [pc, #92]	; (8000aa4 <HAL_UART_MspInit+0x88>)
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <HAL_UART_MspInit+0x88>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <HAL_UART_MspInit+0x88>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a10      	ldr	r2, [pc, #64]	; (8000aa4 <HAL_UART_MspInit+0x88>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <HAL_UART_MspInit+0x88>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a76:	230c      	movs	r3, #12
 8000a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a86:	2307      	movs	r3, #7
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <HAL_UART_MspInit+0x8c>)
 8000a92:	f000 fde1 	bl	8001658 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a96:	bf00      	nop
 8000a98:	3728      	adds	r7, #40	; 0x28
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40004400 	.word	0x40004400
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020000 	.word	0x40020000

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <MemManage_Handler+0x4>

08000abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af8:	f000 f8c6 	bl	8000c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b08:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <_sbrk+0x5c>)
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <_sbrk+0x60>)
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b14:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <_sbrk+0x64>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <_sbrk+0x64>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <_sbrk+0x68>)
 8000b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d207      	bcs.n	8000b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b30:	f001 fffc 	bl	8002b2c <__errno>
 8000b34:	4603      	mov	r3, r0
 8000b36:	220c      	movs	r2, #12
 8000b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b3e:	e009      	b.n	8000b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <_sbrk+0x64>)
 8000b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b52:	68fb      	ldr	r3, [r7, #12]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20020000 	.word	0x20020000
 8000b60:	00000400 	.word	0x00000400
 8000b64:	20000108 	.word	0x20000108
 8000b68:	20000258 	.word	0x20000258

08000b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <SystemInit+0x20>)
 8000b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b76:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <SystemInit+0x20>)
 8000b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b94:	f7ff ffea 	bl	8000b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b9a:	490d      	ldr	r1, [pc, #52]	; (8000bd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	; (8000bd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bb0:	4c0a      	ldr	r4, [pc, #40]	; (8000bdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f001 ffbb 	bl	8002b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bc2:	f7ff fd07 	bl	80005d4 <main>
  bx  lr    
 8000bc6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bd4:	080034dc 	.word	0x080034dc
  ldr r2, =_sbss
 8000bd8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bdc:	20000258 	.word	0x20000258

08000be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be0:	e7fe      	b.n	8000be0 <ADC_IRQHandler>
	...

08000be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <HAL_Init+0x40>)
 8000bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <HAL_Init+0x40>)
 8000bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <HAL_Init+0x40>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_Init+0x40>)
 8000c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 fcef 	bl	80015f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f000 f808 	bl	8000c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c18:	f7ff fe94 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023c00 	.word	0x40023c00

08000c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x54>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_InitTick+0x58>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 fcf9 	bl	800163e <HAL_SYSTICK_Config>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e00e      	b.n	8000c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d80a      	bhi.n	8000c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c64:	f000 fccf 	bl	8001606 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c68:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <HAL_InitTick+0x5c>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e000      	b.n	8000c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000004 	.word	0x20000004

08000c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_IncTick+0x20>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x24>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <HAL_IncTick+0x24>)
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	2000010c 	.word	0x2000010c

08000cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <HAL_GetTick+0x14>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	2000010c 	.word	0x2000010c

08000cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd0:	f7ff ffee 	bl	8000cb0 <HAL_GetTick>
 8000cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ce0:	d005      	beq.n	8000cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <HAL_Delay+0x44>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4413      	add	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cee:	bf00      	nop
 8000cf0:	f7ff ffde 	bl	8000cb0 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d8f7      	bhi.n	8000cf0 <HAL_Delay+0x28>
  {
  }
}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000008 	.word	0x20000008

08000d10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d101      	bne.n	8000d26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e033      	b.n	8000d8e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d109      	bne.n	8000d42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff fe30 	bl	8000994 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	f003 0310 	and.w	r3, r3, #16
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d118      	bne.n	8000d80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d56:	f023 0302 	bic.w	r3, r3, #2
 8000d5a:	f043 0202 	orr.w	r2, r3, #2
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f000 fa96 	bl	8001294 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f023 0303 	bic.w	r3, r3, #3
 8000d76:	f043 0201 	orr.w	r2, r3, #1
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	641a      	str	r2, [r3, #64]	; 0x40
 8000d7e:	e001      	b.n	8000d84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d101      	bne.n	8000db2 <HAL_ADC_Start+0x1a>
 8000dae:	2302      	movs	r3, #2
 8000db0:	e097      	b.n	8000ee2 <HAL_ADC_Start+0x14a>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2201      	movs	r2, #1
 8000db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d018      	beq.n	8000dfa <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f042 0201 	orr.w	r2, r2, #1
 8000dd6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000dd8:	4b45      	ldr	r3, [pc, #276]	; (8000ef0 <HAL_ADC_Start+0x158>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a45      	ldr	r2, [pc, #276]	; (8000ef4 <HAL_ADC_Start+0x15c>)
 8000dde:	fba2 2303 	umull	r2, r3, r2, r3
 8000de2:	0c9a      	lsrs	r2, r3, #18
 8000de4:	4613      	mov	r3, r2
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	4413      	add	r3, r2
 8000dea:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000dec:	e002      	b.n	8000df4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	3b01      	subs	r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1f9      	bne.n	8000dee <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d15f      	bne.n	8000ec8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e10:	f023 0301 	bic.w	r3, r3, #1
 8000e14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d007      	beq.n	8000e3a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e46:	d106      	bne.n	8000e56 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4c:	f023 0206 	bic.w	r2, r3, #6
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	645a      	str	r2, [r3, #68]	; 0x44
 8000e54:	e002      	b.n	8000e5c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e64:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <HAL_ADC_Start+0x160>)
 8000e66:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000e70:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 031f 	and.w	r3, r3, #31
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d10f      	bne.n	8000e9e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d129      	bne.n	8000ee0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	e020      	b.n	8000ee0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a16      	ldr	r2, [pc, #88]	; (8000efc <HAL_ADC_Start+0x164>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d11b      	bne.n	8000ee0 <HAL_ADC_Start+0x148>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d114      	bne.n	8000ee0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	689a      	ldr	r2, [r3, #8]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	e00b      	b.n	8000ee0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	f043 0210 	orr.w	r2, r3, #16
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed8:	f043 0201 	orr.w	r2, r3, #1
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	431bde83 	.word	0x431bde83
 8000ef8:	40012300 	.word	0x40012300
 8000efc:	40012000 	.word	0x40012000

08000f00 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f1c:	d113      	bne.n	8000f46 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f2c:	d10b      	bne.n	8000f46 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f043 0220 	orr.w	r2, r3, #32
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e063      	b.n	800100e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f46:	f7ff feb3 	bl	8000cb0 <HAL_GetTick>
 8000f4a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f4c:	e021      	b.n	8000f92 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f54:	d01d      	beq.n	8000f92 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d007      	beq.n	8000f6c <HAL_ADC_PollForConversion+0x6c>
 8000f5c:	f7ff fea8 	bl	8000cb0 <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	683a      	ldr	r2, [r7, #0]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d212      	bcs.n	8000f92 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d00b      	beq.n	8000f92 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f043 0204 	orr.w	r2, r3, #4
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e03d      	b.n	800100e <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d1d6      	bne.n	8000f4e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f06f 0212 	mvn.w	r2, #18
 8000fa8:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d123      	bne.n	800100c <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d11f      	bne.n	800100c <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d006      	beq.n	8000fe8 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d111      	bne.n	800100c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d105      	bne.n	800100c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	f043 0201 	orr.w	r2, r3, #1
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001044:	2b01      	cmp	r3, #1
 8001046:	d101      	bne.n	800104c <HAL_ADC_ConfigChannel+0x1c>
 8001048:	2302      	movs	r3, #2
 800104a:	e113      	b.n	8001274 <HAL_ADC_ConfigChannel+0x244>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b09      	cmp	r3, #9
 800105a:	d925      	bls.n	80010a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	68d9      	ldr	r1, [r3, #12]
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	b29b      	uxth	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	4613      	mov	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	3b1e      	subs	r3, #30
 8001072:	2207      	movs	r2, #7
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43da      	mvns	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	400a      	ands	r2, r1
 8001080:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68d9      	ldr	r1, [r3, #12]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	b29b      	uxth	r3, r3
 8001092:	4618      	mov	r0, r3
 8001094:	4603      	mov	r3, r0
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4403      	add	r3, r0
 800109a:	3b1e      	subs	r3, #30
 800109c:	409a      	lsls	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	430a      	orrs	r2, r1
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	e022      	b.n	80010ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6919      	ldr	r1, [r3, #16]
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	461a      	mov	r2, r3
 80010b6:	4613      	mov	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	2207      	movs	r2, #7
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43da      	mvns	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	400a      	ands	r2, r1
 80010ca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6919      	ldr	r1, [r3, #16]
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	4603      	mov	r3, r0
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	4403      	add	r3, r0
 80010e4:	409a      	lsls	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	430a      	orrs	r2, r1
 80010ec:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d824      	bhi.n	8001140 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	3b05      	subs	r3, #5
 8001108:	221f      	movs	r2, #31
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	400a      	ands	r2, r1
 8001116:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	b29b      	uxth	r3, r3
 8001124:	4618      	mov	r0, r3
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	3b05      	subs	r3, #5
 8001132:	fa00 f203 	lsl.w	r2, r0, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	430a      	orrs	r2, r1
 800113c:	635a      	str	r2, [r3, #52]	; 0x34
 800113e:	e04c      	b.n	80011da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b0c      	cmp	r3, #12
 8001146:	d824      	bhi.n	8001192 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	4613      	mov	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	3b23      	subs	r3, #35	; 0x23
 800115a:	221f      	movs	r2, #31
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43da      	mvns	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	400a      	ands	r2, r1
 8001168:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	b29b      	uxth	r3, r3
 8001176:	4618      	mov	r0, r3
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	3b23      	subs	r3, #35	; 0x23
 8001184:	fa00 f203 	lsl.w	r2, r0, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	430a      	orrs	r2, r1
 800118e:	631a      	str	r2, [r3, #48]	; 0x30
 8001190:	e023      	b.n	80011da <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	3b41      	subs	r3, #65	; 0x41
 80011a4:	221f      	movs	r2, #31
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43da      	mvns	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	400a      	ands	r2, r1
 80011b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	4618      	mov	r0, r3
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	3b41      	subs	r3, #65	; 0x41
 80011ce:	fa00 f203 	lsl.w	r2, r0, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	430a      	orrs	r2, r1
 80011d8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011da:	4b29      	ldr	r3, [pc, #164]	; (8001280 <HAL_ADC_ConfigChannel+0x250>)
 80011dc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a28      	ldr	r2, [pc, #160]	; (8001284 <HAL_ADC_ConfigChannel+0x254>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d10f      	bne.n	8001208 <HAL_ADC_ConfigChannel+0x1d8>
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b12      	cmp	r3, #18
 80011ee:	d10b      	bne.n	8001208 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a1d      	ldr	r2, [pc, #116]	; (8001284 <HAL_ADC_ConfigChannel+0x254>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d12b      	bne.n	800126a <HAL_ADC_ConfigChannel+0x23a>
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a1c      	ldr	r2, [pc, #112]	; (8001288 <HAL_ADC_ConfigChannel+0x258>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d003      	beq.n	8001224 <HAL_ADC_ConfigChannel+0x1f4>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b11      	cmp	r3, #17
 8001222:	d122      	bne.n	800126a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a11      	ldr	r2, [pc, #68]	; (8001288 <HAL_ADC_ConfigChannel+0x258>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d111      	bne.n	800126a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <HAL_ADC_ConfigChannel+0x25c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a11      	ldr	r2, [pc, #68]	; (8001290 <HAL_ADC_ConfigChannel+0x260>)
 800124c:	fba2 2303 	umull	r2, r3, r2, r3
 8001250:	0c9a      	lsrs	r2, r3, #18
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800125c:	e002      	b.n	8001264 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	3b01      	subs	r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f9      	bne.n	800125e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	40012300 	.word	0x40012300
 8001284:	40012000 	.word	0x40012000
 8001288:	10000012 	.word	0x10000012
 800128c:	20000000 	.word	0x20000000
 8001290:	431bde83 	.word	0x431bde83

08001294 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800129c:	4b79      	ldr	r3, [pc, #484]	; (8001484 <ADC_Init+0x1f0>)
 800129e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	431a      	orrs	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6859      	ldr	r1, [r3, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	021a      	lsls	r2, r3, #8
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80012ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6859      	ldr	r1, [r3, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800130e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6899      	ldr	r1, [r3, #8]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001326:	4a58      	ldr	r2, [pc, #352]	; (8001488 <ADC_Init+0x1f4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d022      	beq.n	8001372 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800133a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6899      	ldr	r1, [r3, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800135c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6899      	ldr	r1, [r3, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	e00f      	b.n	8001392 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001380:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001390:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0202 	bic.w	r2, r2, #2
 80013a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6899      	ldr	r1, [r3, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7e1b      	ldrb	r3, [r3, #24]
 80013ac:	005a      	lsls	r2, r3, #1
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d01b      	beq.n	80013f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013ce:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80013de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6859      	ldr	r1, [r3, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	3b01      	subs	r3, #1
 80013ec:	035a      	lsls	r2, r3, #13
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	e007      	b.n	8001408 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001406:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001416:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	3b01      	subs	r3, #1
 8001424:	051a      	lsls	r2, r3, #20
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800143c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6899      	ldr	r1, [r3, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800144a:	025a      	lsls	r2, r3, #9
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001462:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6899      	ldr	r1, [r3, #8]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	029a      	lsls	r2, r3, #10
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	609a      	str	r2, [r3, #8]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	40012300 	.word	0x40012300
 8001488:	0f000001 	.word	0x0f000001

0800148c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a8:	4013      	ands	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014be:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	60d3      	str	r3, [r2, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <__NVIC_GetPriorityGrouping+0x18>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	f003 0307 	and.w	r3, r3, #7
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	6039      	str	r1, [r7, #0]
 80014fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	2b00      	cmp	r3, #0
 8001502:	db0a      	blt.n	800151a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	b2da      	uxtb	r2, r3
 8001508:	490c      	ldr	r1, [pc, #48]	; (800153c <__NVIC_SetPriority+0x4c>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	0112      	lsls	r2, r2, #4
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	440b      	add	r3, r1
 8001514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001518:	e00a      	b.n	8001530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4908      	ldr	r1, [pc, #32]	; (8001540 <__NVIC_SetPriority+0x50>)
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	3b04      	subs	r3, #4
 8001528:	0112      	lsls	r2, r2, #4
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	440b      	add	r3, r1
 800152e:	761a      	strb	r2, [r3, #24]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000e100 	.word	0xe000e100
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001544:	b480      	push	{r7}
 8001546:	b089      	sub	sp, #36	; 0x24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f1c3 0307 	rsb	r3, r3, #7
 800155e:	2b04      	cmp	r3, #4
 8001560:	bf28      	it	cs
 8001562:	2304      	movcs	r3, #4
 8001564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3304      	adds	r3, #4
 800156a:	2b06      	cmp	r3, #6
 800156c:	d902      	bls.n	8001574 <NVIC_EncodePriority+0x30>
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3b03      	subs	r3, #3
 8001572:	e000      	b.n	8001576 <NVIC_EncodePriority+0x32>
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	401a      	ands	r2, r3
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800158c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	43d9      	mvns	r1, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	4313      	orrs	r3, r2
         );
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3724      	adds	r7, #36	; 0x24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015bc:	d301      	bcc.n	80015c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015be:	2301      	movs	r3, #1
 80015c0:	e00f      	b.n	80015e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c2:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <SysTick_Config+0x40>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ca:	210f      	movs	r1, #15
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015d0:	f7ff ff8e 	bl	80014f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <SysTick_Config+0x40>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <SysTick_Config+0x40>)
 80015dc:	2207      	movs	r2, #7
 80015de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	e000e010 	.word	0xe000e010

080015f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ff47 	bl	800148c <__NVIC_SetPriorityGrouping>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001606:	b580      	push	{r7, lr}
 8001608:	b086      	sub	sp, #24
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001618:	f7ff ff5c 	bl	80014d4 <__NVIC_GetPriorityGrouping>
 800161c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	6978      	ldr	r0, [r7, #20]
 8001624:	f7ff ff8e 	bl	8001544 <NVIC_EncodePriority>
 8001628:	4602      	mov	r2, r0
 800162a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ff5d 	bl	80014f0 <__NVIC_SetPriority>
}
 8001636:	bf00      	nop
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ffb0 	bl	80015ac <SysTick_Config>
 800164c:	4603      	mov	r3, r0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001658:	b480      	push	{r7}
 800165a:	b089      	sub	sp, #36	; 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800166a:	2300      	movs	r3, #0
 800166c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	e159      	b.n	8001928 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001674:	2201      	movs	r2, #1
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	429a      	cmp	r2, r3
 800168e:	f040 8148 	bne.w	8001922 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	2b01      	cmp	r3, #1
 800169c:	d005      	beq.n	80016aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d130      	bne.n	800170c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	2203      	movs	r2, #3
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	68da      	ldr	r2, [r3, #12]
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016e0:	2201      	movs	r2, #1
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	f003 0201 	and.w	r2, r3, #1
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	2b03      	cmp	r3, #3
 8001716:	d017      	beq.n	8001748 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	2203      	movs	r2, #3
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d123      	bne.n	800179c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	08da      	lsrs	r2, r3, #3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3208      	adds	r2, #8
 800175c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001760:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	220f      	movs	r2, #15
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	691a      	ldr	r2, [r3, #16]
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	08da      	lsrs	r2, r3, #3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3208      	adds	r2, #8
 8001796:	69b9      	ldr	r1, [r7, #24]
 8001798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	2203      	movs	r2, #3
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 0203 	and.w	r2, r3, #3
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 80a2 	beq.w	8001922 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	4b57      	ldr	r3, [pc, #348]	; (8001940 <HAL_GPIO_Init+0x2e8>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	4a56      	ldr	r2, [pc, #344]	; (8001940 <HAL_GPIO_Init+0x2e8>)
 80017e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ec:	6453      	str	r3, [r2, #68]	; 0x44
 80017ee:	4b54      	ldr	r3, [pc, #336]	; (8001940 <HAL_GPIO_Init+0x2e8>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017fa:	4a52      	ldr	r2, [pc, #328]	; (8001944 <HAL_GPIO_Init+0x2ec>)
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	089b      	lsrs	r3, r3, #2
 8001800:	3302      	adds	r3, #2
 8001802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	220f      	movs	r2, #15
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a49      	ldr	r2, [pc, #292]	; (8001948 <HAL_GPIO_Init+0x2f0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d019      	beq.n	800185a <HAL_GPIO_Init+0x202>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a48      	ldr	r2, [pc, #288]	; (800194c <HAL_GPIO_Init+0x2f4>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d013      	beq.n	8001856 <HAL_GPIO_Init+0x1fe>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a47      	ldr	r2, [pc, #284]	; (8001950 <HAL_GPIO_Init+0x2f8>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d00d      	beq.n	8001852 <HAL_GPIO_Init+0x1fa>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a46      	ldr	r2, [pc, #280]	; (8001954 <HAL_GPIO_Init+0x2fc>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d007      	beq.n	800184e <HAL_GPIO_Init+0x1f6>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a45      	ldr	r2, [pc, #276]	; (8001958 <HAL_GPIO_Init+0x300>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d101      	bne.n	800184a <HAL_GPIO_Init+0x1f2>
 8001846:	2304      	movs	r3, #4
 8001848:	e008      	b.n	800185c <HAL_GPIO_Init+0x204>
 800184a:	2307      	movs	r3, #7
 800184c:	e006      	b.n	800185c <HAL_GPIO_Init+0x204>
 800184e:	2303      	movs	r3, #3
 8001850:	e004      	b.n	800185c <HAL_GPIO_Init+0x204>
 8001852:	2302      	movs	r3, #2
 8001854:	e002      	b.n	800185c <HAL_GPIO_Init+0x204>
 8001856:	2301      	movs	r3, #1
 8001858:	e000      	b.n	800185c <HAL_GPIO_Init+0x204>
 800185a:	2300      	movs	r3, #0
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	f002 0203 	and.w	r2, r2, #3
 8001862:	0092      	lsls	r2, r2, #2
 8001864:	4093      	lsls	r3, r2
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800186c:	4935      	ldr	r1, [pc, #212]	; (8001944 <HAL_GPIO_Init+0x2ec>)
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	089b      	lsrs	r3, r3, #2
 8001872:	3302      	adds	r3, #2
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800187a:	4b38      	ldr	r3, [pc, #224]	; (800195c <HAL_GPIO_Init+0x304>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	43db      	mvns	r3, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800189e:	4a2f      	ldr	r2, [pc, #188]	; (800195c <HAL_GPIO_Init+0x304>)
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018a4:	4b2d      	ldr	r3, [pc, #180]	; (800195c <HAL_GPIO_Init+0x304>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018c8:	4a24      	ldr	r2, [pc, #144]	; (800195c <HAL_GPIO_Init+0x304>)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018ce:	4b23      	ldr	r3, [pc, #140]	; (800195c <HAL_GPIO_Init+0x304>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	43db      	mvns	r3, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4013      	ands	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018f2:	4a1a      	ldr	r2, [pc, #104]	; (800195c <HAL_GPIO_Init+0x304>)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018f8:	4b18      	ldr	r3, [pc, #96]	; (800195c <HAL_GPIO_Init+0x304>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800191c:	4a0f      	ldr	r2, [pc, #60]	; (800195c <HAL_GPIO_Init+0x304>)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3301      	adds	r3, #1
 8001926:	61fb      	str	r3, [r7, #28]
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	2b0f      	cmp	r3, #15
 800192c:	f67f aea2 	bls.w	8001674 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3724      	adds	r7, #36	; 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800
 8001944:	40013800 	.word	0x40013800
 8001948:	40020000 	.word	0x40020000
 800194c:	40020400 	.word	0x40020400
 8001950:	40020800 	.word	0x40020800
 8001954:	40020c00 	.word	0x40020c00
 8001958:	40021000 	.word	0x40021000
 800195c:	40013c00 	.word	0x40013c00

08001960 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	807b      	strh	r3, [r7, #2]
 800196c:	4613      	mov	r3, r2
 800196e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001970:	787b      	ldrb	r3, [r7, #1]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001976:	887a      	ldrh	r2, [r7, #2]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800197c:	e003      	b.n	8001986 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800197e:	887b      	ldrh	r3, [r7, #2]
 8001980:	041a      	lsls	r2, r3, #16
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	619a      	str	r2, [r3, #24]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e267      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d075      	beq.n	8001a9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019b2:	4b88      	ldr	r3, [pc, #544]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d00c      	beq.n	80019d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019be:	4b85      	ldr	r3, [pc, #532]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d112      	bne.n	80019f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ca:	4b82      	ldr	r3, [pc, #520]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019d6:	d10b      	bne.n	80019f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d8:	4b7e      	ldr	r3, [pc, #504]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d05b      	beq.n	8001a9c <HAL_RCC_OscConfig+0x108>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d157      	bne.n	8001a9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e242      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f8:	d106      	bne.n	8001a08 <HAL_RCC_OscConfig+0x74>
 80019fa:	4b76      	ldr	r3, [pc, #472]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a75      	ldr	r2, [pc, #468]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	e01d      	b.n	8001a44 <HAL_RCC_OscConfig+0xb0>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x98>
 8001a12:	4b70      	ldr	r3, [pc, #448]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a6f      	ldr	r2, [pc, #444]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	4b6d      	ldr	r3, [pc, #436]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a6c      	ldr	r2, [pc, #432]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e00b      	b.n	8001a44 <HAL_RCC_OscConfig+0xb0>
 8001a2c:	4b69      	ldr	r3, [pc, #420]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a68      	ldr	r2, [pc, #416]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b66      	ldr	r3, [pc, #408]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a65      	ldr	r2, [pc, #404]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d013      	beq.n	8001a74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff f930 	bl	8000cb0 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a54:	f7ff f92c 	bl	8000cb0 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b64      	cmp	r3, #100	; 0x64
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e207      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a66:	4b5b      	ldr	r3, [pc, #364]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0xc0>
 8001a72:	e014      	b.n	8001a9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff f91c 	bl	8000cb0 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a7c:	f7ff f918 	bl	8000cb0 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b64      	cmp	r3, #100	; 0x64
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e1f3      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8e:	4b51      	ldr	r3, [pc, #324]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0xe8>
 8001a9a:	e000      	b.n	8001a9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d063      	beq.n	8001b72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aaa:	4b4a      	ldr	r3, [pc, #296]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00b      	beq.n	8001ace <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ab6:	4b47      	ldr	r3, [pc, #284]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d11c      	bne.n	8001afc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ac2:	4b44      	ldr	r3, [pc, #272]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d116      	bne.n	8001afc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ace:	4b41      	ldr	r3, [pc, #260]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d005      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x152>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d001      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e1c7      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae6:	4b3b      	ldr	r3, [pc, #236]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4937      	ldr	r1, [pc, #220]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afa:	e03a      	b.n	8001b72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d020      	beq.n	8001b46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b04:	4b34      	ldr	r3, [pc, #208]	; (8001bd8 <HAL_RCC_OscConfig+0x244>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0a:	f7ff f8d1 	bl	8000cb0 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b12:	f7ff f8cd 	bl	8000cb0 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e1a8      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b24:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b30:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	4925      	ldr	r1, [pc, #148]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	600b      	str	r3, [r1, #0]
 8001b44:	e015      	b.n	8001b72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b46:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <HAL_RCC_OscConfig+0x244>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff f8b0 	bl	8000cb0 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b54:	f7ff f8ac 	bl	8000cb0 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e187      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b66:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0308 	and.w	r3, r3, #8
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d036      	beq.n	8001bec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d016      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_RCC_OscConfig+0x248>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8c:	f7ff f890 	bl	8000cb0 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b94:	f7ff f88c 	bl	8000cb0 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e167      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <HAL_RCC_OscConfig+0x240>)
 8001ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x200>
 8001bb2:	e01b      	b.n	8001bec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_RCC_OscConfig+0x248>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bba:	f7ff f879 	bl	8000cb0 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc0:	e00e      	b.n	8001be0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc2:	f7ff f875 	bl	8000cb0 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d907      	bls.n	8001be0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e150      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	42470000 	.word	0x42470000
 8001bdc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be0:	4b88      	ldr	r3, [pc, #544]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1ea      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 8097 	beq.w	8001d28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfe:	4b81      	ldr	r3, [pc, #516]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10f      	bne.n	8001c2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	4b7d      	ldr	r3, [pc, #500]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	4a7c      	ldr	r2, [pc, #496]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c18:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1a:	4b7a      	ldr	r3, [pc, #488]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c26:	2301      	movs	r3, #1
 8001c28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2a:	4b77      	ldr	r3, [pc, #476]	; (8001e08 <HAL_RCC_OscConfig+0x474>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d118      	bne.n	8001c68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c36:	4b74      	ldr	r3, [pc, #464]	; (8001e08 <HAL_RCC_OscConfig+0x474>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a73      	ldr	r2, [pc, #460]	; (8001e08 <HAL_RCC_OscConfig+0x474>)
 8001c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c42:	f7ff f835 	bl	8000cb0 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c4a:	f7ff f831 	bl	8000cb0 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e10c      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5c:	4b6a      	ldr	r3, [pc, #424]	; (8001e08 <HAL_RCC_OscConfig+0x474>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f0      	beq.n	8001c4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d106      	bne.n	8001c7e <HAL_RCC_OscConfig+0x2ea>
 8001c70:	4b64      	ldr	r3, [pc, #400]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c74:	4a63      	ldr	r2, [pc, #396]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7c:	e01c      	b.n	8001cb8 <HAL_RCC_OscConfig+0x324>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2b05      	cmp	r3, #5
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x30c>
 8001c86:	4b5f      	ldr	r3, [pc, #380]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8a:	4a5e      	ldr	r2, [pc, #376]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001c8c:	f043 0304 	orr.w	r3, r3, #4
 8001c90:	6713      	str	r3, [r2, #112]	; 0x70
 8001c92:	4b5c      	ldr	r3, [pc, #368]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c96:	4a5b      	ldr	r2, [pc, #364]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9e:	e00b      	b.n	8001cb8 <HAL_RCC_OscConfig+0x324>
 8001ca0:	4b58      	ldr	r3, [pc, #352]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca4:	4a57      	ldr	r2, [pc, #348]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001ca6:	f023 0301 	bic.w	r3, r3, #1
 8001caa:	6713      	str	r3, [r2, #112]	; 0x70
 8001cac:	4b55      	ldr	r3, [pc, #340]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb0:	4a54      	ldr	r2, [pc, #336]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001cb2:	f023 0304 	bic.w	r3, r3, #4
 8001cb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d015      	beq.n	8001cec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc0:	f7fe fff6 	bl	8000cb0 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc6:	e00a      	b.n	8001cde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc8:	f7fe fff2 	bl	8000cb0 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e0cb      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cde:	4b49      	ldr	r3, [pc, #292]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0ee      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x334>
 8001cea:	e014      	b.n	8001d16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cec:	f7fe ffe0 	bl	8000cb0 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf2:	e00a      	b.n	8001d0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf4:	f7fe ffdc 	bl	8000cb0 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e0b5      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d0a:	4b3e      	ldr	r3, [pc, #248]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1ee      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d16:	7dfb      	ldrb	r3, [r7, #23]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d105      	bne.n	8001d28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d1c:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	4a38      	ldr	r2, [pc, #224]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001d22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 80a1 	beq.w	8001e74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d32:	4b34      	ldr	r3, [pc, #208]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d05c      	beq.n	8001df8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d141      	bne.n	8001dca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d46:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <HAL_RCC_OscConfig+0x478>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4c:	f7fe ffb0 	bl	8000cb0 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d54:	f7fe ffac 	bl	8000cb0 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e087      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d66:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69da      	ldr	r2, [r3, #28]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	019b      	lsls	r3, r3, #6
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d88:	085b      	lsrs	r3, r3, #1
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	041b      	lsls	r3, r3, #16
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	061b      	lsls	r3, r3, #24
 8001d96:	491b      	ldr	r1, [pc, #108]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <HAL_RCC_OscConfig+0x478>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7fe ff85 	bl	8000cb0 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001daa:	f7fe ff81 	bl	8000cb0 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e05c      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCC_OscConfig+0x416>
 8001dc8:	e054      	b.n	8001e74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <HAL_RCC_OscConfig+0x478>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7fe ff6e 	bl	8000cb0 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7fe ff6a 	bl	8000cb0 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e045      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_RCC_OscConfig+0x470>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x444>
 8001df6:	e03d      	b.n	8001e74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d107      	bne.n	8001e10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e038      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40007000 	.word	0x40007000
 8001e0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_RCC_OscConfig+0x4ec>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d028      	beq.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d121      	bne.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d11a      	bne.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e40:	4013      	ands	r3, r2
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d111      	bne.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e56:	085b      	lsrs	r3, r3, #1
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d107      	bne.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800

08001e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0cc      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e98:	4b68      	ldr	r3, [pc, #416]	; (800203c <HAL_RCC_ClockConfig+0x1b8>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d90c      	bls.n	8001ec0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b65      	ldr	r3, [pc, #404]	; (800203c <HAL_RCC_ClockConfig+0x1b8>)
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eae:	4b63      	ldr	r3, [pc, #396]	; (800203c <HAL_RCC_ClockConfig+0x1b8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d001      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0b8      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d020      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed8:	4b59      	ldr	r3, [pc, #356]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	4a58      	ldr	r2, [pc, #352]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ee2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ef0:	4b53      	ldr	r3, [pc, #332]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	4a52      	ldr	r2, [pc, #328]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001efa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001efc:	4b50      	ldr	r3, [pc, #320]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	494d      	ldr	r1, [pc, #308]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d044      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d107      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	4b47      	ldr	r3, [pc, #284]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d119      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e07f      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d003      	beq.n	8001f42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f42:	4b3f      	ldr	r3, [pc, #252]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d109      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e06f      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f52:	4b3b      	ldr	r3, [pc, #236]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e067      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f62:	4b37      	ldr	r3, [pc, #220]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f023 0203 	bic.w	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4934      	ldr	r1, [pc, #208]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f74:	f7fe fe9c 	bl	8000cb0 <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7c:	f7fe fe98 	bl	8000cb0 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e04f      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	4b2b      	ldr	r3, [pc, #172]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 020c 	and.w	r2, r3, #12
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d1eb      	bne.n	8001f7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b25      	ldr	r3, [pc, #148]	; (800203c <HAL_RCC_ClockConfig+0x1b8>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d20c      	bcs.n	8001fcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b22      	ldr	r3, [pc, #136]	; (800203c <HAL_RCC_ClockConfig+0x1b8>)
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b20      	ldr	r3, [pc, #128]	; (800203c <HAL_RCC_ClockConfig+0x1b8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e032      	b.n	8002032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd8:	4b19      	ldr	r3, [pc, #100]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4916      	ldr	r1, [pc, #88]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ff6:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	490e      	ldr	r1, [pc, #56]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	4313      	orrs	r3, r2
 8002008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800200a:	f000 f821 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 800200e:	4602      	mov	r2, r0
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	490a      	ldr	r1, [pc, #40]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 800201c:	5ccb      	ldrb	r3, [r1, r3]
 800201e:	fa22 f303 	lsr.w	r3, r2, r3
 8002022:	4a09      	ldr	r2, [pc, #36]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <HAL_RCC_ClockConfig+0x1c8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fdfc 	bl	8000c28 <HAL_InitTick>

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40023c00 	.word	0x40023c00
 8002040:	40023800 	.word	0x40023800
 8002044:	08003480 	.word	0x08003480
 8002048:	20000000 	.word	0x20000000
 800204c:	20000004 	.word	0x20000004

08002050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002054:	b094      	sub	sp, #80	; 0x50
 8002056:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	647b      	str	r3, [r7, #68]	; 0x44
 800205c:	2300      	movs	r3, #0
 800205e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002060:	2300      	movs	r3, #0
 8002062:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002068:	4b79      	ldr	r3, [pc, #484]	; (8002250 <HAL_RCC_GetSysClockFreq+0x200>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 030c 	and.w	r3, r3, #12
 8002070:	2b08      	cmp	r3, #8
 8002072:	d00d      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0x40>
 8002074:	2b08      	cmp	r3, #8
 8002076:	f200 80e1 	bhi.w	800223c <HAL_RCC_GetSysClockFreq+0x1ec>
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <HAL_RCC_GetSysClockFreq+0x34>
 800207e:	2b04      	cmp	r3, #4
 8002080:	d003      	beq.n	800208a <HAL_RCC_GetSysClockFreq+0x3a>
 8002082:	e0db      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002084:	4b73      	ldr	r3, [pc, #460]	; (8002254 <HAL_RCC_GetSysClockFreq+0x204>)
 8002086:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002088:	e0db      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800208a:	4b73      	ldr	r3, [pc, #460]	; (8002258 <HAL_RCC_GetSysClockFreq+0x208>)
 800208c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800208e:	e0d8      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002090:	4b6f      	ldr	r3, [pc, #444]	; (8002250 <HAL_RCC_GetSysClockFreq+0x200>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002098:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800209a:	4b6d      	ldr	r3, [pc, #436]	; (8002250 <HAL_RCC_GetSysClockFreq+0x200>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d063      	beq.n	800216e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a6:	4b6a      	ldr	r3, [pc, #424]	; (8002250 <HAL_RCC_GetSysClockFreq+0x200>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	099b      	lsrs	r3, r3, #6
 80020ac:	2200      	movs	r2, #0
 80020ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80020b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80020b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020b8:	633b      	str	r3, [r7, #48]	; 0x30
 80020ba:	2300      	movs	r3, #0
 80020bc:	637b      	str	r3, [r7, #52]	; 0x34
 80020be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80020c2:	4622      	mov	r2, r4
 80020c4:	462b      	mov	r3, r5
 80020c6:	f04f 0000 	mov.w	r0, #0
 80020ca:	f04f 0100 	mov.w	r1, #0
 80020ce:	0159      	lsls	r1, r3, #5
 80020d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020d4:	0150      	lsls	r0, r2, #5
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4621      	mov	r1, r4
 80020dc:	1a51      	subs	r1, r2, r1
 80020de:	6139      	str	r1, [r7, #16]
 80020e0:	4629      	mov	r1, r5
 80020e2:	eb63 0301 	sbc.w	r3, r3, r1
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020f4:	4659      	mov	r1, fp
 80020f6:	018b      	lsls	r3, r1, #6
 80020f8:	4651      	mov	r1, sl
 80020fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020fe:	4651      	mov	r1, sl
 8002100:	018a      	lsls	r2, r1, #6
 8002102:	4651      	mov	r1, sl
 8002104:	ebb2 0801 	subs.w	r8, r2, r1
 8002108:	4659      	mov	r1, fp
 800210a:	eb63 0901 	sbc.w	r9, r3, r1
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800211a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800211e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002122:	4690      	mov	r8, r2
 8002124:	4699      	mov	r9, r3
 8002126:	4623      	mov	r3, r4
 8002128:	eb18 0303 	adds.w	r3, r8, r3
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	462b      	mov	r3, r5
 8002130:	eb49 0303 	adc.w	r3, r9, r3
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002142:	4629      	mov	r1, r5
 8002144:	024b      	lsls	r3, r1, #9
 8002146:	4621      	mov	r1, r4
 8002148:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800214c:	4621      	mov	r1, r4
 800214e:	024a      	lsls	r2, r1, #9
 8002150:	4610      	mov	r0, r2
 8002152:	4619      	mov	r1, r3
 8002154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002156:	2200      	movs	r2, #0
 8002158:	62bb      	str	r3, [r7, #40]	; 0x28
 800215a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800215c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002160:	f7fe f896 	bl	8000290 <__aeabi_uldivmod>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4613      	mov	r3, r2
 800216a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800216c:	e058      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800216e:	4b38      	ldr	r3, [pc, #224]	; (8002250 <HAL_RCC_GetSysClockFreq+0x200>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	099b      	lsrs	r3, r3, #6
 8002174:	2200      	movs	r2, #0
 8002176:	4618      	mov	r0, r3
 8002178:	4611      	mov	r1, r2
 800217a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800217e:	623b      	str	r3, [r7, #32]
 8002180:	2300      	movs	r3, #0
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
 8002184:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002188:	4642      	mov	r2, r8
 800218a:	464b      	mov	r3, r9
 800218c:	f04f 0000 	mov.w	r0, #0
 8002190:	f04f 0100 	mov.w	r1, #0
 8002194:	0159      	lsls	r1, r3, #5
 8002196:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800219a:	0150      	lsls	r0, r2, #5
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4641      	mov	r1, r8
 80021a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80021a6:	4649      	mov	r1, r9
 80021a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	f04f 0300 	mov.w	r3, #0
 80021b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021c0:	ebb2 040a 	subs.w	r4, r2, sl
 80021c4:	eb63 050b 	sbc.w	r5, r3, fp
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	00eb      	lsls	r3, r5, #3
 80021d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021d6:	00e2      	lsls	r2, r4, #3
 80021d8:	4614      	mov	r4, r2
 80021da:	461d      	mov	r5, r3
 80021dc:	4643      	mov	r3, r8
 80021de:	18e3      	adds	r3, r4, r3
 80021e0:	603b      	str	r3, [r7, #0]
 80021e2:	464b      	mov	r3, r9
 80021e4:	eb45 0303 	adc.w	r3, r5, r3
 80021e8:	607b      	str	r3, [r7, #4]
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	f04f 0300 	mov.w	r3, #0
 80021f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021f6:	4629      	mov	r1, r5
 80021f8:	028b      	lsls	r3, r1, #10
 80021fa:	4621      	mov	r1, r4
 80021fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002200:	4621      	mov	r1, r4
 8002202:	028a      	lsls	r2, r1, #10
 8002204:	4610      	mov	r0, r2
 8002206:	4619      	mov	r1, r3
 8002208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800220a:	2200      	movs	r2, #0
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	61fa      	str	r2, [r7, #28]
 8002210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002214:	f7fe f83c 	bl	8000290 <__aeabi_uldivmod>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4613      	mov	r3, r2
 800221e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <HAL_RCC_GetSysClockFreq+0x200>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	0c1b      	lsrs	r3, r3, #16
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	3301      	adds	r3, #1
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002230:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002234:	fbb2 f3f3 	udiv	r3, r2, r3
 8002238:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800223a:	e002      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <HAL_RCC_GetSysClockFreq+0x204>)
 800223e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002244:	4618      	mov	r0, r3
 8002246:	3750      	adds	r7, #80	; 0x50
 8002248:	46bd      	mov	sp, r7
 800224a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800
 8002254:	00f42400 	.word	0x00f42400
 8002258:	007a1200 	.word	0x007a1200

0800225c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002260:	4b03      	ldr	r3, [pc, #12]	; (8002270 <HAL_RCC_GetHCLKFreq+0x14>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20000000 	.word	0x20000000

08002274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002278:	f7ff fff0 	bl	800225c <HAL_RCC_GetHCLKFreq>
 800227c:	4602      	mov	r2, r0
 800227e:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	0a9b      	lsrs	r3, r3, #10
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	4903      	ldr	r1, [pc, #12]	; (8002298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800228a:	5ccb      	ldrb	r3, [r1, r3]
 800228c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002290:	4618      	mov	r0, r3
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40023800 	.word	0x40023800
 8002298:	08003490 	.word	0x08003490

0800229c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022a0:	f7ff ffdc 	bl	800225c <HAL_RCC_GetHCLKFreq>
 80022a4:	4602      	mov	r2, r0
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	0b5b      	lsrs	r3, r3, #13
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	4903      	ldr	r1, [pc, #12]	; (80022c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022b2:	5ccb      	ldrb	r3, [r1, r3]
 80022b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40023800 	.word	0x40023800
 80022c0:	08003490 	.word	0x08003490

080022c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e042      	b.n	800235c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe fb96 	bl	8000a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2224      	movs	r2, #36	; 0x24
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002306:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f973 	bl	80025f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800231c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800232c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800233c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08a      	sub	sp, #40	; 0x28
 8002368:	af02      	add	r7, sp, #8
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	4613      	mov	r3, r2
 8002372:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b20      	cmp	r3, #32
 8002382:	d175      	bne.n	8002470 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <HAL_UART_Transmit+0x2c>
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e06e      	b.n	8002472 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2221      	movs	r2, #33	; 0x21
 800239e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023a2:	f7fe fc85 	bl	8000cb0 <HAL_GetTick>
 80023a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	88fa      	ldrh	r2, [r7, #6]
 80023ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	88fa      	ldrh	r2, [r7, #6]
 80023b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023bc:	d108      	bne.n	80023d0 <HAL_UART_Transmit+0x6c>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d104      	bne.n	80023d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	61bb      	str	r3, [r7, #24]
 80023ce:	e003      	b.n	80023d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023d8:	e02e      	b.n	8002438 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2200      	movs	r2, #0
 80023e2:	2180      	movs	r1, #128	; 0x80
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f848 	bl	800247a <UART_WaitOnFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e03a      	b.n	8002472 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10b      	bne.n	800241a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002410:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	3302      	adds	r3, #2
 8002416:	61bb      	str	r3, [r7, #24]
 8002418:	e007      	b.n	800242a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	781a      	ldrb	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	3301      	adds	r3, #1
 8002428:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800242e:	b29b      	uxth	r3, r3
 8002430:	3b01      	subs	r3, #1
 8002432:	b29a      	uxth	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800243c:	b29b      	uxth	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1cb      	bne.n	80023da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2200      	movs	r2, #0
 800244a:	2140      	movs	r1, #64	; 0x40
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 f814 	bl	800247a <UART_WaitOnFlagUntilTimeout>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e006      	b.n	8002472 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	e000      	b.n	8002472 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002470:	2302      	movs	r3, #2
  }
}
 8002472:	4618      	mov	r0, r3
 8002474:	3720      	adds	r7, #32
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b086      	sub	sp, #24
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	603b      	str	r3, [r7, #0]
 8002486:	4613      	mov	r3, r2
 8002488:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800248a:	e03b      	b.n	8002504 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002492:	d037      	beq.n	8002504 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002494:	f7fe fc0c 	bl	8000cb0 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	6a3a      	ldr	r2, [r7, #32]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d302      	bcc.n	80024aa <UART_WaitOnFlagUntilTimeout+0x30>
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e03a      	b.n	8002524 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d023      	beq.n	8002504 <UART_WaitOnFlagUntilTimeout+0x8a>
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b80      	cmp	r3, #128	; 0x80
 80024c0:	d020      	beq.n	8002504 <UART_WaitOnFlagUntilTimeout+0x8a>
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b40      	cmp	r3, #64	; 0x40
 80024c6:	d01d      	beq.n	8002504 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d116      	bne.n	8002504 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 f81d 	bl	800252c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2208      	movs	r2, #8
 80024f6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e00f      	b.n	8002524 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	4013      	ands	r3, r2
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	429a      	cmp	r2, r3
 8002512:	bf0c      	ite	eq
 8002514:	2301      	moveq	r3, #1
 8002516:	2300      	movne	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	429a      	cmp	r2, r3
 8002520:	d0b4      	beq.n	800248c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800252c:	b480      	push	{r7}
 800252e:	b095      	sub	sp, #84	; 0x54
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	330c      	adds	r3, #12
 800253a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800253c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800253e:	e853 3f00 	ldrex	r3, [r3]
 8002542:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002546:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800254a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	330c      	adds	r3, #12
 8002552:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002554:	643a      	str	r2, [r7, #64]	; 0x40
 8002556:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002558:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800255a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800255c:	e841 2300 	strex	r3, r2, [r1]
 8002560:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1e5      	bne.n	8002534 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	3314      	adds	r3, #20
 800256e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	e853 3f00 	ldrex	r3, [r3]
 8002576:	61fb      	str	r3, [r7, #28]
   return(result);
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f023 0301 	bic.w	r3, r3, #1
 800257e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	3314      	adds	r3, #20
 8002586:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002588:	62fa      	str	r2, [r7, #44]	; 0x2c
 800258a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800258c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800258e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002590:	e841 2300 	strex	r3, r2, [r1]
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1e5      	bne.n	8002568 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d119      	bne.n	80025d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	330c      	adds	r3, #12
 80025aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	e853 3f00 	ldrex	r3, [r3]
 80025b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f023 0310 	bic.w	r3, r3, #16
 80025ba:	647b      	str	r3, [r7, #68]	; 0x44
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	330c      	adds	r3, #12
 80025c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025c4:	61ba      	str	r2, [r7, #24]
 80025c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c8:	6979      	ldr	r1, [r7, #20]
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	e841 2300 	strex	r3, r2, [r1]
 80025d0:	613b      	str	r3, [r7, #16]
   return(result);
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1e5      	bne.n	80025a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80025e6:	bf00      	nop
 80025e8:	3754      	adds	r7, #84	; 0x54
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
	...

080025f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025f8:	b0c0      	sub	sp, #256	; 0x100
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800260c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002610:	68d9      	ldr	r1, [r3, #12]
 8002612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	ea40 0301 	orr.w	r3, r0, r1
 800261c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800261e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	431a      	orrs	r2, r3
 800262c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	431a      	orrs	r2, r3
 8002634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800264c:	f021 010c 	bic.w	r1, r1, #12
 8002650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800265a:	430b      	orrs	r3, r1
 800265c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800265e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800266a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800266e:	6999      	ldr	r1, [r3, #24]
 8002670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	ea40 0301 	orr.w	r3, r0, r1
 800267a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800267c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	4b8f      	ldr	r3, [pc, #572]	; (80028c0 <UART_SetConfig+0x2cc>)
 8002684:	429a      	cmp	r2, r3
 8002686:	d005      	beq.n	8002694 <UART_SetConfig+0xa0>
 8002688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	4b8d      	ldr	r3, [pc, #564]	; (80028c4 <UART_SetConfig+0x2d0>)
 8002690:	429a      	cmp	r2, r3
 8002692:	d104      	bne.n	800269e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002694:	f7ff fe02 	bl	800229c <HAL_RCC_GetPCLK2Freq>
 8002698:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800269c:	e003      	b.n	80026a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800269e:	f7ff fde9 	bl	8002274 <HAL_RCC_GetPCLK1Freq>
 80026a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026b0:	f040 810c 	bne.w	80028cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026b8:	2200      	movs	r2, #0
 80026ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80026c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80026c6:	4622      	mov	r2, r4
 80026c8:	462b      	mov	r3, r5
 80026ca:	1891      	adds	r1, r2, r2
 80026cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80026ce:	415b      	adcs	r3, r3
 80026d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80026d6:	4621      	mov	r1, r4
 80026d8:	eb12 0801 	adds.w	r8, r2, r1
 80026dc:	4629      	mov	r1, r5
 80026de:	eb43 0901 	adc.w	r9, r3, r1
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026f6:	4690      	mov	r8, r2
 80026f8:	4699      	mov	r9, r3
 80026fa:	4623      	mov	r3, r4
 80026fc:	eb18 0303 	adds.w	r3, r8, r3
 8002700:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002704:	462b      	mov	r3, r5
 8002706:	eb49 0303 	adc.w	r3, r9, r3
 800270a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800270e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800271a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800271e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002722:	460b      	mov	r3, r1
 8002724:	18db      	adds	r3, r3, r3
 8002726:	653b      	str	r3, [r7, #80]	; 0x50
 8002728:	4613      	mov	r3, r2
 800272a:	eb42 0303 	adc.w	r3, r2, r3
 800272e:	657b      	str	r3, [r7, #84]	; 0x54
 8002730:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002734:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002738:	f7fd fdaa 	bl	8000290 <__aeabi_uldivmod>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4b61      	ldr	r3, [pc, #388]	; (80028c8 <UART_SetConfig+0x2d4>)
 8002742:	fba3 2302 	umull	r2, r3, r3, r2
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	011c      	lsls	r4, r3, #4
 800274a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800274e:	2200      	movs	r2, #0
 8002750:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002754:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002758:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800275c:	4642      	mov	r2, r8
 800275e:	464b      	mov	r3, r9
 8002760:	1891      	adds	r1, r2, r2
 8002762:	64b9      	str	r1, [r7, #72]	; 0x48
 8002764:	415b      	adcs	r3, r3
 8002766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002768:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800276c:	4641      	mov	r1, r8
 800276e:	eb12 0a01 	adds.w	sl, r2, r1
 8002772:	4649      	mov	r1, r9
 8002774:	eb43 0b01 	adc.w	fp, r3, r1
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002784:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002788:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800278c:	4692      	mov	sl, r2
 800278e:	469b      	mov	fp, r3
 8002790:	4643      	mov	r3, r8
 8002792:	eb1a 0303 	adds.w	r3, sl, r3
 8002796:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800279a:	464b      	mov	r3, r9
 800279c:	eb4b 0303 	adc.w	r3, fp, r3
 80027a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80027a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80027b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80027b8:	460b      	mov	r3, r1
 80027ba:	18db      	adds	r3, r3, r3
 80027bc:	643b      	str	r3, [r7, #64]	; 0x40
 80027be:	4613      	mov	r3, r2
 80027c0:	eb42 0303 	adc.w	r3, r2, r3
 80027c4:	647b      	str	r3, [r7, #68]	; 0x44
 80027c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80027ce:	f7fd fd5f 	bl	8000290 <__aeabi_uldivmod>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4611      	mov	r1, r2
 80027d8:	4b3b      	ldr	r3, [pc, #236]	; (80028c8 <UART_SetConfig+0x2d4>)
 80027da:	fba3 2301 	umull	r2, r3, r3, r1
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	2264      	movs	r2, #100	; 0x64
 80027e2:	fb02 f303 	mul.w	r3, r2, r3
 80027e6:	1acb      	subs	r3, r1, r3
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80027ee:	4b36      	ldr	r3, [pc, #216]	; (80028c8 <UART_SetConfig+0x2d4>)
 80027f0:	fba3 2302 	umull	r2, r3, r3, r2
 80027f4:	095b      	lsrs	r3, r3, #5
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027fc:	441c      	add	r4, r3
 80027fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002802:	2200      	movs	r2, #0
 8002804:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002808:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800280c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002810:	4642      	mov	r2, r8
 8002812:	464b      	mov	r3, r9
 8002814:	1891      	adds	r1, r2, r2
 8002816:	63b9      	str	r1, [r7, #56]	; 0x38
 8002818:	415b      	adcs	r3, r3
 800281a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800281c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002820:	4641      	mov	r1, r8
 8002822:	1851      	adds	r1, r2, r1
 8002824:	6339      	str	r1, [r7, #48]	; 0x30
 8002826:	4649      	mov	r1, r9
 8002828:	414b      	adcs	r3, r1
 800282a:	637b      	str	r3, [r7, #52]	; 0x34
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002838:	4659      	mov	r1, fp
 800283a:	00cb      	lsls	r3, r1, #3
 800283c:	4651      	mov	r1, sl
 800283e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002842:	4651      	mov	r1, sl
 8002844:	00ca      	lsls	r2, r1, #3
 8002846:	4610      	mov	r0, r2
 8002848:	4619      	mov	r1, r3
 800284a:	4603      	mov	r3, r0
 800284c:	4642      	mov	r2, r8
 800284e:	189b      	adds	r3, r3, r2
 8002850:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002854:	464b      	mov	r3, r9
 8002856:	460a      	mov	r2, r1
 8002858:	eb42 0303 	adc.w	r3, r2, r3
 800285c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800286c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002870:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002874:	460b      	mov	r3, r1
 8002876:	18db      	adds	r3, r3, r3
 8002878:	62bb      	str	r3, [r7, #40]	; 0x28
 800287a:	4613      	mov	r3, r2
 800287c:	eb42 0303 	adc.w	r3, r2, r3
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002882:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002886:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800288a:	f7fd fd01 	bl	8000290 <__aeabi_uldivmod>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <UART_SetConfig+0x2d4>)
 8002894:	fba3 1302 	umull	r1, r3, r3, r2
 8002898:	095b      	lsrs	r3, r3, #5
 800289a:	2164      	movs	r1, #100	; 0x64
 800289c:	fb01 f303 	mul.w	r3, r1, r3
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	3332      	adds	r3, #50	; 0x32
 80028a6:	4a08      	ldr	r2, [pc, #32]	; (80028c8 <UART_SetConfig+0x2d4>)
 80028a8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ac:	095b      	lsrs	r3, r3, #5
 80028ae:	f003 0207 	and.w	r2, r3, #7
 80028b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4422      	add	r2, r4
 80028ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028bc:	e106      	b.n	8002acc <UART_SetConfig+0x4d8>
 80028be:	bf00      	nop
 80028c0:	40011000 	.word	0x40011000
 80028c4:	40011400 	.word	0x40011400
 80028c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028d0:	2200      	movs	r2, #0
 80028d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80028d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80028da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80028de:	4642      	mov	r2, r8
 80028e0:	464b      	mov	r3, r9
 80028e2:	1891      	adds	r1, r2, r2
 80028e4:	6239      	str	r1, [r7, #32]
 80028e6:	415b      	adcs	r3, r3
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028ee:	4641      	mov	r1, r8
 80028f0:	1854      	adds	r4, r2, r1
 80028f2:	4649      	mov	r1, r9
 80028f4:	eb43 0501 	adc.w	r5, r3, r1
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	00eb      	lsls	r3, r5, #3
 8002902:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002906:	00e2      	lsls	r2, r4, #3
 8002908:	4614      	mov	r4, r2
 800290a:	461d      	mov	r5, r3
 800290c:	4643      	mov	r3, r8
 800290e:	18e3      	adds	r3, r4, r3
 8002910:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002914:	464b      	mov	r3, r9
 8002916:	eb45 0303 	adc.w	r3, r5, r3
 800291a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800291e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800292a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800293a:	4629      	mov	r1, r5
 800293c:	008b      	lsls	r3, r1, #2
 800293e:	4621      	mov	r1, r4
 8002940:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002944:	4621      	mov	r1, r4
 8002946:	008a      	lsls	r2, r1, #2
 8002948:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800294c:	f7fd fca0 	bl	8000290 <__aeabi_uldivmod>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4b60      	ldr	r3, [pc, #384]	; (8002ad8 <UART_SetConfig+0x4e4>)
 8002956:	fba3 2302 	umull	r2, r3, r3, r2
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	011c      	lsls	r4, r3, #4
 800295e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002962:	2200      	movs	r2, #0
 8002964:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002968:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800296c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002970:	4642      	mov	r2, r8
 8002972:	464b      	mov	r3, r9
 8002974:	1891      	adds	r1, r2, r2
 8002976:	61b9      	str	r1, [r7, #24]
 8002978:	415b      	adcs	r3, r3
 800297a:	61fb      	str	r3, [r7, #28]
 800297c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002980:	4641      	mov	r1, r8
 8002982:	1851      	adds	r1, r2, r1
 8002984:	6139      	str	r1, [r7, #16]
 8002986:	4649      	mov	r1, r9
 8002988:	414b      	adcs	r3, r1
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002998:	4659      	mov	r1, fp
 800299a:	00cb      	lsls	r3, r1, #3
 800299c:	4651      	mov	r1, sl
 800299e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029a2:	4651      	mov	r1, sl
 80029a4:	00ca      	lsls	r2, r1, #3
 80029a6:	4610      	mov	r0, r2
 80029a8:	4619      	mov	r1, r3
 80029aa:	4603      	mov	r3, r0
 80029ac:	4642      	mov	r2, r8
 80029ae:	189b      	adds	r3, r3, r2
 80029b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029b4:	464b      	mov	r3, r9
 80029b6:	460a      	mov	r2, r1
 80029b8:	eb42 0303 	adc.w	r3, r2, r3
 80029bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80029ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80029d8:	4649      	mov	r1, r9
 80029da:	008b      	lsls	r3, r1, #2
 80029dc:	4641      	mov	r1, r8
 80029de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029e2:	4641      	mov	r1, r8
 80029e4:	008a      	lsls	r2, r1, #2
 80029e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80029ea:	f7fd fc51 	bl	8000290 <__aeabi_uldivmod>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	4611      	mov	r1, r2
 80029f4:	4b38      	ldr	r3, [pc, #224]	; (8002ad8 <UART_SetConfig+0x4e4>)
 80029f6:	fba3 2301 	umull	r2, r3, r3, r1
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	2264      	movs	r2, #100	; 0x64
 80029fe:	fb02 f303 	mul.w	r3, r2, r3
 8002a02:	1acb      	subs	r3, r1, r3
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	3332      	adds	r3, #50	; 0x32
 8002a08:	4a33      	ldr	r2, [pc, #204]	; (8002ad8 <UART_SetConfig+0x4e4>)
 8002a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a14:	441c      	add	r4, r3
 8002a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	673b      	str	r3, [r7, #112]	; 0x70
 8002a1e:	677a      	str	r2, [r7, #116]	; 0x74
 8002a20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a24:	4642      	mov	r2, r8
 8002a26:	464b      	mov	r3, r9
 8002a28:	1891      	adds	r1, r2, r2
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	415b      	adcs	r3, r3
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a34:	4641      	mov	r1, r8
 8002a36:	1851      	adds	r1, r2, r1
 8002a38:	6039      	str	r1, [r7, #0]
 8002a3a:	4649      	mov	r1, r9
 8002a3c:	414b      	adcs	r3, r1
 8002a3e:	607b      	str	r3, [r7, #4]
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a4c:	4659      	mov	r1, fp
 8002a4e:	00cb      	lsls	r3, r1, #3
 8002a50:	4651      	mov	r1, sl
 8002a52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a56:	4651      	mov	r1, sl
 8002a58:	00ca      	lsls	r2, r1, #3
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4603      	mov	r3, r0
 8002a60:	4642      	mov	r2, r8
 8002a62:	189b      	adds	r3, r3, r2
 8002a64:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a66:	464b      	mov	r3, r9
 8002a68:	460a      	mov	r2, r1
 8002a6a:	eb42 0303 	adc.w	r3, r2, r3
 8002a6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	663b      	str	r3, [r7, #96]	; 0x60
 8002a7a:	667a      	str	r2, [r7, #100]	; 0x64
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a88:	4649      	mov	r1, r9
 8002a8a:	008b      	lsls	r3, r1, #2
 8002a8c:	4641      	mov	r1, r8
 8002a8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a92:	4641      	mov	r1, r8
 8002a94:	008a      	lsls	r2, r1, #2
 8002a96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a9a:	f7fd fbf9 	bl	8000290 <__aeabi_uldivmod>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <UART_SetConfig+0x4e4>)
 8002aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8002aa8:	095b      	lsrs	r3, r3, #5
 8002aaa:	2164      	movs	r1, #100	; 0x64
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	3332      	adds	r3, #50	; 0x32
 8002ab6:	4a08      	ldr	r2, [pc, #32]	; (8002ad8 <UART_SetConfig+0x4e4>)
 8002ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	f003 020f 	and.w	r2, r3, #15
 8002ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4422      	add	r2, r4
 8002aca:	609a      	str	r2, [r3, #8]
}
 8002acc:	bf00      	nop
 8002ace:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ad8:	51eb851f 	.word	0x51eb851f

08002adc <siprintf>:
 8002adc:	b40e      	push	{r1, r2, r3}
 8002ade:	b500      	push	{lr}
 8002ae0:	b09c      	sub	sp, #112	; 0x70
 8002ae2:	ab1d      	add	r3, sp, #116	; 0x74
 8002ae4:	9002      	str	r0, [sp, #8]
 8002ae6:	9006      	str	r0, [sp, #24]
 8002ae8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002aec:	4809      	ldr	r0, [pc, #36]	; (8002b14 <siprintf+0x38>)
 8002aee:	9107      	str	r1, [sp, #28]
 8002af0:	9104      	str	r1, [sp, #16]
 8002af2:	4909      	ldr	r1, [pc, #36]	; (8002b18 <siprintf+0x3c>)
 8002af4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002af8:	9105      	str	r1, [sp, #20]
 8002afa:	6800      	ldr	r0, [r0, #0]
 8002afc:	9301      	str	r3, [sp, #4]
 8002afe:	a902      	add	r1, sp, #8
 8002b00:	f000 f89a 	bl	8002c38 <_svfiprintf_r>
 8002b04:	9b02      	ldr	r3, [sp, #8]
 8002b06:	2200      	movs	r2, #0
 8002b08:	701a      	strb	r2, [r3, #0]
 8002b0a:	b01c      	add	sp, #112	; 0x70
 8002b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b10:	b003      	add	sp, #12
 8002b12:	4770      	bx	lr
 8002b14:	20000058 	.word	0x20000058
 8002b18:	ffff0208 	.word	0xffff0208

08002b1c <memset>:
 8002b1c:	4402      	add	r2, r0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d100      	bne.n	8002b26 <memset+0xa>
 8002b24:	4770      	bx	lr
 8002b26:	f803 1b01 	strb.w	r1, [r3], #1
 8002b2a:	e7f9      	b.n	8002b20 <memset+0x4>

08002b2c <__errno>:
 8002b2c:	4b01      	ldr	r3, [pc, #4]	; (8002b34 <__errno+0x8>)
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	20000058 	.word	0x20000058

08002b38 <__libc_init_array>:
 8002b38:	b570      	push	{r4, r5, r6, lr}
 8002b3a:	4d0d      	ldr	r5, [pc, #52]	; (8002b70 <__libc_init_array+0x38>)
 8002b3c:	4c0d      	ldr	r4, [pc, #52]	; (8002b74 <__libc_init_array+0x3c>)
 8002b3e:	1b64      	subs	r4, r4, r5
 8002b40:	10a4      	asrs	r4, r4, #2
 8002b42:	2600      	movs	r6, #0
 8002b44:	42a6      	cmp	r6, r4
 8002b46:	d109      	bne.n	8002b5c <__libc_init_array+0x24>
 8002b48:	4d0b      	ldr	r5, [pc, #44]	; (8002b78 <__libc_init_array+0x40>)
 8002b4a:	4c0c      	ldr	r4, [pc, #48]	; (8002b7c <__libc_init_array+0x44>)
 8002b4c:	f000 fc6a 	bl	8003424 <_init>
 8002b50:	1b64      	subs	r4, r4, r5
 8002b52:	10a4      	asrs	r4, r4, #2
 8002b54:	2600      	movs	r6, #0
 8002b56:	42a6      	cmp	r6, r4
 8002b58:	d105      	bne.n	8002b66 <__libc_init_array+0x2e>
 8002b5a:	bd70      	pop	{r4, r5, r6, pc}
 8002b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b60:	4798      	blx	r3
 8002b62:	3601      	adds	r6, #1
 8002b64:	e7ee      	b.n	8002b44 <__libc_init_array+0xc>
 8002b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b6a:	4798      	blx	r3
 8002b6c:	3601      	adds	r6, #1
 8002b6e:	e7f2      	b.n	8002b56 <__libc_init_array+0x1e>
 8002b70:	080034d4 	.word	0x080034d4
 8002b74:	080034d4 	.word	0x080034d4
 8002b78:	080034d4 	.word	0x080034d4
 8002b7c:	080034d8 	.word	0x080034d8

08002b80 <__retarget_lock_acquire_recursive>:
 8002b80:	4770      	bx	lr

08002b82 <__retarget_lock_release_recursive>:
 8002b82:	4770      	bx	lr

08002b84 <__ssputs_r>:
 8002b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b88:	688e      	ldr	r6, [r1, #8]
 8002b8a:	461f      	mov	r7, r3
 8002b8c:	42be      	cmp	r6, r7
 8002b8e:	680b      	ldr	r3, [r1, #0]
 8002b90:	4682      	mov	sl, r0
 8002b92:	460c      	mov	r4, r1
 8002b94:	4690      	mov	r8, r2
 8002b96:	d82c      	bhi.n	8002bf2 <__ssputs_r+0x6e>
 8002b98:	898a      	ldrh	r2, [r1, #12]
 8002b9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002b9e:	d026      	beq.n	8002bee <__ssputs_r+0x6a>
 8002ba0:	6965      	ldr	r5, [r4, #20]
 8002ba2:	6909      	ldr	r1, [r1, #16]
 8002ba4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ba8:	eba3 0901 	sub.w	r9, r3, r1
 8002bac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002bb0:	1c7b      	adds	r3, r7, #1
 8002bb2:	444b      	add	r3, r9
 8002bb4:	106d      	asrs	r5, r5, #1
 8002bb6:	429d      	cmp	r5, r3
 8002bb8:	bf38      	it	cc
 8002bba:	461d      	movcc	r5, r3
 8002bbc:	0553      	lsls	r3, r2, #21
 8002bbe:	d527      	bpl.n	8002c10 <__ssputs_r+0x8c>
 8002bc0:	4629      	mov	r1, r5
 8002bc2:	f000 f957 	bl	8002e74 <_malloc_r>
 8002bc6:	4606      	mov	r6, r0
 8002bc8:	b360      	cbz	r0, 8002c24 <__ssputs_r+0xa0>
 8002bca:	6921      	ldr	r1, [r4, #16]
 8002bcc:	464a      	mov	r2, r9
 8002bce:	f000 fbc7 	bl	8003360 <memcpy>
 8002bd2:	89a3      	ldrh	r3, [r4, #12]
 8002bd4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bdc:	81a3      	strh	r3, [r4, #12]
 8002bde:	6126      	str	r6, [r4, #16]
 8002be0:	6165      	str	r5, [r4, #20]
 8002be2:	444e      	add	r6, r9
 8002be4:	eba5 0509 	sub.w	r5, r5, r9
 8002be8:	6026      	str	r6, [r4, #0]
 8002bea:	60a5      	str	r5, [r4, #8]
 8002bec:	463e      	mov	r6, r7
 8002bee:	42be      	cmp	r6, r7
 8002bf0:	d900      	bls.n	8002bf4 <__ssputs_r+0x70>
 8002bf2:	463e      	mov	r6, r7
 8002bf4:	6820      	ldr	r0, [r4, #0]
 8002bf6:	4632      	mov	r2, r6
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	f000 fb86 	bl	800330a <memmove>
 8002bfe:	68a3      	ldr	r3, [r4, #8]
 8002c00:	1b9b      	subs	r3, r3, r6
 8002c02:	60a3      	str	r3, [r4, #8]
 8002c04:	6823      	ldr	r3, [r4, #0]
 8002c06:	4433      	add	r3, r6
 8002c08:	6023      	str	r3, [r4, #0]
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c10:	462a      	mov	r2, r5
 8002c12:	f000 fb4b 	bl	80032ac <_realloc_r>
 8002c16:	4606      	mov	r6, r0
 8002c18:	2800      	cmp	r0, #0
 8002c1a:	d1e0      	bne.n	8002bde <__ssputs_r+0x5a>
 8002c1c:	6921      	ldr	r1, [r4, #16]
 8002c1e:	4650      	mov	r0, sl
 8002c20:	f000 fbac 	bl	800337c <_free_r>
 8002c24:	230c      	movs	r3, #12
 8002c26:	f8ca 3000 	str.w	r3, [sl]
 8002c2a:	89a3      	ldrh	r3, [r4, #12]
 8002c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c30:	81a3      	strh	r3, [r4, #12]
 8002c32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c36:	e7e9      	b.n	8002c0c <__ssputs_r+0x88>

08002c38 <_svfiprintf_r>:
 8002c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c3c:	4698      	mov	r8, r3
 8002c3e:	898b      	ldrh	r3, [r1, #12]
 8002c40:	061b      	lsls	r3, r3, #24
 8002c42:	b09d      	sub	sp, #116	; 0x74
 8002c44:	4607      	mov	r7, r0
 8002c46:	460d      	mov	r5, r1
 8002c48:	4614      	mov	r4, r2
 8002c4a:	d50e      	bpl.n	8002c6a <_svfiprintf_r+0x32>
 8002c4c:	690b      	ldr	r3, [r1, #16]
 8002c4e:	b963      	cbnz	r3, 8002c6a <_svfiprintf_r+0x32>
 8002c50:	2140      	movs	r1, #64	; 0x40
 8002c52:	f000 f90f 	bl	8002e74 <_malloc_r>
 8002c56:	6028      	str	r0, [r5, #0]
 8002c58:	6128      	str	r0, [r5, #16]
 8002c5a:	b920      	cbnz	r0, 8002c66 <_svfiprintf_r+0x2e>
 8002c5c:	230c      	movs	r3, #12
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c64:	e0d0      	b.n	8002e08 <_svfiprintf_r+0x1d0>
 8002c66:	2340      	movs	r3, #64	; 0x40
 8002c68:	616b      	str	r3, [r5, #20]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8002c6e:	2320      	movs	r3, #32
 8002c70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c74:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c78:	2330      	movs	r3, #48	; 0x30
 8002c7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002e20 <_svfiprintf_r+0x1e8>
 8002c7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c82:	f04f 0901 	mov.w	r9, #1
 8002c86:	4623      	mov	r3, r4
 8002c88:	469a      	mov	sl, r3
 8002c8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c8e:	b10a      	cbz	r2, 8002c94 <_svfiprintf_r+0x5c>
 8002c90:	2a25      	cmp	r2, #37	; 0x25
 8002c92:	d1f9      	bne.n	8002c88 <_svfiprintf_r+0x50>
 8002c94:	ebba 0b04 	subs.w	fp, sl, r4
 8002c98:	d00b      	beq.n	8002cb2 <_svfiprintf_r+0x7a>
 8002c9a:	465b      	mov	r3, fp
 8002c9c:	4622      	mov	r2, r4
 8002c9e:	4629      	mov	r1, r5
 8002ca0:	4638      	mov	r0, r7
 8002ca2:	f7ff ff6f 	bl	8002b84 <__ssputs_r>
 8002ca6:	3001      	adds	r0, #1
 8002ca8:	f000 80a9 	beq.w	8002dfe <_svfiprintf_r+0x1c6>
 8002cac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002cae:	445a      	add	r2, fp
 8002cb0:	9209      	str	r2, [sp, #36]	; 0x24
 8002cb2:	f89a 3000 	ldrb.w	r3, [sl]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 80a1 	beq.w	8002dfe <_svfiprintf_r+0x1c6>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cc6:	f10a 0a01 	add.w	sl, sl, #1
 8002cca:	9304      	str	r3, [sp, #16]
 8002ccc:	9307      	str	r3, [sp, #28]
 8002cce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cd2:	931a      	str	r3, [sp, #104]	; 0x68
 8002cd4:	4654      	mov	r4, sl
 8002cd6:	2205      	movs	r2, #5
 8002cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cdc:	4850      	ldr	r0, [pc, #320]	; (8002e20 <_svfiprintf_r+0x1e8>)
 8002cde:	f7fd fa87 	bl	80001f0 <memchr>
 8002ce2:	9a04      	ldr	r2, [sp, #16]
 8002ce4:	b9d8      	cbnz	r0, 8002d1e <_svfiprintf_r+0xe6>
 8002ce6:	06d0      	lsls	r0, r2, #27
 8002ce8:	bf44      	itt	mi
 8002cea:	2320      	movmi	r3, #32
 8002cec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cf0:	0711      	lsls	r1, r2, #28
 8002cf2:	bf44      	itt	mi
 8002cf4:	232b      	movmi	r3, #43	; 0x2b
 8002cf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8002cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8002d00:	d015      	beq.n	8002d2e <_svfiprintf_r+0xf6>
 8002d02:	9a07      	ldr	r2, [sp, #28]
 8002d04:	4654      	mov	r4, sl
 8002d06:	2000      	movs	r0, #0
 8002d08:	f04f 0c0a 	mov.w	ip, #10
 8002d0c:	4621      	mov	r1, r4
 8002d0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d12:	3b30      	subs	r3, #48	; 0x30
 8002d14:	2b09      	cmp	r3, #9
 8002d16:	d94d      	bls.n	8002db4 <_svfiprintf_r+0x17c>
 8002d18:	b1b0      	cbz	r0, 8002d48 <_svfiprintf_r+0x110>
 8002d1a:	9207      	str	r2, [sp, #28]
 8002d1c:	e014      	b.n	8002d48 <_svfiprintf_r+0x110>
 8002d1e:	eba0 0308 	sub.w	r3, r0, r8
 8002d22:	fa09 f303 	lsl.w	r3, r9, r3
 8002d26:	4313      	orrs	r3, r2
 8002d28:	9304      	str	r3, [sp, #16]
 8002d2a:	46a2      	mov	sl, r4
 8002d2c:	e7d2      	b.n	8002cd4 <_svfiprintf_r+0x9c>
 8002d2e:	9b03      	ldr	r3, [sp, #12]
 8002d30:	1d19      	adds	r1, r3, #4
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	9103      	str	r1, [sp, #12]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	bfbb      	ittet	lt
 8002d3a:	425b      	neglt	r3, r3
 8002d3c:	f042 0202 	orrlt.w	r2, r2, #2
 8002d40:	9307      	strge	r3, [sp, #28]
 8002d42:	9307      	strlt	r3, [sp, #28]
 8002d44:	bfb8      	it	lt
 8002d46:	9204      	strlt	r2, [sp, #16]
 8002d48:	7823      	ldrb	r3, [r4, #0]
 8002d4a:	2b2e      	cmp	r3, #46	; 0x2e
 8002d4c:	d10c      	bne.n	8002d68 <_svfiprintf_r+0x130>
 8002d4e:	7863      	ldrb	r3, [r4, #1]
 8002d50:	2b2a      	cmp	r3, #42	; 0x2a
 8002d52:	d134      	bne.n	8002dbe <_svfiprintf_r+0x186>
 8002d54:	9b03      	ldr	r3, [sp, #12]
 8002d56:	1d1a      	adds	r2, r3, #4
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	9203      	str	r2, [sp, #12]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	bfb8      	it	lt
 8002d60:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002d64:	3402      	adds	r4, #2
 8002d66:	9305      	str	r3, [sp, #20]
 8002d68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002e30 <_svfiprintf_r+0x1f8>
 8002d6c:	7821      	ldrb	r1, [r4, #0]
 8002d6e:	2203      	movs	r2, #3
 8002d70:	4650      	mov	r0, sl
 8002d72:	f7fd fa3d 	bl	80001f0 <memchr>
 8002d76:	b138      	cbz	r0, 8002d88 <_svfiprintf_r+0x150>
 8002d78:	9b04      	ldr	r3, [sp, #16]
 8002d7a:	eba0 000a 	sub.w	r0, r0, sl
 8002d7e:	2240      	movs	r2, #64	; 0x40
 8002d80:	4082      	lsls	r2, r0
 8002d82:	4313      	orrs	r3, r2
 8002d84:	3401      	adds	r4, #1
 8002d86:	9304      	str	r3, [sp, #16]
 8002d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d8c:	4825      	ldr	r0, [pc, #148]	; (8002e24 <_svfiprintf_r+0x1ec>)
 8002d8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d92:	2206      	movs	r2, #6
 8002d94:	f7fd fa2c 	bl	80001f0 <memchr>
 8002d98:	2800      	cmp	r0, #0
 8002d9a:	d038      	beq.n	8002e0e <_svfiprintf_r+0x1d6>
 8002d9c:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <_svfiprintf_r+0x1f0>)
 8002d9e:	bb1b      	cbnz	r3, 8002de8 <_svfiprintf_r+0x1b0>
 8002da0:	9b03      	ldr	r3, [sp, #12]
 8002da2:	3307      	adds	r3, #7
 8002da4:	f023 0307 	bic.w	r3, r3, #7
 8002da8:	3308      	adds	r3, #8
 8002daa:	9303      	str	r3, [sp, #12]
 8002dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dae:	4433      	add	r3, r6
 8002db0:	9309      	str	r3, [sp, #36]	; 0x24
 8002db2:	e768      	b.n	8002c86 <_svfiprintf_r+0x4e>
 8002db4:	fb0c 3202 	mla	r2, ip, r2, r3
 8002db8:	460c      	mov	r4, r1
 8002dba:	2001      	movs	r0, #1
 8002dbc:	e7a6      	b.n	8002d0c <_svfiprintf_r+0xd4>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	3401      	adds	r4, #1
 8002dc2:	9305      	str	r3, [sp, #20]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	f04f 0c0a 	mov.w	ip, #10
 8002dca:	4620      	mov	r0, r4
 8002dcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002dd0:	3a30      	subs	r2, #48	; 0x30
 8002dd2:	2a09      	cmp	r2, #9
 8002dd4:	d903      	bls.n	8002dde <_svfiprintf_r+0x1a6>
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0c6      	beq.n	8002d68 <_svfiprintf_r+0x130>
 8002dda:	9105      	str	r1, [sp, #20]
 8002ddc:	e7c4      	b.n	8002d68 <_svfiprintf_r+0x130>
 8002dde:	fb0c 2101 	mla	r1, ip, r1, r2
 8002de2:	4604      	mov	r4, r0
 8002de4:	2301      	movs	r3, #1
 8002de6:	e7f0      	b.n	8002dca <_svfiprintf_r+0x192>
 8002de8:	ab03      	add	r3, sp, #12
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	462a      	mov	r2, r5
 8002dee:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <_svfiprintf_r+0x1f4>)
 8002df0:	a904      	add	r1, sp, #16
 8002df2:	4638      	mov	r0, r7
 8002df4:	f3af 8000 	nop.w
 8002df8:	1c42      	adds	r2, r0, #1
 8002dfa:	4606      	mov	r6, r0
 8002dfc:	d1d6      	bne.n	8002dac <_svfiprintf_r+0x174>
 8002dfe:	89ab      	ldrh	r3, [r5, #12]
 8002e00:	065b      	lsls	r3, r3, #25
 8002e02:	f53f af2d 	bmi.w	8002c60 <_svfiprintf_r+0x28>
 8002e06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e08:	b01d      	add	sp, #116	; 0x74
 8002e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e0e:	ab03      	add	r3, sp, #12
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	462a      	mov	r2, r5
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <_svfiprintf_r+0x1f4>)
 8002e16:	a904      	add	r1, sp, #16
 8002e18:	4638      	mov	r0, r7
 8002e1a:	f000 f919 	bl	8003050 <_printf_i>
 8002e1e:	e7eb      	b.n	8002df8 <_svfiprintf_r+0x1c0>
 8002e20:	08003498 	.word	0x08003498
 8002e24:	080034a2 	.word	0x080034a2
 8002e28:	00000000 	.word	0x00000000
 8002e2c:	08002b85 	.word	0x08002b85
 8002e30:	0800349e 	.word	0x0800349e

08002e34 <sbrk_aligned>:
 8002e34:	b570      	push	{r4, r5, r6, lr}
 8002e36:	4e0e      	ldr	r6, [pc, #56]	; (8002e70 <sbrk_aligned+0x3c>)
 8002e38:	460c      	mov	r4, r1
 8002e3a:	6831      	ldr	r1, [r6, #0]
 8002e3c:	4605      	mov	r5, r0
 8002e3e:	b911      	cbnz	r1, 8002e46 <sbrk_aligned+0x12>
 8002e40:	f000 fa7e 	bl	8003340 <_sbrk_r>
 8002e44:	6030      	str	r0, [r6, #0]
 8002e46:	4621      	mov	r1, r4
 8002e48:	4628      	mov	r0, r5
 8002e4a:	f000 fa79 	bl	8003340 <_sbrk_r>
 8002e4e:	1c43      	adds	r3, r0, #1
 8002e50:	d00a      	beq.n	8002e68 <sbrk_aligned+0x34>
 8002e52:	1cc4      	adds	r4, r0, #3
 8002e54:	f024 0403 	bic.w	r4, r4, #3
 8002e58:	42a0      	cmp	r0, r4
 8002e5a:	d007      	beq.n	8002e6c <sbrk_aligned+0x38>
 8002e5c:	1a21      	subs	r1, r4, r0
 8002e5e:	4628      	mov	r0, r5
 8002e60:	f000 fa6e 	bl	8003340 <_sbrk_r>
 8002e64:	3001      	adds	r0, #1
 8002e66:	d101      	bne.n	8002e6c <sbrk_aligned+0x38>
 8002e68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	bd70      	pop	{r4, r5, r6, pc}
 8002e70:	20000250 	.word	0x20000250

08002e74 <_malloc_r>:
 8002e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e78:	1ccd      	adds	r5, r1, #3
 8002e7a:	f025 0503 	bic.w	r5, r5, #3
 8002e7e:	3508      	adds	r5, #8
 8002e80:	2d0c      	cmp	r5, #12
 8002e82:	bf38      	it	cc
 8002e84:	250c      	movcc	r5, #12
 8002e86:	2d00      	cmp	r5, #0
 8002e88:	4607      	mov	r7, r0
 8002e8a:	db01      	blt.n	8002e90 <_malloc_r+0x1c>
 8002e8c:	42a9      	cmp	r1, r5
 8002e8e:	d905      	bls.n	8002e9c <_malloc_r+0x28>
 8002e90:	230c      	movs	r3, #12
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	2600      	movs	r6, #0
 8002e96:	4630      	mov	r0, r6
 8002e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002f70 <_malloc_r+0xfc>
 8002ea0:	f000 f9f8 	bl	8003294 <__malloc_lock>
 8002ea4:	f8d8 3000 	ldr.w	r3, [r8]
 8002ea8:	461c      	mov	r4, r3
 8002eaa:	bb5c      	cbnz	r4, 8002f04 <_malloc_r+0x90>
 8002eac:	4629      	mov	r1, r5
 8002eae:	4638      	mov	r0, r7
 8002eb0:	f7ff ffc0 	bl	8002e34 <sbrk_aligned>
 8002eb4:	1c43      	adds	r3, r0, #1
 8002eb6:	4604      	mov	r4, r0
 8002eb8:	d155      	bne.n	8002f66 <_malloc_r+0xf2>
 8002eba:	f8d8 4000 	ldr.w	r4, [r8]
 8002ebe:	4626      	mov	r6, r4
 8002ec0:	2e00      	cmp	r6, #0
 8002ec2:	d145      	bne.n	8002f50 <_malloc_r+0xdc>
 8002ec4:	2c00      	cmp	r4, #0
 8002ec6:	d048      	beq.n	8002f5a <_malloc_r+0xe6>
 8002ec8:	6823      	ldr	r3, [r4, #0]
 8002eca:	4631      	mov	r1, r6
 8002ecc:	4638      	mov	r0, r7
 8002ece:	eb04 0903 	add.w	r9, r4, r3
 8002ed2:	f000 fa35 	bl	8003340 <_sbrk_r>
 8002ed6:	4581      	cmp	r9, r0
 8002ed8:	d13f      	bne.n	8002f5a <_malloc_r+0xe6>
 8002eda:	6821      	ldr	r1, [r4, #0]
 8002edc:	1a6d      	subs	r5, r5, r1
 8002ede:	4629      	mov	r1, r5
 8002ee0:	4638      	mov	r0, r7
 8002ee2:	f7ff ffa7 	bl	8002e34 <sbrk_aligned>
 8002ee6:	3001      	adds	r0, #1
 8002ee8:	d037      	beq.n	8002f5a <_malloc_r+0xe6>
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	442b      	add	r3, r5
 8002eee:	6023      	str	r3, [r4, #0]
 8002ef0:	f8d8 3000 	ldr.w	r3, [r8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d038      	beq.n	8002f6a <_malloc_r+0xf6>
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	42a2      	cmp	r2, r4
 8002efc:	d12b      	bne.n	8002f56 <_malloc_r+0xe2>
 8002efe:	2200      	movs	r2, #0
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	e00f      	b.n	8002f24 <_malloc_r+0xb0>
 8002f04:	6822      	ldr	r2, [r4, #0]
 8002f06:	1b52      	subs	r2, r2, r5
 8002f08:	d41f      	bmi.n	8002f4a <_malloc_r+0xd6>
 8002f0a:	2a0b      	cmp	r2, #11
 8002f0c:	d917      	bls.n	8002f3e <_malloc_r+0xca>
 8002f0e:	1961      	adds	r1, r4, r5
 8002f10:	42a3      	cmp	r3, r4
 8002f12:	6025      	str	r5, [r4, #0]
 8002f14:	bf18      	it	ne
 8002f16:	6059      	strne	r1, [r3, #4]
 8002f18:	6863      	ldr	r3, [r4, #4]
 8002f1a:	bf08      	it	eq
 8002f1c:	f8c8 1000 	streq.w	r1, [r8]
 8002f20:	5162      	str	r2, [r4, r5]
 8002f22:	604b      	str	r3, [r1, #4]
 8002f24:	4638      	mov	r0, r7
 8002f26:	f104 060b 	add.w	r6, r4, #11
 8002f2a:	f000 f9b9 	bl	80032a0 <__malloc_unlock>
 8002f2e:	f026 0607 	bic.w	r6, r6, #7
 8002f32:	1d23      	adds	r3, r4, #4
 8002f34:	1af2      	subs	r2, r6, r3
 8002f36:	d0ae      	beq.n	8002e96 <_malloc_r+0x22>
 8002f38:	1b9b      	subs	r3, r3, r6
 8002f3a:	50a3      	str	r3, [r4, r2]
 8002f3c:	e7ab      	b.n	8002e96 <_malloc_r+0x22>
 8002f3e:	42a3      	cmp	r3, r4
 8002f40:	6862      	ldr	r2, [r4, #4]
 8002f42:	d1dd      	bne.n	8002f00 <_malloc_r+0x8c>
 8002f44:	f8c8 2000 	str.w	r2, [r8]
 8002f48:	e7ec      	b.n	8002f24 <_malloc_r+0xb0>
 8002f4a:	4623      	mov	r3, r4
 8002f4c:	6864      	ldr	r4, [r4, #4]
 8002f4e:	e7ac      	b.n	8002eaa <_malloc_r+0x36>
 8002f50:	4634      	mov	r4, r6
 8002f52:	6876      	ldr	r6, [r6, #4]
 8002f54:	e7b4      	b.n	8002ec0 <_malloc_r+0x4c>
 8002f56:	4613      	mov	r3, r2
 8002f58:	e7cc      	b.n	8002ef4 <_malloc_r+0x80>
 8002f5a:	230c      	movs	r3, #12
 8002f5c:	603b      	str	r3, [r7, #0]
 8002f5e:	4638      	mov	r0, r7
 8002f60:	f000 f99e 	bl	80032a0 <__malloc_unlock>
 8002f64:	e797      	b.n	8002e96 <_malloc_r+0x22>
 8002f66:	6025      	str	r5, [r4, #0]
 8002f68:	e7dc      	b.n	8002f24 <_malloc_r+0xb0>
 8002f6a:	605b      	str	r3, [r3, #4]
 8002f6c:	deff      	udf	#255	; 0xff
 8002f6e:	bf00      	nop
 8002f70:	2000024c 	.word	0x2000024c

08002f74 <_printf_common>:
 8002f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f78:	4616      	mov	r6, r2
 8002f7a:	4699      	mov	r9, r3
 8002f7c:	688a      	ldr	r2, [r1, #8]
 8002f7e:	690b      	ldr	r3, [r1, #16]
 8002f80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f84:	4293      	cmp	r3, r2
 8002f86:	bfb8      	it	lt
 8002f88:	4613      	movlt	r3, r2
 8002f8a:	6033      	str	r3, [r6, #0]
 8002f8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f90:	4607      	mov	r7, r0
 8002f92:	460c      	mov	r4, r1
 8002f94:	b10a      	cbz	r2, 8002f9a <_printf_common+0x26>
 8002f96:	3301      	adds	r3, #1
 8002f98:	6033      	str	r3, [r6, #0]
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	0699      	lsls	r1, r3, #26
 8002f9e:	bf42      	ittt	mi
 8002fa0:	6833      	ldrmi	r3, [r6, #0]
 8002fa2:	3302      	addmi	r3, #2
 8002fa4:	6033      	strmi	r3, [r6, #0]
 8002fa6:	6825      	ldr	r5, [r4, #0]
 8002fa8:	f015 0506 	ands.w	r5, r5, #6
 8002fac:	d106      	bne.n	8002fbc <_printf_common+0x48>
 8002fae:	f104 0a19 	add.w	sl, r4, #25
 8002fb2:	68e3      	ldr	r3, [r4, #12]
 8002fb4:	6832      	ldr	r2, [r6, #0]
 8002fb6:	1a9b      	subs	r3, r3, r2
 8002fb8:	42ab      	cmp	r3, r5
 8002fba:	dc26      	bgt.n	800300a <_printf_common+0x96>
 8002fbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002fc0:	1e13      	subs	r3, r2, #0
 8002fc2:	6822      	ldr	r2, [r4, #0]
 8002fc4:	bf18      	it	ne
 8002fc6:	2301      	movne	r3, #1
 8002fc8:	0692      	lsls	r2, r2, #26
 8002fca:	d42b      	bmi.n	8003024 <_printf_common+0xb0>
 8002fcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fd0:	4649      	mov	r1, r9
 8002fd2:	4638      	mov	r0, r7
 8002fd4:	47c0      	blx	r8
 8002fd6:	3001      	adds	r0, #1
 8002fd8:	d01e      	beq.n	8003018 <_printf_common+0xa4>
 8002fda:	6823      	ldr	r3, [r4, #0]
 8002fdc:	6922      	ldr	r2, [r4, #16]
 8002fde:	f003 0306 	and.w	r3, r3, #6
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	bf02      	ittt	eq
 8002fe6:	68e5      	ldreq	r5, [r4, #12]
 8002fe8:	6833      	ldreq	r3, [r6, #0]
 8002fea:	1aed      	subeq	r5, r5, r3
 8002fec:	68a3      	ldr	r3, [r4, #8]
 8002fee:	bf0c      	ite	eq
 8002ff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ff4:	2500      	movne	r5, #0
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	bfc4      	itt	gt
 8002ffa:	1a9b      	subgt	r3, r3, r2
 8002ffc:	18ed      	addgt	r5, r5, r3
 8002ffe:	2600      	movs	r6, #0
 8003000:	341a      	adds	r4, #26
 8003002:	42b5      	cmp	r5, r6
 8003004:	d11a      	bne.n	800303c <_printf_common+0xc8>
 8003006:	2000      	movs	r0, #0
 8003008:	e008      	b.n	800301c <_printf_common+0xa8>
 800300a:	2301      	movs	r3, #1
 800300c:	4652      	mov	r2, sl
 800300e:	4649      	mov	r1, r9
 8003010:	4638      	mov	r0, r7
 8003012:	47c0      	blx	r8
 8003014:	3001      	adds	r0, #1
 8003016:	d103      	bne.n	8003020 <_printf_common+0xac>
 8003018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800301c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003020:	3501      	adds	r5, #1
 8003022:	e7c6      	b.n	8002fb2 <_printf_common+0x3e>
 8003024:	18e1      	adds	r1, r4, r3
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	2030      	movs	r0, #48	; 0x30
 800302a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800302e:	4422      	add	r2, r4
 8003030:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003034:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003038:	3302      	adds	r3, #2
 800303a:	e7c7      	b.n	8002fcc <_printf_common+0x58>
 800303c:	2301      	movs	r3, #1
 800303e:	4622      	mov	r2, r4
 8003040:	4649      	mov	r1, r9
 8003042:	4638      	mov	r0, r7
 8003044:	47c0      	blx	r8
 8003046:	3001      	adds	r0, #1
 8003048:	d0e6      	beq.n	8003018 <_printf_common+0xa4>
 800304a:	3601      	adds	r6, #1
 800304c:	e7d9      	b.n	8003002 <_printf_common+0x8e>
	...

08003050 <_printf_i>:
 8003050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003054:	7e0f      	ldrb	r7, [r1, #24]
 8003056:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003058:	2f78      	cmp	r7, #120	; 0x78
 800305a:	4691      	mov	r9, r2
 800305c:	4680      	mov	r8, r0
 800305e:	460c      	mov	r4, r1
 8003060:	469a      	mov	sl, r3
 8003062:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003066:	d807      	bhi.n	8003078 <_printf_i+0x28>
 8003068:	2f62      	cmp	r7, #98	; 0x62
 800306a:	d80a      	bhi.n	8003082 <_printf_i+0x32>
 800306c:	2f00      	cmp	r7, #0
 800306e:	f000 80d4 	beq.w	800321a <_printf_i+0x1ca>
 8003072:	2f58      	cmp	r7, #88	; 0x58
 8003074:	f000 80c0 	beq.w	80031f8 <_printf_i+0x1a8>
 8003078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800307c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003080:	e03a      	b.n	80030f8 <_printf_i+0xa8>
 8003082:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003086:	2b15      	cmp	r3, #21
 8003088:	d8f6      	bhi.n	8003078 <_printf_i+0x28>
 800308a:	a101      	add	r1, pc, #4	; (adr r1, 8003090 <_printf_i+0x40>)
 800308c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003090:	080030e9 	.word	0x080030e9
 8003094:	080030fd 	.word	0x080030fd
 8003098:	08003079 	.word	0x08003079
 800309c:	08003079 	.word	0x08003079
 80030a0:	08003079 	.word	0x08003079
 80030a4:	08003079 	.word	0x08003079
 80030a8:	080030fd 	.word	0x080030fd
 80030ac:	08003079 	.word	0x08003079
 80030b0:	08003079 	.word	0x08003079
 80030b4:	08003079 	.word	0x08003079
 80030b8:	08003079 	.word	0x08003079
 80030bc:	08003201 	.word	0x08003201
 80030c0:	08003129 	.word	0x08003129
 80030c4:	080031bb 	.word	0x080031bb
 80030c8:	08003079 	.word	0x08003079
 80030cc:	08003079 	.word	0x08003079
 80030d0:	08003223 	.word	0x08003223
 80030d4:	08003079 	.word	0x08003079
 80030d8:	08003129 	.word	0x08003129
 80030dc:	08003079 	.word	0x08003079
 80030e0:	08003079 	.word	0x08003079
 80030e4:	080031c3 	.word	0x080031c3
 80030e8:	682b      	ldr	r3, [r5, #0]
 80030ea:	1d1a      	adds	r2, r3, #4
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	602a      	str	r2, [r5, #0]
 80030f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030f8:	2301      	movs	r3, #1
 80030fa:	e09f      	b.n	800323c <_printf_i+0x1ec>
 80030fc:	6820      	ldr	r0, [r4, #0]
 80030fe:	682b      	ldr	r3, [r5, #0]
 8003100:	0607      	lsls	r7, r0, #24
 8003102:	f103 0104 	add.w	r1, r3, #4
 8003106:	6029      	str	r1, [r5, #0]
 8003108:	d501      	bpl.n	800310e <_printf_i+0xbe>
 800310a:	681e      	ldr	r6, [r3, #0]
 800310c:	e003      	b.n	8003116 <_printf_i+0xc6>
 800310e:	0646      	lsls	r6, r0, #25
 8003110:	d5fb      	bpl.n	800310a <_printf_i+0xba>
 8003112:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003116:	2e00      	cmp	r6, #0
 8003118:	da03      	bge.n	8003122 <_printf_i+0xd2>
 800311a:	232d      	movs	r3, #45	; 0x2d
 800311c:	4276      	negs	r6, r6
 800311e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003122:	485a      	ldr	r0, [pc, #360]	; (800328c <_printf_i+0x23c>)
 8003124:	230a      	movs	r3, #10
 8003126:	e012      	b.n	800314e <_printf_i+0xfe>
 8003128:	682b      	ldr	r3, [r5, #0]
 800312a:	6820      	ldr	r0, [r4, #0]
 800312c:	1d19      	adds	r1, r3, #4
 800312e:	6029      	str	r1, [r5, #0]
 8003130:	0605      	lsls	r5, r0, #24
 8003132:	d501      	bpl.n	8003138 <_printf_i+0xe8>
 8003134:	681e      	ldr	r6, [r3, #0]
 8003136:	e002      	b.n	800313e <_printf_i+0xee>
 8003138:	0641      	lsls	r1, r0, #25
 800313a:	d5fb      	bpl.n	8003134 <_printf_i+0xe4>
 800313c:	881e      	ldrh	r6, [r3, #0]
 800313e:	4853      	ldr	r0, [pc, #332]	; (800328c <_printf_i+0x23c>)
 8003140:	2f6f      	cmp	r7, #111	; 0x6f
 8003142:	bf0c      	ite	eq
 8003144:	2308      	moveq	r3, #8
 8003146:	230a      	movne	r3, #10
 8003148:	2100      	movs	r1, #0
 800314a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800314e:	6865      	ldr	r5, [r4, #4]
 8003150:	60a5      	str	r5, [r4, #8]
 8003152:	2d00      	cmp	r5, #0
 8003154:	bfa2      	ittt	ge
 8003156:	6821      	ldrge	r1, [r4, #0]
 8003158:	f021 0104 	bicge.w	r1, r1, #4
 800315c:	6021      	strge	r1, [r4, #0]
 800315e:	b90e      	cbnz	r6, 8003164 <_printf_i+0x114>
 8003160:	2d00      	cmp	r5, #0
 8003162:	d04b      	beq.n	80031fc <_printf_i+0x1ac>
 8003164:	4615      	mov	r5, r2
 8003166:	fbb6 f1f3 	udiv	r1, r6, r3
 800316a:	fb03 6711 	mls	r7, r3, r1, r6
 800316e:	5dc7      	ldrb	r7, [r0, r7]
 8003170:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003174:	4637      	mov	r7, r6
 8003176:	42bb      	cmp	r3, r7
 8003178:	460e      	mov	r6, r1
 800317a:	d9f4      	bls.n	8003166 <_printf_i+0x116>
 800317c:	2b08      	cmp	r3, #8
 800317e:	d10b      	bne.n	8003198 <_printf_i+0x148>
 8003180:	6823      	ldr	r3, [r4, #0]
 8003182:	07de      	lsls	r6, r3, #31
 8003184:	d508      	bpl.n	8003198 <_printf_i+0x148>
 8003186:	6923      	ldr	r3, [r4, #16]
 8003188:	6861      	ldr	r1, [r4, #4]
 800318a:	4299      	cmp	r1, r3
 800318c:	bfde      	ittt	le
 800318e:	2330      	movle	r3, #48	; 0x30
 8003190:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003194:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003198:	1b52      	subs	r2, r2, r5
 800319a:	6122      	str	r2, [r4, #16]
 800319c:	f8cd a000 	str.w	sl, [sp]
 80031a0:	464b      	mov	r3, r9
 80031a2:	aa03      	add	r2, sp, #12
 80031a4:	4621      	mov	r1, r4
 80031a6:	4640      	mov	r0, r8
 80031a8:	f7ff fee4 	bl	8002f74 <_printf_common>
 80031ac:	3001      	adds	r0, #1
 80031ae:	d14a      	bne.n	8003246 <_printf_i+0x1f6>
 80031b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031b4:	b004      	add	sp, #16
 80031b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031ba:	6823      	ldr	r3, [r4, #0]
 80031bc:	f043 0320 	orr.w	r3, r3, #32
 80031c0:	6023      	str	r3, [r4, #0]
 80031c2:	4833      	ldr	r0, [pc, #204]	; (8003290 <_printf_i+0x240>)
 80031c4:	2778      	movs	r7, #120	; 0x78
 80031c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80031ca:	6823      	ldr	r3, [r4, #0]
 80031cc:	6829      	ldr	r1, [r5, #0]
 80031ce:	061f      	lsls	r7, r3, #24
 80031d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80031d4:	d402      	bmi.n	80031dc <_printf_i+0x18c>
 80031d6:	065f      	lsls	r7, r3, #25
 80031d8:	bf48      	it	mi
 80031da:	b2b6      	uxthmi	r6, r6
 80031dc:	07df      	lsls	r7, r3, #31
 80031de:	bf48      	it	mi
 80031e0:	f043 0320 	orrmi.w	r3, r3, #32
 80031e4:	6029      	str	r1, [r5, #0]
 80031e6:	bf48      	it	mi
 80031e8:	6023      	strmi	r3, [r4, #0]
 80031ea:	b91e      	cbnz	r6, 80031f4 <_printf_i+0x1a4>
 80031ec:	6823      	ldr	r3, [r4, #0]
 80031ee:	f023 0320 	bic.w	r3, r3, #32
 80031f2:	6023      	str	r3, [r4, #0]
 80031f4:	2310      	movs	r3, #16
 80031f6:	e7a7      	b.n	8003148 <_printf_i+0xf8>
 80031f8:	4824      	ldr	r0, [pc, #144]	; (800328c <_printf_i+0x23c>)
 80031fa:	e7e4      	b.n	80031c6 <_printf_i+0x176>
 80031fc:	4615      	mov	r5, r2
 80031fe:	e7bd      	b.n	800317c <_printf_i+0x12c>
 8003200:	682b      	ldr	r3, [r5, #0]
 8003202:	6826      	ldr	r6, [r4, #0]
 8003204:	6961      	ldr	r1, [r4, #20]
 8003206:	1d18      	adds	r0, r3, #4
 8003208:	6028      	str	r0, [r5, #0]
 800320a:	0635      	lsls	r5, r6, #24
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	d501      	bpl.n	8003214 <_printf_i+0x1c4>
 8003210:	6019      	str	r1, [r3, #0]
 8003212:	e002      	b.n	800321a <_printf_i+0x1ca>
 8003214:	0670      	lsls	r0, r6, #25
 8003216:	d5fb      	bpl.n	8003210 <_printf_i+0x1c0>
 8003218:	8019      	strh	r1, [r3, #0]
 800321a:	2300      	movs	r3, #0
 800321c:	6123      	str	r3, [r4, #16]
 800321e:	4615      	mov	r5, r2
 8003220:	e7bc      	b.n	800319c <_printf_i+0x14c>
 8003222:	682b      	ldr	r3, [r5, #0]
 8003224:	1d1a      	adds	r2, r3, #4
 8003226:	602a      	str	r2, [r5, #0]
 8003228:	681d      	ldr	r5, [r3, #0]
 800322a:	6862      	ldr	r2, [r4, #4]
 800322c:	2100      	movs	r1, #0
 800322e:	4628      	mov	r0, r5
 8003230:	f7fc ffde 	bl	80001f0 <memchr>
 8003234:	b108      	cbz	r0, 800323a <_printf_i+0x1ea>
 8003236:	1b40      	subs	r0, r0, r5
 8003238:	6060      	str	r0, [r4, #4]
 800323a:	6863      	ldr	r3, [r4, #4]
 800323c:	6123      	str	r3, [r4, #16]
 800323e:	2300      	movs	r3, #0
 8003240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003244:	e7aa      	b.n	800319c <_printf_i+0x14c>
 8003246:	6923      	ldr	r3, [r4, #16]
 8003248:	462a      	mov	r2, r5
 800324a:	4649      	mov	r1, r9
 800324c:	4640      	mov	r0, r8
 800324e:	47d0      	blx	sl
 8003250:	3001      	adds	r0, #1
 8003252:	d0ad      	beq.n	80031b0 <_printf_i+0x160>
 8003254:	6823      	ldr	r3, [r4, #0]
 8003256:	079b      	lsls	r3, r3, #30
 8003258:	d413      	bmi.n	8003282 <_printf_i+0x232>
 800325a:	68e0      	ldr	r0, [r4, #12]
 800325c:	9b03      	ldr	r3, [sp, #12]
 800325e:	4298      	cmp	r0, r3
 8003260:	bfb8      	it	lt
 8003262:	4618      	movlt	r0, r3
 8003264:	e7a6      	b.n	80031b4 <_printf_i+0x164>
 8003266:	2301      	movs	r3, #1
 8003268:	4632      	mov	r2, r6
 800326a:	4649      	mov	r1, r9
 800326c:	4640      	mov	r0, r8
 800326e:	47d0      	blx	sl
 8003270:	3001      	adds	r0, #1
 8003272:	d09d      	beq.n	80031b0 <_printf_i+0x160>
 8003274:	3501      	adds	r5, #1
 8003276:	68e3      	ldr	r3, [r4, #12]
 8003278:	9903      	ldr	r1, [sp, #12]
 800327a:	1a5b      	subs	r3, r3, r1
 800327c:	42ab      	cmp	r3, r5
 800327e:	dcf2      	bgt.n	8003266 <_printf_i+0x216>
 8003280:	e7eb      	b.n	800325a <_printf_i+0x20a>
 8003282:	2500      	movs	r5, #0
 8003284:	f104 0619 	add.w	r6, r4, #25
 8003288:	e7f5      	b.n	8003276 <_printf_i+0x226>
 800328a:	bf00      	nop
 800328c:	080034a9 	.word	0x080034a9
 8003290:	080034ba 	.word	0x080034ba

08003294 <__malloc_lock>:
 8003294:	4801      	ldr	r0, [pc, #4]	; (800329c <__malloc_lock+0x8>)
 8003296:	f7ff bc73 	b.w	8002b80 <__retarget_lock_acquire_recursive>
 800329a:	bf00      	nop
 800329c:	20000248 	.word	0x20000248

080032a0 <__malloc_unlock>:
 80032a0:	4801      	ldr	r0, [pc, #4]	; (80032a8 <__malloc_unlock+0x8>)
 80032a2:	f7ff bc6e 	b.w	8002b82 <__retarget_lock_release_recursive>
 80032a6:	bf00      	nop
 80032a8:	20000248 	.word	0x20000248

080032ac <_realloc_r>:
 80032ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032b0:	4680      	mov	r8, r0
 80032b2:	4614      	mov	r4, r2
 80032b4:	460e      	mov	r6, r1
 80032b6:	b921      	cbnz	r1, 80032c2 <_realloc_r+0x16>
 80032b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032bc:	4611      	mov	r1, r2
 80032be:	f7ff bdd9 	b.w	8002e74 <_malloc_r>
 80032c2:	b92a      	cbnz	r2, 80032d0 <_realloc_r+0x24>
 80032c4:	f000 f85a 	bl	800337c <_free_r>
 80032c8:	4625      	mov	r5, r4
 80032ca:	4628      	mov	r0, r5
 80032cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032d0:	f000 f8a0 	bl	8003414 <_malloc_usable_size_r>
 80032d4:	4284      	cmp	r4, r0
 80032d6:	4607      	mov	r7, r0
 80032d8:	d802      	bhi.n	80032e0 <_realloc_r+0x34>
 80032da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80032de:	d812      	bhi.n	8003306 <_realloc_r+0x5a>
 80032e0:	4621      	mov	r1, r4
 80032e2:	4640      	mov	r0, r8
 80032e4:	f7ff fdc6 	bl	8002e74 <_malloc_r>
 80032e8:	4605      	mov	r5, r0
 80032ea:	2800      	cmp	r0, #0
 80032ec:	d0ed      	beq.n	80032ca <_realloc_r+0x1e>
 80032ee:	42bc      	cmp	r4, r7
 80032f0:	4622      	mov	r2, r4
 80032f2:	4631      	mov	r1, r6
 80032f4:	bf28      	it	cs
 80032f6:	463a      	movcs	r2, r7
 80032f8:	f000 f832 	bl	8003360 <memcpy>
 80032fc:	4631      	mov	r1, r6
 80032fe:	4640      	mov	r0, r8
 8003300:	f000 f83c 	bl	800337c <_free_r>
 8003304:	e7e1      	b.n	80032ca <_realloc_r+0x1e>
 8003306:	4635      	mov	r5, r6
 8003308:	e7df      	b.n	80032ca <_realloc_r+0x1e>

0800330a <memmove>:
 800330a:	4288      	cmp	r0, r1
 800330c:	b510      	push	{r4, lr}
 800330e:	eb01 0402 	add.w	r4, r1, r2
 8003312:	d902      	bls.n	800331a <memmove+0x10>
 8003314:	4284      	cmp	r4, r0
 8003316:	4623      	mov	r3, r4
 8003318:	d807      	bhi.n	800332a <memmove+0x20>
 800331a:	1e43      	subs	r3, r0, #1
 800331c:	42a1      	cmp	r1, r4
 800331e:	d008      	beq.n	8003332 <memmove+0x28>
 8003320:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003324:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003328:	e7f8      	b.n	800331c <memmove+0x12>
 800332a:	4402      	add	r2, r0
 800332c:	4601      	mov	r1, r0
 800332e:	428a      	cmp	r2, r1
 8003330:	d100      	bne.n	8003334 <memmove+0x2a>
 8003332:	bd10      	pop	{r4, pc}
 8003334:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003338:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800333c:	e7f7      	b.n	800332e <memmove+0x24>
	...

08003340 <_sbrk_r>:
 8003340:	b538      	push	{r3, r4, r5, lr}
 8003342:	4d06      	ldr	r5, [pc, #24]	; (800335c <_sbrk_r+0x1c>)
 8003344:	2300      	movs	r3, #0
 8003346:	4604      	mov	r4, r0
 8003348:	4608      	mov	r0, r1
 800334a:	602b      	str	r3, [r5, #0]
 800334c:	f7fd fbd8 	bl	8000b00 <_sbrk>
 8003350:	1c43      	adds	r3, r0, #1
 8003352:	d102      	bne.n	800335a <_sbrk_r+0x1a>
 8003354:	682b      	ldr	r3, [r5, #0]
 8003356:	b103      	cbz	r3, 800335a <_sbrk_r+0x1a>
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	bd38      	pop	{r3, r4, r5, pc}
 800335c:	20000254 	.word	0x20000254

08003360 <memcpy>:
 8003360:	440a      	add	r2, r1
 8003362:	4291      	cmp	r1, r2
 8003364:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003368:	d100      	bne.n	800336c <memcpy+0xc>
 800336a:	4770      	bx	lr
 800336c:	b510      	push	{r4, lr}
 800336e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003372:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003376:	4291      	cmp	r1, r2
 8003378:	d1f9      	bne.n	800336e <memcpy+0xe>
 800337a:	bd10      	pop	{r4, pc}

0800337c <_free_r>:
 800337c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800337e:	2900      	cmp	r1, #0
 8003380:	d044      	beq.n	800340c <_free_r+0x90>
 8003382:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003386:	9001      	str	r0, [sp, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	f1a1 0404 	sub.w	r4, r1, #4
 800338e:	bfb8      	it	lt
 8003390:	18e4      	addlt	r4, r4, r3
 8003392:	f7ff ff7f 	bl	8003294 <__malloc_lock>
 8003396:	4a1e      	ldr	r2, [pc, #120]	; (8003410 <_free_r+0x94>)
 8003398:	9801      	ldr	r0, [sp, #4]
 800339a:	6813      	ldr	r3, [r2, #0]
 800339c:	b933      	cbnz	r3, 80033ac <_free_r+0x30>
 800339e:	6063      	str	r3, [r4, #4]
 80033a0:	6014      	str	r4, [r2, #0]
 80033a2:	b003      	add	sp, #12
 80033a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80033a8:	f7ff bf7a 	b.w	80032a0 <__malloc_unlock>
 80033ac:	42a3      	cmp	r3, r4
 80033ae:	d908      	bls.n	80033c2 <_free_r+0x46>
 80033b0:	6825      	ldr	r5, [r4, #0]
 80033b2:	1961      	adds	r1, r4, r5
 80033b4:	428b      	cmp	r3, r1
 80033b6:	bf01      	itttt	eq
 80033b8:	6819      	ldreq	r1, [r3, #0]
 80033ba:	685b      	ldreq	r3, [r3, #4]
 80033bc:	1949      	addeq	r1, r1, r5
 80033be:	6021      	streq	r1, [r4, #0]
 80033c0:	e7ed      	b.n	800339e <_free_r+0x22>
 80033c2:	461a      	mov	r2, r3
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	b10b      	cbz	r3, 80033cc <_free_r+0x50>
 80033c8:	42a3      	cmp	r3, r4
 80033ca:	d9fa      	bls.n	80033c2 <_free_r+0x46>
 80033cc:	6811      	ldr	r1, [r2, #0]
 80033ce:	1855      	adds	r5, r2, r1
 80033d0:	42a5      	cmp	r5, r4
 80033d2:	d10b      	bne.n	80033ec <_free_r+0x70>
 80033d4:	6824      	ldr	r4, [r4, #0]
 80033d6:	4421      	add	r1, r4
 80033d8:	1854      	adds	r4, r2, r1
 80033da:	42a3      	cmp	r3, r4
 80033dc:	6011      	str	r1, [r2, #0]
 80033de:	d1e0      	bne.n	80033a2 <_free_r+0x26>
 80033e0:	681c      	ldr	r4, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	6053      	str	r3, [r2, #4]
 80033e6:	440c      	add	r4, r1
 80033e8:	6014      	str	r4, [r2, #0]
 80033ea:	e7da      	b.n	80033a2 <_free_r+0x26>
 80033ec:	d902      	bls.n	80033f4 <_free_r+0x78>
 80033ee:	230c      	movs	r3, #12
 80033f0:	6003      	str	r3, [r0, #0]
 80033f2:	e7d6      	b.n	80033a2 <_free_r+0x26>
 80033f4:	6825      	ldr	r5, [r4, #0]
 80033f6:	1961      	adds	r1, r4, r5
 80033f8:	428b      	cmp	r3, r1
 80033fa:	bf04      	itt	eq
 80033fc:	6819      	ldreq	r1, [r3, #0]
 80033fe:	685b      	ldreq	r3, [r3, #4]
 8003400:	6063      	str	r3, [r4, #4]
 8003402:	bf04      	itt	eq
 8003404:	1949      	addeq	r1, r1, r5
 8003406:	6021      	streq	r1, [r4, #0]
 8003408:	6054      	str	r4, [r2, #4]
 800340a:	e7ca      	b.n	80033a2 <_free_r+0x26>
 800340c:	b003      	add	sp, #12
 800340e:	bd30      	pop	{r4, r5, pc}
 8003410:	2000024c 	.word	0x2000024c

08003414 <_malloc_usable_size_r>:
 8003414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003418:	1f18      	subs	r0, r3, #4
 800341a:	2b00      	cmp	r3, #0
 800341c:	bfbc      	itt	lt
 800341e:	580b      	ldrlt	r3, [r1, r0]
 8003420:	18c0      	addlt	r0, r0, r3
 8003422:	4770      	bx	lr

08003424 <_init>:
 8003424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003426:	bf00      	nop
 8003428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342a:	bc08      	pop	{r3}
 800342c:	469e      	mov	lr, r3
 800342e:	4770      	bx	lr

08003430 <_fini>:
 8003430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003432:	bf00      	nop
 8003434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003436:	bc08      	pop	{r3}
 8003438:	469e      	mov	lr, r3
 800343a:	4770      	bx	lr
