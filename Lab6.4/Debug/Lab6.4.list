
Lab6.4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800528c  0800528c  0001528c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005394  08005394  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005394  08005394  00015394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800539c  0800539c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800539c  0800539c  0001539c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053a0  080053a0  000153a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080053a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004178  20000060  08005404  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200041d8  08005404  000241d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dc22  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002585  00000000  00000000  0002dcf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c18  00000000  00000000  00030280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000093a  00000000  00000000  00030e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016958  00000000  00000000  000317d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc60  00000000  00000000  0004812a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e3df  00000000  00000000  00055d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003578  00000000  00000000  000e416c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e76e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005274 	.word	0x08005274

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005274 	.word	0x08005274

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800058c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	4a06      	ldr	r2, [pc, #24]	; (80005ac <vApplicationGetIdleTaskMemory+0x30>)
 8000592:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	2000007c 	.word	0x2000007c
 80005ac:	200000d0 	.word	0x200000d0

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b0a4      	sub	sp, #144	; 0x90
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 fb19 	bl	8000bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f895 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f925 	bl	800080c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c2:	f000 f8f9 	bl	80007b8 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex */
  osMutexDef(myMutex);
 80005c6:	2300      	movs	r3, #0
 80005c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80005cc:	2300      	movs	r3, #0
 80005ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  myMutexHandle = osMutexCreate(osMutex(myMutex));
 80005d2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 ff33 	bl	8002442 <osMutexCreate>
 80005dc:	4603      	mov	r3, r0
 80005de:	4a36      	ldr	r2, [pc, #216]	; (80006b8 <main+0x108>)
 80005e0:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of binSem */
  osSemaphoreDef(binSem);
 80005e2:	2300      	movs	r3, #0
 80005e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80005e8:	2300      	movs	r3, #0
 80005ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  binSemHandle = osSemaphoreCreate(osSemaphore(binSem), 1);
 80005ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80005f2:	2101      	movs	r1, #1
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 ff3c 	bl	8002472 <osSemaphoreCreate>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a2f      	ldr	r2, [pc, #188]	; (80006bc <main+0x10c>)
 80005fe:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue */
  osMessageQDef(myQueue, 16, uint32_t);
 8000600:	4b2f      	ldr	r3, [pc, #188]	; (80006c0 <main+0x110>)
 8000602:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000606:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000608:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueHandle = osMessageCreate(osMessageQ(myQueue), NULL);
 800060c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f001 ff5f 	bl	80024d6 <osMessageCreate>
 8000618:	4603      	mov	r3, r0
 800061a:	4a2a      	ldr	r2, [pc, #168]	; (80006c4 <main+0x114>)
 800061c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800061e:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <main+0x118>)
 8000620:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000624:	461d      	mov	r5, r3
 8000626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000632:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f001 fea2 	bl	8002382 <osThreadCreate>
 800063e:	4603      	mov	r3, r0
 8000640:	4a22      	ldr	r2, [pc, #136]	; (80006cc <main+0x11c>)
 8000642:	6013      	str	r3, [r2, #0]

  /* definition and creation of task_1 */
  osThreadDef(task_1, task_1_thread, osPriorityLow, 0, 128);
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <main+0x120>)
 8000646:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800064a:	461d      	mov	r5, r3
 800064c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000650:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000654:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_1Handle = osThreadCreate(osThread(task_1), NULL);
 8000658:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f001 fe8f 	bl	8002382 <osThreadCreate>
 8000664:	4603      	mov	r3, r0
 8000666:	4a1b      	ldr	r2, [pc, #108]	; (80006d4 <main+0x124>)
 8000668:	6013      	str	r3, [r2, #0]

  /* definition and creation of task_2 */
  osThreadDef(task_2, task_2_thread, osPriorityLow, 0, 128);
 800066a:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <main+0x128>)
 800066c:	f107 041c 	add.w	r4, r7, #28
 8000670:	461d      	mov	r5, r3
 8000672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000676:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800067a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_2Handle = osThreadCreate(osThread(task_2), NULL);
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fe7c 	bl	8002382 <osThreadCreate>
 800068a:	4603      	mov	r3, r0
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <main+0x12c>)
 800068e:	6013      	str	r3, [r2, #0]

  /* definition and creation of task_3 */
  osThreadDef(task_3, task_3_thread, osPriorityLow, 0, 128);
 8000690:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <main+0x130>)
 8000692:	463c      	mov	r4, r7
 8000694:	461d      	mov	r5, r3
 8000696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800069a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800069e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_3Handle = osThreadCreate(osThread(task_3), NULL);
 80006a2:	463b      	mov	r3, r7
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 fe6b 	bl	8002382 <osThreadCreate>
 80006ac:	4603      	mov	r3, r0
 80006ae:	4a0d      	ldr	r2, [pc, #52]	; (80006e4 <main+0x134>)
 80006b0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006b2:	f001 fe5f 	bl	8002374 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <main+0x106>
 80006b8:	2000032c 	.word	0x2000032c
 80006bc:	20000330 	.word	0x20000330
 80006c0:	0800528c 	.word	0x0800528c
 80006c4:	20000328 	.word	0x20000328
 80006c8:	080052a8 	.word	0x080052a8
 80006cc:	20000318 	.word	0x20000318
 80006d0:	080052cc 	.word	0x080052cc
 80006d4:	2000031c 	.word	0x2000031c
 80006d8:	080052f0 	.word	0x080052f0
 80006dc:	20000320 	.word	0x20000320
 80006e0:	08005314 	.word	0x08005314
 80006e4:	20000324 	.word	0x20000324

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	; 0x50
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	2230      	movs	r2, #48	; 0x30
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f004 f938 	bl	800496c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	4b27      	ldr	r3, [pc, #156]	; (80007b0 <SystemClock_Config+0xc8>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	4a26      	ldr	r2, [pc, #152]	; (80007b0 <SystemClock_Config+0xc8>)
 8000716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071a:	6413      	str	r3, [r2, #64]	; 0x40
 800071c:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <SystemClock_Config+0xc8>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <SystemClock_Config+0xcc>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a20      	ldr	r2, [pc, #128]	; (80007b4 <SystemClock_Config+0xcc>)
 8000732:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <SystemClock_Config+0xcc>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000744:	2302      	movs	r3, #2
 8000746:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074c:	2310      	movs	r3, #16
 800074e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000750:	2302      	movs	r3, #2
 8000752:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000754:	2300      	movs	r3, #0
 8000756:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000758:	2308      	movs	r3, #8
 800075a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000760:	2302      	movs	r3, #2
 8000762:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000764:	2304      	movs	r3, #4
 8000766:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000768:	f107 0320 	add.w	r3, r7, #32
 800076c:	4618      	mov	r0, r3
 800076e:	f000 fd33 	bl	80011d8 <HAL_RCC_OscConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000778:	f000 f928 	bl	80009cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077c:	230f      	movs	r3, #15
 800077e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000780:	2302      	movs	r3, #2
 8000782:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	2103      	movs	r1, #3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 ff95 	bl	80016c8 <HAL_RCC_ClockConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007a4:	f000 f912 	bl	80009cc <Error_Handler>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3750      	adds	r7, #80	; 0x50
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40007000 	.word	0x40007000

080007b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007be:	4a12      	ldr	r2, [pc, #72]	; (8000808 <MX_USART2_UART_Init+0x50>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007f0:	f001 f98a 	bl	8001b08 <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007fa:	f000 f8e7 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200002d0 	.word	0x200002d0
 8000808:	40004400 	.word	0x40004400

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	4b2e      	ldr	r3, [pc, #184]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a2d      	ldr	r2, [pc, #180]	; (80008e0 <MX_GPIO_Init+0xd4>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	4b27      	ldr	r3, [pc, #156]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a26      	ldr	r2, [pc, #152]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a1f      	ldr	r2, [pc, #124]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_GPIO_Init+0xd4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_GPIO_Init+0xd4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a18      	ldr	r2, [pc, #96]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f240 2123 	movw	r1, #547	; 0x223
 8000898:	4812      	ldr	r0, [pc, #72]	; (80008e4 <MX_GPIO_Init+0xd8>)
 800089a:	f000 fc83 	bl	80011a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	480c      	ldr	r0, [pc, #48]	; (80008e8 <MX_GPIO_Init+0xdc>)
 80008b6:	f000 faf1 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin|GPIO_PIN_9;
 80008ba:	f240 2323 	movw	r3, #547	; 0x223
 80008be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_GPIO_Init+0xd8>)
 80008d4:	f000 fae2 	bl	8000e9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	; 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020000 	.word	0x40020000
 80008e8:	40020800 	.word	0x40020800

080008ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008f4:	2001      	movs	r0, #1
 80008f6:	f001 fd90 	bl	800241a <osDelay>
 80008fa:	e7fb      	b.n	80008f4 <StartDefaultTask+0x8>

080008fc <task_1_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_1_thread */
void task_1_thread(void const * argument)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	; 0x30
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_1_thread */
  /* Infinite loop */
  int threadID = 0; // threadID is 0 for one thread and 1 for another
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  int idx = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  char buffer[32];
  while(1) {
//	  osSemaphoreWait(binSemHandle, osWaitForever);

	  sprintf(buffer, "TID: %d %d\r\n", threadID, idx);
 800090c:	f107 0008 	add.w	r0, r7, #8
 8000910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000914:	4909      	ldr	r1, [pc, #36]	; (800093c <task_1_thread+0x40>)
 8000916:	f004 f809 	bl	800492c <siprintf>
	  idx ++;
 800091a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800091c:	3301      	adds	r3, #1
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
//	  HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
//	  osMessageQId message = osMessageCreate(myQueueHandle, task_1Handle);
	  osMessagePut(myQueueHandle, buffer, osWaitForever);
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <task_1_thread+0x44>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f107 0108 	add.w	r1, r7, #8
 8000928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800092c:	4618      	mov	r0, r3
 800092e:	f001 fdfb 	bl	8002528 <osMessagePut>
	  osDelay(10);
 8000932:	200a      	movs	r0, #10
 8000934:	f001 fd71 	bl	800241a <osDelay>
  while(1) {
 8000938:	e7e8      	b.n	800090c <task_1_thread+0x10>
 800093a:	bf00      	nop
 800093c:	08005330 	.word	0x08005330
 8000940:	20000328 	.word	0x20000328

08000944 <task_2_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_2_thread */
void task_2_thread(void const * argument)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08c      	sub	sp, #48	; 0x30
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_2_thread */
  /* Infinite loop */
  int threadID = 1; // threadID is 0 for one thread and 1 for another
 800094c:	2301      	movs	r3, #1
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  int idx = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  char buffer[32];
  while(1) {
//	  osSemaphoreWait(binSemHandle, osWaitForever);

	  sprintf(buffer, "TID: %d %d\r\n", threadID, idx);
 8000954:	f107 0008 	add.w	r0, r7, #8
 8000958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800095a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800095c:	4909      	ldr	r1, [pc, #36]	; (8000984 <task_2_thread+0x40>)
 800095e:	f003 ffe5 	bl	800492c <siprintf>
	  idx ++;
 8000962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000964:	3301      	adds	r3, #1
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
//	  HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
//	  osMessageQId message = osMessageCreate(myQueueHandle, task_2Handle);
	  osMessagePut(myQueueHandle, buffer, osWaitForever);
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <task_2_thread+0x44>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f107 0108 	add.w	r1, r7, #8
 8000970:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000974:	4618      	mov	r0, r3
 8000976:	f001 fdd7 	bl	8002528 <osMessagePut>
	  osDelay(10);
 800097a:	200a      	movs	r0, #10
 800097c:	f001 fd4d 	bl	800241a <osDelay>
  while(1) {
 8000980:	e7e8      	b.n	8000954 <task_2_thread+0x10>
 8000982:	bf00      	nop
 8000984:	08005330 	.word	0x08005330
 8000988:	20000328 	.word	0x20000328

0800098c <task_3_thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_3_thread */
void task_3_thread(void const * argument)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08e      	sub	sp, #56	; 0x38
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//	  sprintf(buffer, "TID: hello\n");

//		HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
	osEvent tmpEvent = osMessageGet(myQueueHandle, osWaitForever);
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <task_3_thread+0x38>)
 8000996:	6819      	ldr	r1, [r3, #0]
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009a0:	4618      	mov	r0, r3
 80009a2:	f001 fe01 	bl	80025a8 <osMessageGet>
	if (tmpEvent.status == osEventMessage) {
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	2b10      	cmp	r3, #16
 80009aa:	d106      	bne.n	80009ba <task_3_thread+0x2e>
		HAL_UART_Transmit(&huart2, tmpEvent.value.p, 32, 1000);
 80009ac:	6939      	ldr	r1, [r7, #16]
 80009ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b2:	2220      	movs	r2, #32
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <task_3_thread+0x3c>)
 80009b6:	f001 f8f7 	bl	8001ba8 <HAL_UART_Transmit>
	}
    osDelay(10);
 80009ba:	200a      	movs	r0, #10
 80009bc:	f001 fd2d 	bl	800241a <osDelay>
  {
 80009c0:	e7e8      	b.n	8000994 <task_3_thread+0x8>
 80009c2:	bf00      	nop
 80009c4:	20000328 	.word	0x20000328
 80009c8:	200002d0 	.word	0x200002d0

080009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d0:	b672      	cpsid	i
}
 80009d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <Error_Handler+0x8>
	...

080009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_MspInit+0x54>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	4a11      	ldr	r2, [pc, #68]	; (8000a2c <HAL_MspInit+0x54>)
 80009e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ec:	6453      	str	r3, [r2, #68]	; 0x44
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <HAL_MspInit+0x54>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <HAL_MspInit+0x54>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <HAL_MspInit+0x54>)
 8000a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a08:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_MspInit+0x54>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	210f      	movs	r1, #15
 8000a1a:	f06f 0001 	mvn.w	r0, #1
 8000a1e:	f000 fa14 	bl	8000e4a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a19      	ldr	r2, [pc, #100]	; (8000ab4 <HAL_UART_MspInit+0x84>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d12b      	bne.n	8000aaa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <HAL_UART_MspInit+0x88>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	4a17      	ldr	r2, [pc, #92]	; (8000ab8 <HAL_UART_MspInit+0x88>)
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a60:	6413      	str	r3, [r2, #64]	; 0x40
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <HAL_UART_MspInit+0x88>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <HAL_UART_MspInit+0x88>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a10      	ldr	r2, [pc, #64]	; (8000ab8 <HAL_UART_MspInit+0x88>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_UART_MspInit+0x88>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a8a:	230c      	movs	r3, #12
 8000a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a96:	2303      	movs	r3, #3
 8000a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a9a:	2307      	movs	r3, #7
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4805      	ldr	r0, [pc, #20]	; (8000abc <HAL_UART_MspInit+0x8c>)
 8000aa6:	f000 f9f9 	bl	8000e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aaa:	bf00      	nop
 8000aac:	3728      	adds	r7, #40	; 0x28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40004400 	.word	0x40004400
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020000 	.word	0x40020000

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <UsageFault_Handler+0x4>

08000ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af0:	f000 f8ce 	bl	8000c90 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000af4:	f003 f9d6 	bl	8003ea4 <xTaskGetSchedulerState>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d001      	beq.n	8000b02 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000afe:	f003 fc9b 	bl	8004438 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b10:	4a14      	ldr	r2, [pc, #80]	; (8000b64 <_sbrk+0x5c>)
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <_sbrk+0x60>)
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <_sbrk+0x64>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <_sbrk+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d207      	bcs.n	8000b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b38:	f003 ff20 	bl	800497c <__errno>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	220c      	movs	r2, #12
 8000b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b46:	e009      	b.n	8000b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <_sbrk+0x64>)
 8000b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20020000 	.word	0x20020000
 8000b68:	00000400 	.word	0x00000400
 8000b6c:	20000334 	.word	0x20000334
 8000b70:	200041d8 	.word	0x200041d8

08000b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <SystemInit+0x20>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <SystemInit+0x20>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b9c:	f7ff ffea 	bl	8000b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ba2:	490d      	ldr	r1, [pc, #52]	; (8000bd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba8:	e002      	b.n	8000bb0 <LoopCopyDataInit>

08000baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bae:	3304      	adds	r3, #4

08000bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb4:	d3f9      	bcc.n	8000baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bb8:	4c0a      	ldr	r4, [pc, #40]	; (8000be4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bbc:	e001      	b.n	8000bc2 <LoopFillZerobss>

08000bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc0:	3204      	adds	r2, #4

08000bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc4:	d3fb      	bcc.n	8000bbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f003 fedf 	bl	8004988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bca:	f7ff fcf1 	bl	80005b0 <main>
  bx  lr    
 8000bce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000bdc:	080053a4 	.word	0x080053a4
  ldr r2, =_sbss
 8000be0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000be4:	200041d8 	.word	0x200041d8

08000be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC_IRQHandler>
	...

08000bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <HAL_Init+0x40>)
 8000bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <HAL_Init+0x40>)
 8000c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <HAL_Init+0x40>)
 8000c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 f90d 	bl	8000e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1a:	200f      	movs	r0, #15
 8000c1c:	f000 f808 	bl	8000c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c20:	f7ff feda 	bl	80009d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023c00 	.word	0x40023c00

08000c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_InitTick+0x54>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_InitTick+0x58>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f917 	bl	8000e82 <HAL_SYSTICK_Config>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00e      	b.n	8000c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b0f      	cmp	r3, #15
 8000c62:	d80a      	bhi.n	8000c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c64:	2200      	movs	r2, #0
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 f8ed 	bl	8000e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c70:	4a06      	ldr	r2, [pc, #24]	; (8000c8c <HAL_InitTick+0x5c>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	e000      	b.n	8000c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000000 	.word	0x20000000
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000004 	.word	0x20000004

08000c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000338 	.word	0x20000338

08000cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000338 	.word	0x20000338

08000cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cec:	4013      	ands	r3, r2
 8000cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d02:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	60d3      	str	r3, [r2, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <__NVIC_GetPriorityGrouping+0x18>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	f003 0307 	and.w	r3, r3, #7
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	; (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	; (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	; 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e00:	d301      	bcc.n	8000e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00f      	b.n	8000e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e06:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <SysTick_Config+0x40>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0e:	210f      	movs	r1, #15
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e14:	f7ff ff8e 	bl	8000d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <SysTick_Config+0x40>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1e:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <SysTick_Config+0x40>)
 8000e20:	2207      	movs	r2, #7
 8000e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	e000e010 	.word	0xe000e010

08000e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ff47 	bl	8000cd0 <__NVIC_SetPriorityGrouping>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b086      	sub	sp, #24
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
 8000e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5c:	f7ff ff5c 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 8000e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	68b9      	ldr	r1, [r7, #8]
 8000e66:	6978      	ldr	r0, [r7, #20]
 8000e68:	f7ff ff8e 	bl	8000d88 <NVIC_EncodePriority>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff5d 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ffb0 	bl	8000df0 <SysTick_Config>
 8000e90:	4603      	mov	r3, r0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	; 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	e159      	b.n	800116c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb8:	2201      	movs	r2, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	f040 8148 	bne.w	8001166 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d005      	beq.n	8000eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d130      	bne.n	8000f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	2203      	movs	r2, #3
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	68da      	ldr	r2, [r3, #12]
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f24:	2201      	movs	r2, #1
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	091b      	lsrs	r3, r3, #4
 8000f3a:	f003 0201 	and.w	r2, r3, #1
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b03      	cmp	r3, #3
 8000f5a:	d017      	beq.n	8000f8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2203      	movs	r2, #3
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d123      	bne.n	8000fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	08da      	lsrs	r2, r3, #3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3208      	adds	r2, #8
 8000fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	f003 0307 	and.w	r3, r3, #7
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	220f      	movs	r2, #15
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	691a      	ldr	r2, [r3, #16]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	08da      	lsrs	r2, r3, #3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3208      	adds	r2, #8
 8000fda:	69b9      	ldr	r1, [r7, #24]
 8000fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2203      	movs	r2, #3
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0203 	and.w	r2, r3, #3
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 80a2 	beq.w	8001166 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b57      	ldr	r3, [pc, #348]	; (8001184 <HAL_GPIO_Init+0x2e8>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a56      	ldr	r2, [pc, #344]	; (8001184 <HAL_GPIO_Init+0x2e8>)
 800102c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b54      	ldr	r3, [pc, #336]	; (8001184 <HAL_GPIO_Init+0x2e8>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800103e:	4a52      	ldr	r2, [pc, #328]	; (8001188 <HAL_GPIO_Init+0x2ec>)
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	089b      	lsrs	r3, r3, #2
 8001044:	3302      	adds	r3, #2
 8001046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	220f      	movs	r2, #15
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a49      	ldr	r2, [pc, #292]	; (800118c <HAL_GPIO_Init+0x2f0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d019      	beq.n	800109e <HAL_GPIO_Init+0x202>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a48      	ldr	r2, [pc, #288]	; (8001190 <HAL_GPIO_Init+0x2f4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d013      	beq.n	800109a <HAL_GPIO_Init+0x1fe>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a47      	ldr	r2, [pc, #284]	; (8001194 <HAL_GPIO_Init+0x2f8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d00d      	beq.n	8001096 <HAL_GPIO_Init+0x1fa>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a46      	ldr	r2, [pc, #280]	; (8001198 <HAL_GPIO_Init+0x2fc>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d007      	beq.n	8001092 <HAL_GPIO_Init+0x1f6>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a45      	ldr	r2, [pc, #276]	; (800119c <HAL_GPIO_Init+0x300>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d101      	bne.n	800108e <HAL_GPIO_Init+0x1f2>
 800108a:	2304      	movs	r3, #4
 800108c:	e008      	b.n	80010a0 <HAL_GPIO_Init+0x204>
 800108e:	2307      	movs	r3, #7
 8001090:	e006      	b.n	80010a0 <HAL_GPIO_Init+0x204>
 8001092:	2303      	movs	r3, #3
 8001094:	e004      	b.n	80010a0 <HAL_GPIO_Init+0x204>
 8001096:	2302      	movs	r3, #2
 8001098:	e002      	b.n	80010a0 <HAL_GPIO_Init+0x204>
 800109a:	2301      	movs	r3, #1
 800109c:	e000      	b.n	80010a0 <HAL_GPIO_Init+0x204>
 800109e:	2300      	movs	r3, #0
 80010a0:	69fa      	ldr	r2, [r7, #28]
 80010a2:	f002 0203 	and.w	r2, r2, #3
 80010a6:	0092      	lsls	r2, r2, #2
 80010a8:	4093      	lsls	r3, r2
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b0:	4935      	ldr	r1, [pc, #212]	; (8001188 <HAL_GPIO_Init+0x2ec>)
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	089b      	lsrs	r3, r3, #2
 80010b6:	3302      	adds	r3, #2
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010be:	4b38      	ldr	r3, [pc, #224]	; (80011a0 <HAL_GPIO_Init+0x304>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010e2:	4a2f      	ldr	r2, [pc, #188]	; (80011a0 <HAL_GPIO_Init+0x304>)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010e8:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <HAL_GPIO_Init+0x304>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800110c:	4a24      	ldr	r2, [pc, #144]	; (80011a0 <HAL_GPIO_Init+0x304>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001112:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <HAL_GPIO_Init+0x304>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001136:	4a1a      	ldr	r2, [pc, #104]	; (80011a0 <HAL_GPIO_Init+0x304>)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <HAL_GPIO_Init+0x304>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001160:	4a0f      	ldr	r2, [pc, #60]	; (80011a0 <HAL_GPIO_Init+0x304>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3301      	adds	r3, #1
 800116a:	61fb      	str	r3, [r7, #28]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	2b0f      	cmp	r3, #15
 8001170:	f67f aea2 	bls.w	8000eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40023800 	.word	0x40023800
 8001188:	40013800 	.word	0x40013800
 800118c:	40020000 	.word	0x40020000
 8001190:	40020400 	.word	0x40020400
 8001194:	40020800 	.word	0x40020800
 8001198:	40020c00 	.word	0x40020c00
 800119c:	40021000 	.word	0x40021000
 80011a0:	40013c00 	.word	0x40013c00

080011a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
 80011b0:	4613      	mov	r3, r2
 80011b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b4:	787b      	ldrb	r3, [r7, #1]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011c0:	e003      	b.n	80011ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011c2:	887b      	ldrh	r3, [r7, #2]
 80011c4:	041a      	lsls	r2, r3, #16
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	619a      	str	r2, [r3, #24]
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e267      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d075      	beq.n	80012e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011f6:	4b88      	ldr	r3, [pc, #544]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b04      	cmp	r3, #4
 8001200:	d00c      	beq.n	800121c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001202:	4b85      	ldr	r3, [pc, #532]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800120a:	2b08      	cmp	r3, #8
 800120c:	d112      	bne.n	8001234 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800120e:	4b82      	ldr	r3, [pc, #520]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800121a:	d10b      	bne.n	8001234 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121c:	4b7e      	ldr	r3, [pc, #504]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d05b      	beq.n	80012e0 <HAL_RCC_OscConfig+0x108>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d157      	bne.n	80012e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e242      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800123c:	d106      	bne.n	800124c <HAL_RCC_OscConfig+0x74>
 800123e:	4b76      	ldr	r3, [pc, #472]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a75      	ldr	r2, [pc, #468]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	e01d      	b.n	8001288 <HAL_RCC_OscConfig+0xb0>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001254:	d10c      	bne.n	8001270 <HAL_RCC_OscConfig+0x98>
 8001256:	4b70      	ldr	r3, [pc, #448]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a6f      	ldr	r2, [pc, #444]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 800125c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	4b6d      	ldr	r3, [pc, #436]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a6c      	ldr	r2, [pc, #432]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e00b      	b.n	8001288 <HAL_RCC_OscConfig+0xb0>
 8001270:	4b69      	ldr	r3, [pc, #420]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a68      	ldr	r2, [pc, #416]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b66      	ldr	r3, [pc, #408]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a65      	ldr	r2, [pc, #404]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d013      	beq.n	80012b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001290:	f7ff fd12 	bl	8000cb8 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001298:	f7ff fd0e 	bl	8000cb8 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b64      	cmp	r3, #100	; 0x64
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e207      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012aa:	4b5b      	ldr	r3, [pc, #364]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0xc0>
 80012b6:	e014      	b.n	80012e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fcfe 	bl	8000cb8 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c0:	f7ff fcfa 	bl	8000cb8 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b64      	cmp	r3, #100	; 0x64
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e1f3      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d2:	4b51      	ldr	r3, [pc, #324]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f0      	bne.n	80012c0 <HAL_RCC_OscConfig+0xe8>
 80012de:	e000      	b.n	80012e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d063      	beq.n	80013b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ee:	4b4a      	ldr	r3, [pc, #296]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00b      	beq.n	8001312 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fa:	4b47      	ldr	r3, [pc, #284]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001302:	2b08      	cmp	r3, #8
 8001304:	d11c      	bne.n	8001340 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001306:	4b44      	ldr	r3, [pc, #272]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d116      	bne.n	8001340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001312:	4b41      	ldr	r3, [pc, #260]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <HAL_RCC_OscConfig+0x152>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d001      	beq.n	800132a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e1c7      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132a:	4b3b      	ldr	r3, [pc, #236]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	4937      	ldr	r1, [pc, #220]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 800133a:	4313      	orrs	r3, r2
 800133c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133e:	e03a      	b.n	80013b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d020      	beq.n	800138a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001348:	4b34      	ldr	r3, [pc, #208]	; (800141c <HAL_RCC_OscConfig+0x244>)
 800134a:	2201      	movs	r2, #1
 800134c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134e:	f7ff fcb3 	bl	8000cb8 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001356:	f7ff fcaf 	bl	8000cb8 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e1a8      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001368:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001374:	4b28      	ldr	r3, [pc, #160]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4925      	ldr	r1, [pc, #148]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 8001384:	4313      	orrs	r3, r2
 8001386:	600b      	str	r3, [r1, #0]
 8001388:	e015      	b.n	80013b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138a:	4b24      	ldr	r3, [pc, #144]	; (800141c <HAL_RCC_OscConfig+0x244>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001390:	f7ff fc92 	bl	8000cb8 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001398:	f7ff fc8e 	bl	8000cb8 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e187      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013aa:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d036      	beq.n	8001430 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d016      	beq.n	80013f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_RCC_OscConfig+0x248>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d0:	f7ff fc72 	bl	8000cb8 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d8:	f7ff fc6e 	bl	8000cb8 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e167      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_RCC_OscConfig+0x240>)
 80013ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0x200>
 80013f6:	e01b      	b.n	8001430 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_RCC_OscConfig+0x248>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fe:	f7ff fc5b 	bl	8000cb8 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001404:	e00e      	b.n	8001424 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001406:	f7ff fc57 	bl	8000cb8 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d907      	bls.n	8001424 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e150      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
 8001418:	40023800 	.word	0x40023800
 800141c:	42470000 	.word	0x42470000
 8001420:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001424:	4b88      	ldr	r3, [pc, #544]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1ea      	bne.n	8001406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 8097 	beq.w	800156c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001442:	4b81      	ldr	r3, [pc, #516]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10f      	bne.n	800146e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b7d      	ldr	r3, [pc, #500]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a7c      	ldr	r2, [pc, #496]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b7a      	ldr	r3, [pc, #488]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800146a:	2301      	movs	r3, #1
 800146c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146e:	4b77      	ldr	r3, [pc, #476]	; (800164c <HAL_RCC_OscConfig+0x474>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001476:	2b00      	cmp	r3, #0
 8001478:	d118      	bne.n	80014ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800147a:	4b74      	ldr	r3, [pc, #464]	; (800164c <HAL_RCC_OscConfig+0x474>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a73      	ldr	r2, [pc, #460]	; (800164c <HAL_RCC_OscConfig+0x474>)
 8001480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001486:	f7ff fc17 	bl	8000cb8 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800148e:	f7ff fc13 	bl	8000cb8 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e10c      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a0:	4b6a      	ldr	r3, [pc, #424]	; (800164c <HAL_RCC_OscConfig+0x474>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f0      	beq.n	800148e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d106      	bne.n	80014c2 <HAL_RCC_OscConfig+0x2ea>
 80014b4:	4b64      	ldr	r3, [pc, #400]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b8:	4a63      	ldr	r2, [pc, #396]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6713      	str	r3, [r2, #112]	; 0x70
 80014c0:	e01c      	b.n	80014fc <HAL_RCC_OscConfig+0x324>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b05      	cmp	r3, #5
 80014c8:	d10c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x30c>
 80014ca:	4b5f      	ldr	r3, [pc, #380]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ce:	4a5e      	ldr	r2, [pc, #376]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	6713      	str	r3, [r2, #112]	; 0x70
 80014d6:	4b5c      	ldr	r3, [pc, #368]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014da:	4a5b      	ldr	r2, [pc, #364]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6713      	str	r3, [r2, #112]	; 0x70
 80014e2:	e00b      	b.n	80014fc <HAL_RCC_OscConfig+0x324>
 80014e4:	4b58      	ldr	r3, [pc, #352]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e8:	4a57      	ldr	r2, [pc, #348]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014ea:	f023 0301 	bic.w	r3, r3, #1
 80014ee:	6713      	str	r3, [r2, #112]	; 0x70
 80014f0:	4b55      	ldr	r3, [pc, #340]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f4:	4a54      	ldr	r2, [pc, #336]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80014f6:	f023 0304 	bic.w	r3, r3, #4
 80014fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d015      	beq.n	8001530 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001504:	f7ff fbd8 	bl	8000cb8 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800150a:	e00a      	b.n	8001522 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800150c:	f7ff fbd4 	bl	8000cb8 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f241 3288 	movw	r2, #5000	; 0x1388
 800151a:	4293      	cmp	r3, r2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e0cb      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001522:	4b49      	ldr	r3, [pc, #292]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0ee      	beq.n	800150c <HAL_RCC_OscConfig+0x334>
 800152e:	e014      	b.n	800155a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001530:	f7ff fbc2 	bl	8000cb8 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001536:	e00a      	b.n	800154e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001538:	f7ff fbbe 	bl	8000cb8 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	f241 3288 	movw	r2, #5000	; 0x1388
 8001546:	4293      	cmp	r3, r2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e0b5      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154e:	4b3e      	ldr	r3, [pc, #248]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1ee      	bne.n	8001538 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800155a:	7dfb      	ldrb	r3, [r7, #23]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d105      	bne.n	800156c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001560:	4b39      	ldr	r3, [pc, #228]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	4a38      	ldr	r2, [pc, #224]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800156a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 80a1 	beq.w	80016b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001576:	4b34      	ldr	r3, [pc, #208]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b08      	cmp	r3, #8
 8001580:	d05c      	beq.n	800163c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d141      	bne.n	800160e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158a:	4b31      	ldr	r3, [pc, #196]	; (8001650 <HAL_RCC_OscConfig+0x478>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fb92 	bl	8000cb8 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001598:	f7ff fb8e 	bl	8000cb8 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e087      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015aa:	4b27      	ldr	r3, [pc, #156]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69da      	ldr	r2, [r3, #28]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	019b      	lsls	r3, r3, #6
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	085b      	lsrs	r3, r3, #1
 80015ce:	3b01      	subs	r3, #1
 80015d0:	041b      	lsls	r3, r3, #16
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d8:	061b      	lsls	r3, r3, #24
 80015da:	491b      	ldr	r1, [pc, #108]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <HAL_RCC_OscConfig+0x478>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff fb67 	bl	8000cb8 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ee:	f7ff fb63 	bl	8000cb8 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e05c      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x416>
 800160c:	e054      	b.n	80016b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_RCC_OscConfig+0x478>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001614:	f7ff fb50 	bl	8000cb8 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161c:	f7ff fb4c 	bl	8000cb8 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e045      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_RCC_OscConfig+0x470>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x444>
 800163a:	e03d      	b.n	80016b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d107      	bne.n	8001654 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e038      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
 8001648:	40023800 	.word	0x40023800
 800164c:	40007000 	.word	0x40007000
 8001650:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_RCC_OscConfig+0x4ec>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d028      	beq.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800166c:	429a      	cmp	r2, r3
 800166e:	d121      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167a:	429a      	cmp	r2, r3
 800167c:	d11a      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001684:	4013      	ands	r3, r2
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800168a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800168c:	4293      	cmp	r3, r2
 800168e:	d111      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169a:	085b      	lsrs	r3, r3, #1
 800169c:	3b01      	subs	r3, #1
 800169e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d107      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800

080016c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e0cc      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016dc:	4b68      	ldr	r3, [pc, #416]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d90c      	bls.n	8001704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ea:	4b65      	ldr	r3, [pc, #404]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f2:	4b63      	ldr	r3, [pc, #396]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d001      	beq.n	8001704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e0b8      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d020      	beq.n	8001752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800171c:	4b59      	ldr	r3, [pc, #356]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	4a58      	ldr	r2, [pc, #352]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001726:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001734:	4b53      	ldr	r3, [pc, #332]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	4a52      	ldr	r2, [pc, #328]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800173e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001740:	4b50      	ldr	r3, [pc, #320]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	494d      	ldr	r1, [pc, #308]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	4313      	orrs	r3, r2
 8001750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d044      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d107      	bne.n	8001776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	4b47      	ldr	r3, [pc, #284]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d119      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e07f      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d003      	beq.n	8001786 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001782:	2b03      	cmp	r3, #3
 8001784:	d107      	bne.n	8001796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001786:	4b3f      	ldr	r3, [pc, #252]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d109      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e06f      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001796:	4b3b      	ldr	r3, [pc, #236]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e067      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017a6:	4b37      	ldr	r3, [pc, #220]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f023 0203 	bic.w	r2, r3, #3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4934      	ldr	r1, [pc, #208]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b8:	f7ff fa7e 	bl	8000cb8 <HAL_GetTick>
 80017bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017be:	e00a      	b.n	80017d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c0:	f7ff fa7a 	bl	8000cb8 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e04f      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d6:	4b2b      	ldr	r3, [pc, #172]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 020c 	and.w	r2, r3, #12
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d1eb      	bne.n	80017c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e8:	4b25      	ldr	r3, [pc, #148]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d20c      	bcs.n	8001810 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b22      	ldr	r3, [pc, #136]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b20      	ldr	r3, [pc, #128]	; (8001880 <HAL_RCC_ClockConfig+0x1b8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e032      	b.n	8001876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d008      	beq.n	800182e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800181c:	4b19      	ldr	r3, [pc, #100]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4916      	ldr	r1, [pc, #88]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d009      	beq.n	800184e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800183a:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	490e      	ldr	r1, [pc, #56]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	4313      	orrs	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800184e:	f000 f821 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8001852:	4602      	mov	r2, r0
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	490a      	ldr	r1, [pc, #40]	; (8001888 <HAL_RCC_ClockConfig+0x1c0>)
 8001860:	5ccb      	ldrb	r3, [r1, r3]
 8001862:	fa22 f303 	lsr.w	r3, r2, r3
 8001866:	4a09      	ldr	r2, [pc, #36]	; (800188c <HAL_RCC_ClockConfig+0x1c4>)
 8001868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_RCC_ClockConfig+0x1c8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff f9de 	bl	8000c30 <HAL_InitTick>

  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40023c00 	.word	0x40023c00
 8001884:	40023800 	.word	0x40023800
 8001888:	08005348 	.word	0x08005348
 800188c:	20000000 	.word	0x20000000
 8001890:	20000004 	.word	0x20000004

08001894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001898:	b094      	sub	sp, #80	; 0x50
 800189a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	647b      	str	r3, [r7, #68]	; 0x44
 80018a0:	2300      	movs	r3, #0
 80018a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018a4:	2300      	movs	r3, #0
 80018a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018ac:	4b79      	ldr	r3, [pc, #484]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f003 030c 	and.w	r3, r3, #12
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d00d      	beq.n	80018d4 <HAL_RCC_GetSysClockFreq+0x40>
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	f200 80e1 	bhi.w	8001a80 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d002      	beq.n	80018c8 <HAL_RCC_GetSysClockFreq+0x34>
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d003      	beq.n	80018ce <HAL_RCC_GetSysClockFreq+0x3a>
 80018c6:	e0db      	b.n	8001a80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018c8:	4b73      	ldr	r3, [pc, #460]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x204>)
 80018ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80018cc:	e0db      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ce:	4b73      	ldr	r3, [pc, #460]	; (8001a9c <HAL_RCC_GetSysClockFreq+0x208>)
 80018d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018d2:	e0d8      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018d4:	4b6f      	ldr	r3, [pc, #444]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018de:	4b6d      	ldr	r3, [pc, #436]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d063      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ea:	4b6a      	ldr	r3, [pc, #424]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	099b      	lsrs	r3, r3, #6
 80018f0:	2200      	movs	r2, #0
 80018f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80018f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018fc:	633b      	str	r3, [r7, #48]	; 0x30
 80018fe:	2300      	movs	r3, #0
 8001900:	637b      	str	r3, [r7, #52]	; 0x34
 8001902:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001906:	4622      	mov	r2, r4
 8001908:	462b      	mov	r3, r5
 800190a:	f04f 0000 	mov.w	r0, #0
 800190e:	f04f 0100 	mov.w	r1, #0
 8001912:	0159      	lsls	r1, r3, #5
 8001914:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001918:	0150      	lsls	r0, r2, #5
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4621      	mov	r1, r4
 8001920:	1a51      	subs	r1, r2, r1
 8001922:	6139      	str	r1, [r7, #16]
 8001924:	4629      	mov	r1, r5
 8001926:	eb63 0301 	sbc.w	r3, r3, r1
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001938:	4659      	mov	r1, fp
 800193a:	018b      	lsls	r3, r1, #6
 800193c:	4651      	mov	r1, sl
 800193e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001942:	4651      	mov	r1, sl
 8001944:	018a      	lsls	r2, r1, #6
 8001946:	4651      	mov	r1, sl
 8001948:	ebb2 0801 	subs.w	r8, r2, r1
 800194c:	4659      	mov	r1, fp
 800194e:	eb63 0901 	sbc.w	r9, r3, r1
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800195e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001962:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001966:	4690      	mov	r8, r2
 8001968:	4699      	mov	r9, r3
 800196a:	4623      	mov	r3, r4
 800196c:	eb18 0303 	adds.w	r3, r8, r3
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	462b      	mov	r3, r5
 8001974:	eb49 0303 	adc.w	r3, r9, r3
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001986:	4629      	mov	r1, r5
 8001988:	024b      	lsls	r3, r1, #9
 800198a:	4621      	mov	r1, r4
 800198c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001990:	4621      	mov	r1, r4
 8001992:	024a      	lsls	r2, r1, #9
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800199a:	2200      	movs	r2, #0
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
 800199e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019a4:	f7fe fc6c 	bl	8000280 <__aeabi_uldivmod>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4613      	mov	r3, r2
 80019ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019b0:	e058      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b2:	4b38      	ldr	r3, [pc, #224]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	099b      	lsrs	r3, r3, #6
 80019b8:	2200      	movs	r2, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	4611      	mov	r1, r2
 80019be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019c2:	623b      	str	r3, [r7, #32]
 80019c4:	2300      	movs	r3, #0
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
 80019c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019cc:	4642      	mov	r2, r8
 80019ce:	464b      	mov	r3, r9
 80019d0:	f04f 0000 	mov.w	r0, #0
 80019d4:	f04f 0100 	mov.w	r1, #0
 80019d8:	0159      	lsls	r1, r3, #5
 80019da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019de:	0150      	lsls	r0, r2, #5
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4641      	mov	r1, r8
 80019e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80019ea:	4649      	mov	r1, r9
 80019ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a04:	ebb2 040a 	subs.w	r4, r2, sl
 8001a08:	eb63 050b 	sbc.w	r5, r3, fp
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	00eb      	lsls	r3, r5, #3
 8001a16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a1a:	00e2      	lsls	r2, r4, #3
 8001a1c:	4614      	mov	r4, r2
 8001a1e:	461d      	mov	r5, r3
 8001a20:	4643      	mov	r3, r8
 8001a22:	18e3      	adds	r3, r4, r3
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	464b      	mov	r3, r9
 8001a28:	eb45 0303 	adc.w	r3, r5, r3
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a3a:	4629      	mov	r1, r5
 8001a3c:	028b      	lsls	r3, r1, #10
 8001a3e:	4621      	mov	r1, r4
 8001a40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a44:	4621      	mov	r1, r4
 8001a46:	028a      	lsls	r2, r1, #10
 8001a48:	4610      	mov	r0, r2
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61bb      	str	r3, [r7, #24]
 8001a52:	61fa      	str	r2, [r7, #28]
 8001a54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a58:	f7fe fc12 	bl	8000280 <__aeabi_uldivmod>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4613      	mov	r3, r2
 8001a62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	0c1b      	lsrs	r3, r3, #16
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	3301      	adds	r3, #1
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a7e:	e002      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3750      	adds	r7, #80	; 0x50
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	00f42400 	.word	0x00f42400
 8001a9c:	007a1200 	.word	0x007a1200

08001aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aa4:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000000 	.word	0x20000000

08001ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001abc:	f7ff fff0 	bl	8001aa0 <HAL_RCC_GetHCLKFreq>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	0a9b      	lsrs	r3, r3, #10
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	4903      	ldr	r1, [pc, #12]	; (8001adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ace:	5ccb      	ldrb	r3, [r1, r3]
 8001ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	08005358 	.word	0x08005358

08001ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ae4:	f7ff ffdc 	bl	8001aa0 <HAL_RCC_GetHCLKFreq>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	0b5b      	lsrs	r3, r3, #13
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	4903      	ldr	r1, [pc, #12]	; (8001b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001af6:	5ccb      	ldrb	r3, [r1, r3]
 8001af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40023800 	.word	0x40023800
 8001b04:	08005358 	.word	0x08005358

08001b08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e042      	b.n	8001ba0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d106      	bne.n	8001b34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7fe ff7e 	bl	8000a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2224      	movs	r2, #36	; 0x24
 8001b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f973 	bl	8001e38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	695a      	ldr	r2, [r3, #20]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2220      	movs	r2, #32
 8001b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af02      	add	r7, sp, #8
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b20      	cmp	r3, #32
 8001bc6:	d175      	bne.n	8001cb4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d002      	beq.n	8001bd4 <HAL_UART_Transmit+0x2c>
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e06e      	b.n	8001cb6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2221      	movs	r2, #33	; 0x21
 8001be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001be6:	f7ff f867 	bl	8000cb8 <HAL_GetTick>
 8001bea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	88fa      	ldrh	r2, [r7, #6]
 8001bf0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	88fa      	ldrh	r2, [r7, #6]
 8001bf6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c00:	d108      	bne.n	8001c14 <HAL_UART_Transmit+0x6c>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d104      	bne.n	8001c14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	e003      	b.n	8001c1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c1c:	e02e      	b.n	8001c7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	2200      	movs	r2, #0
 8001c26:	2180      	movs	r1, #128	; 0x80
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 f848 	bl	8001cbe <UART_WaitOnFlagUntilTimeout>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2220      	movs	r2, #32
 8001c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e03a      	b.n	8001cb6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10b      	bne.n	8001c5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	3302      	adds	r3, #2
 8001c5a:	61bb      	str	r3, [r7, #24]
 8001c5c:	e007      	b.n	8001c6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	781a      	ldrb	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	3b01      	subs	r3, #1
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1cb      	bne.n	8001c1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2140      	movs	r1, #64	; 0x40
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f000 f814 	bl	8001cbe <UART_WaitOnFlagUntilTimeout>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e006      	b.n	8001cb6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2220      	movs	r2, #32
 8001cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	e000      	b.n	8001cb6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001cb4:	2302      	movs	r3, #2
  }
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3720      	adds	r7, #32
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	603b      	str	r3, [r7, #0]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cce:	e03b      	b.n	8001d48 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cd6:	d037      	beq.n	8001d48 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cd8:	f7fe ffee 	bl	8000cb8 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	6a3a      	ldr	r2, [r7, #32]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d302      	bcc.n	8001cee <UART_WaitOnFlagUntilTimeout+0x30>
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e03a      	b.n	8001d68 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d023      	beq.n	8001d48 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b80      	cmp	r3, #128	; 0x80
 8001d04:	d020      	beq.n	8001d48 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b40      	cmp	r3, #64	; 0x40
 8001d0a:	d01d      	beq.n	8001d48 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d116      	bne.n	8001d48 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 f81d 	bl	8001d70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2208      	movs	r2, #8
 8001d3a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e00f      	b.n	8001d68 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	4013      	ands	r3, r2
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	bf0c      	ite	eq
 8001d58:	2301      	moveq	r3, #1
 8001d5a:	2300      	movne	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	461a      	mov	r2, r3
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d0b4      	beq.n	8001cd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b095      	sub	sp, #84	; 0x54
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	330c      	adds	r3, #12
 8001d7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d82:	e853 3f00 	ldrex	r3, [r3]
 8001d86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	330c      	adds	r3, #12
 8001d96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d98:	643a      	str	r2, [r7, #64]	; 0x40
 8001d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001d9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001da0:	e841 2300 	strex	r3, r2, [r1]
 8001da4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1e5      	bne.n	8001d78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	3314      	adds	r3, #20
 8001db2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	e853 3f00 	ldrex	r3, [r3]
 8001dba:	61fb      	str	r3, [r7, #28]
   return(result);
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f023 0301 	bic.w	r3, r3, #1
 8001dc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	3314      	adds	r3, #20
 8001dca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001dcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dd4:	e841 2300 	strex	r3, r2, [r1]
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1e5      	bne.n	8001dac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d119      	bne.n	8001e1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	330c      	adds	r3, #12
 8001dee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	e853 3f00 	ldrex	r3, [r3]
 8001df6:	60bb      	str	r3, [r7, #8]
   return(result);
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f023 0310 	bic.w	r3, r3, #16
 8001dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	330c      	adds	r3, #12
 8001e06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e08:	61ba      	str	r2, [r7, #24]
 8001e0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e0c:	6979      	ldr	r1, [r7, #20]
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	e841 2300 	strex	r3, r2, [r1]
 8001e14:	613b      	str	r3, [r7, #16]
   return(result);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1e5      	bne.n	8001de8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001e2a:	bf00      	nop
 8001e2c:	3754      	adds	r7, #84	; 0x54
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e3c:	b0c0      	sub	sp, #256	; 0x100
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e54:	68d9      	ldr	r1, [r3, #12]
 8001e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	ea40 0301 	orr.w	r3, r0, r1
 8001e60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	431a      	orrs	r2, r3
 8001e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001e90:	f021 010c 	bic.w	r1, r1, #12
 8001e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001e9e:	430b      	orrs	r3, r1
 8001ea0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eb2:	6999      	ldr	r1, [r3, #24]
 8001eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	ea40 0301 	orr.w	r3, r0, r1
 8001ebe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	4b8f      	ldr	r3, [pc, #572]	; (8002104 <UART_SetConfig+0x2cc>)
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d005      	beq.n	8001ed8 <UART_SetConfig+0xa0>
 8001ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	4b8d      	ldr	r3, [pc, #564]	; (8002108 <UART_SetConfig+0x2d0>)
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d104      	bne.n	8001ee2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ed8:	f7ff fe02 	bl	8001ae0 <HAL_RCC_GetPCLK2Freq>
 8001edc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001ee0:	e003      	b.n	8001eea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ee2:	f7ff fde9 	bl	8001ab8 <HAL_RCC_GetPCLK1Freq>
 8001ee6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ef4:	f040 810c 	bne.w	8002110 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001efc:	2200      	movs	r2, #0
 8001efe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001f02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001f06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001f0a:	4622      	mov	r2, r4
 8001f0c:	462b      	mov	r3, r5
 8001f0e:	1891      	adds	r1, r2, r2
 8001f10:	65b9      	str	r1, [r7, #88]	; 0x58
 8001f12:	415b      	adcs	r3, r3
 8001f14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f1a:	4621      	mov	r1, r4
 8001f1c:	eb12 0801 	adds.w	r8, r2, r1
 8001f20:	4629      	mov	r1, r5
 8001f22:	eb43 0901 	adc.w	r9, r3, r1
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	f04f 0300 	mov.w	r3, #0
 8001f2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f3a:	4690      	mov	r8, r2
 8001f3c:	4699      	mov	r9, r3
 8001f3e:	4623      	mov	r3, r4
 8001f40:	eb18 0303 	adds.w	r3, r8, r3
 8001f44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001f48:	462b      	mov	r3, r5
 8001f4a:	eb49 0303 	adc.w	r3, r9, r3
 8001f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001f5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001f62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001f66:	460b      	mov	r3, r1
 8001f68:	18db      	adds	r3, r3, r3
 8001f6a:	653b      	str	r3, [r7, #80]	; 0x50
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	eb42 0303 	adc.w	r3, r2, r3
 8001f72:	657b      	str	r3, [r7, #84]	; 0x54
 8001f74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001f7c:	f7fe f980 	bl	8000280 <__aeabi_uldivmod>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4b61      	ldr	r3, [pc, #388]	; (800210c <UART_SetConfig+0x2d4>)
 8001f86:	fba3 2302 	umull	r2, r3, r3, r2
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	011c      	lsls	r4, r3, #4
 8001f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f92:	2200      	movs	r2, #0
 8001f94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001f9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001fa0:	4642      	mov	r2, r8
 8001fa2:	464b      	mov	r3, r9
 8001fa4:	1891      	adds	r1, r2, r2
 8001fa6:	64b9      	str	r1, [r7, #72]	; 0x48
 8001fa8:	415b      	adcs	r3, r3
 8001faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001fb0:	4641      	mov	r1, r8
 8001fb2:	eb12 0a01 	adds.w	sl, r2, r1
 8001fb6:	4649      	mov	r1, r9
 8001fb8:	eb43 0b01 	adc.w	fp, r3, r1
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001fc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001fcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fd0:	4692      	mov	sl, r2
 8001fd2:	469b      	mov	fp, r3
 8001fd4:	4643      	mov	r3, r8
 8001fd6:	eb1a 0303 	adds.w	r3, sl, r3
 8001fda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001fde:	464b      	mov	r3, r9
 8001fe0:	eb4b 0303 	adc.w	r3, fp, r3
 8001fe4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001ff4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001ff8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	18db      	adds	r3, r3, r3
 8002000:	643b      	str	r3, [r7, #64]	; 0x40
 8002002:	4613      	mov	r3, r2
 8002004:	eb42 0303 	adc.w	r3, r2, r3
 8002008:	647b      	str	r3, [r7, #68]	; 0x44
 800200a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800200e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002012:	f7fe f935 	bl	8000280 <__aeabi_uldivmod>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4611      	mov	r1, r2
 800201c:	4b3b      	ldr	r3, [pc, #236]	; (800210c <UART_SetConfig+0x2d4>)
 800201e:	fba3 2301 	umull	r2, r3, r3, r1
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	2264      	movs	r2, #100	; 0x64
 8002026:	fb02 f303 	mul.w	r3, r2, r3
 800202a:	1acb      	subs	r3, r1, r3
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002032:	4b36      	ldr	r3, [pc, #216]	; (800210c <UART_SetConfig+0x2d4>)
 8002034:	fba3 2302 	umull	r2, r3, r3, r2
 8002038:	095b      	lsrs	r3, r3, #5
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002040:	441c      	add	r4, r3
 8002042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002046:	2200      	movs	r2, #0
 8002048:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800204c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002050:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002054:	4642      	mov	r2, r8
 8002056:	464b      	mov	r3, r9
 8002058:	1891      	adds	r1, r2, r2
 800205a:	63b9      	str	r1, [r7, #56]	; 0x38
 800205c:	415b      	adcs	r3, r3
 800205e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002060:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002064:	4641      	mov	r1, r8
 8002066:	1851      	adds	r1, r2, r1
 8002068:	6339      	str	r1, [r7, #48]	; 0x30
 800206a:	4649      	mov	r1, r9
 800206c:	414b      	adcs	r3, r1
 800206e:	637b      	str	r3, [r7, #52]	; 0x34
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	f04f 0300 	mov.w	r3, #0
 8002078:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800207c:	4659      	mov	r1, fp
 800207e:	00cb      	lsls	r3, r1, #3
 8002080:	4651      	mov	r1, sl
 8002082:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002086:	4651      	mov	r1, sl
 8002088:	00ca      	lsls	r2, r1, #3
 800208a:	4610      	mov	r0, r2
 800208c:	4619      	mov	r1, r3
 800208e:	4603      	mov	r3, r0
 8002090:	4642      	mov	r2, r8
 8002092:	189b      	adds	r3, r3, r2
 8002094:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002098:	464b      	mov	r3, r9
 800209a:	460a      	mov	r2, r1
 800209c:	eb42 0303 	adc.w	r3, r2, r3
 80020a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80020b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80020b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80020b8:	460b      	mov	r3, r1
 80020ba:	18db      	adds	r3, r3, r3
 80020bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80020be:	4613      	mov	r3, r2
 80020c0:	eb42 0303 	adc.w	r3, r2, r3
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80020ce:	f7fe f8d7 	bl	8000280 <__aeabi_uldivmod>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4b0d      	ldr	r3, [pc, #52]	; (800210c <UART_SetConfig+0x2d4>)
 80020d8:	fba3 1302 	umull	r1, r3, r3, r2
 80020dc:	095b      	lsrs	r3, r3, #5
 80020de:	2164      	movs	r1, #100	; 0x64
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	3332      	adds	r3, #50	; 0x32
 80020ea:	4a08      	ldr	r2, [pc, #32]	; (800210c <UART_SetConfig+0x2d4>)
 80020ec:	fba2 2303 	umull	r2, r3, r2, r3
 80020f0:	095b      	lsrs	r3, r3, #5
 80020f2:	f003 0207 	and.w	r2, r3, #7
 80020f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4422      	add	r2, r4
 80020fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002100:	e106      	b.n	8002310 <UART_SetConfig+0x4d8>
 8002102:	bf00      	nop
 8002104:	40011000 	.word	0x40011000
 8002108:	40011400 	.word	0x40011400
 800210c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002114:	2200      	movs	r2, #0
 8002116:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800211a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800211e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002122:	4642      	mov	r2, r8
 8002124:	464b      	mov	r3, r9
 8002126:	1891      	adds	r1, r2, r2
 8002128:	6239      	str	r1, [r7, #32]
 800212a:	415b      	adcs	r3, r3
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
 800212e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002132:	4641      	mov	r1, r8
 8002134:	1854      	adds	r4, r2, r1
 8002136:	4649      	mov	r1, r9
 8002138:	eb43 0501 	adc.w	r5, r3, r1
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	00eb      	lsls	r3, r5, #3
 8002146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800214a:	00e2      	lsls	r2, r4, #3
 800214c:	4614      	mov	r4, r2
 800214e:	461d      	mov	r5, r3
 8002150:	4643      	mov	r3, r8
 8002152:	18e3      	adds	r3, r4, r3
 8002154:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002158:	464b      	mov	r3, r9
 800215a:	eb45 0303 	adc.w	r3, r5, r3
 800215e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800216e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800217e:	4629      	mov	r1, r5
 8002180:	008b      	lsls	r3, r1, #2
 8002182:	4621      	mov	r1, r4
 8002184:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002188:	4621      	mov	r1, r4
 800218a:	008a      	lsls	r2, r1, #2
 800218c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002190:	f7fe f876 	bl	8000280 <__aeabi_uldivmod>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4b60      	ldr	r3, [pc, #384]	; (800231c <UART_SetConfig+0x4e4>)
 800219a:	fba3 2302 	umull	r2, r3, r3, r2
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	011c      	lsls	r4, r3, #4
 80021a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021a6:	2200      	movs	r2, #0
 80021a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80021ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80021b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80021b4:	4642      	mov	r2, r8
 80021b6:	464b      	mov	r3, r9
 80021b8:	1891      	adds	r1, r2, r2
 80021ba:	61b9      	str	r1, [r7, #24]
 80021bc:	415b      	adcs	r3, r3
 80021be:	61fb      	str	r3, [r7, #28]
 80021c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021c4:	4641      	mov	r1, r8
 80021c6:	1851      	adds	r1, r2, r1
 80021c8:	6139      	str	r1, [r7, #16]
 80021ca:	4649      	mov	r1, r9
 80021cc:	414b      	adcs	r3, r1
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021dc:	4659      	mov	r1, fp
 80021de:	00cb      	lsls	r3, r1, #3
 80021e0:	4651      	mov	r1, sl
 80021e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021e6:	4651      	mov	r1, sl
 80021e8:	00ca      	lsls	r2, r1, #3
 80021ea:	4610      	mov	r0, r2
 80021ec:	4619      	mov	r1, r3
 80021ee:	4603      	mov	r3, r0
 80021f0:	4642      	mov	r2, r8
 80021f2:	189b      	adds	r3, r3, r2
 80021f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021f8:	464b      	mov	r3, r9
 80021fa:	460a      	mov	r2, r1
 80021fc:	eb42 0303 	adc.w	r3, r2, r3
 8002200:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	67bb      	str	r3, [r7, #120]	; 0x78
 800220e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800221c:	4649      	mov	r1, r9
 800221e:	008b      	lsls	r3, r1, #2
 8002220:	4641      	mov	r1, r8
 8002222:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002226:	4641      	mov	r1, r8
 8002228:	008a      	lsls	r2, r1, #2
 800222a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800222e:	f7fe f827 	bl	8000280 <__aeabi_uldivmod>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4611      	mov	r1, r2
 8002238:	4b38      	ldr	r3, [pc, #224]	; (800231c <UART_SetConfig+0x4e4>)
 800223a:	fba3 2301 	umull	r2, r3, r3, r1
 800223e:	095b      	lsrs	r3, r3, #5
 8002240:	2264      	movs	r2, #100	; 0x64
 8002242:	fb02 f303 	mul.w	r3, r2, r3
 8002246:	1acb      	subs	r3, r1, r3
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	3332      	adds	r3, #50	; 0x32
 800224c:	4a33      	ldr	r2, [pc, #204]	; (800231c <UART_SetConfig+0x4e4>)
 800224e:	fba2 2303 	umull	r2, r3, r2, r3
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002258:	441c      	add	r4, r3
 800225a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800225e:	2200      	movs	r2, #0
 8002260:	673b      	str	r3, [r7, #112]	; 0x70
 8002262:	677a      	str	r2, [r7, #116]	; 0x74
 8002264:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002268:	4642      	mov	r2, r8
 800226a:	464b      	mov	r3, r9
 800226c:	1891      	adds	r1, r2, r2
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	415b      	adcs	r3, r3
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002278:	4641      	mov	r1, r8
 800227a:	1851      	adds	r1, r2, r1
 800227c:	6039      	str	r1, [r7, #0]
 800227e:	4649      	mov	r1, r9
 8002280:	414b      	adcs	r3, r1
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002290:	4659      	mov	r1, fp
 8002292:	00cb      	lsls	r3, r1, #3
 8002294:	4651      	mov	r1, sl
 8002296:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800229a:	4651      	mov	r1, sl
 800229c:	00ca      	lsls	r2, r1, #3
 800229e:	4610      	mov	r0, r2
 80022a0:	4619      	mov	r1, r3
 80022a2:	4603      	mov	r3, r0
 80022a4:	4642      	mov	r2, r8
 80022a6:	189b      	adds	r3, r3, r2
 80022a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80022aa:	464b      	mov	r3, r9
 80022ac:	460a      	mov	r2, r1
 80022ae:	eb42 0303 	adc.w	r3, r2, r3
 80022b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	663b      	str	r3, [r7, #96]	; 0x60
 80022be:	667a      	str	r2, [r7, #100]	; 0x64
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	f04f 0300 	mov.w	r3, #0
 80022c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80022cc:	4649      	mov	r1, r9
 80022ce:	008b      	lsls	r3, r1, #2
 80022d0:	4641      	mov	r1, r8
 80022d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022d6:	4641      	mov	r1, r8
 80022d8:	008a      	lsls	r2, r1, #2
 80022da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80022de:	f7fd ffcf 	bl	8000280 <__aeabi_uldivmod>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4b0d      	ldr	r3, [pc, #52]	; (800231c <UART_SetConfig+0x4e4>)
 80022e8:	fba3 1302 	umull	r1, r3, r3, r2
 80022ec:	095b      	lsrs	r3, r3, #5
 80022ee:	2164      	movs	r1, #100	; 0x64
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	3332      	adds	r3, #50	; 0x32
 80022fa:	4a08      	ldr	r2, [pc, #32]	; (800231c <UART_SetConfig+0x4e4>)
 80022fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002300:	095b      	lsrs	r3, r3, #5
 8002302:	f003 020f 	and.w	r2, r3, #15
 8002306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4422      	add	r2, r4
 800230e:	609a      	str	r2, [r3, #8]
}
 8002310:	bf00      	nop
 8002312:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002316:	46bd      	mov	sp, r7
 8002318:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800231c:	51eb851f 	.word	0x51eb851f

08002320 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800232e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002332:	2b84      	cmp	r3, #132	; 0x84
 8002334:	d005      	beq.n	8002342 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002336:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4413      	add	r3, r2
 800233e:	3303      	adds	r3, #3
 8002340:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002342:	68fb      	ldr	r3, [r7, #12]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002356:	f3ef 8305 	mrs	r3, IPSR
 800235a:	607b      	str	r3, [r7, #4]
  return(result);
 800235c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800235e:	2b00      	cmp	r3, #0
 8002360:	bf14      	ite	ne
 8002362:	2301      	movne	r3, #1
 8002364:	2300      	moveq	r3, #0
 8002366:	b2db      	uxtb	r3, r3
}
 8002368:	4618      	mov	r0, r3
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002378:	f001 f996 	bl	80036a8 <vTaskStartScheduler>
  
  return osOK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	bd80      	pop	{r7, pc}

08002382 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002382:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002384:	b089      	sub	sp, #36	; 0x24
 8002386:	af04      	add	r7, sp, #16
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d020      	beq.n	80023d6 <osThreadCreate+0x54>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01c      	beq.n	80023d6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685c      	ldr	r4, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691e      	ldr	r6, [r3, #16]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff ffb6 	bl	8002320 <makeFreeRtosPriority>
 80023b4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023be:	9202      	str	r2, [sp, #8]
 80023c0:	9301      	str	r3, [sp, #4]
 80023c2:	9100      	str	r1, [sp, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	4632      	mov	r2, r6
 80023c8:	4629      	mov	r1, r5
 80023ca:	4620      	mov	r0, r4
 80023cc:	f000 ffa4 	bl	8003318 <xTaskCreateStatic>
 80023d0:	4603      	mov	r3, r0
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	e01c      	b.n	8002410 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685c      	ldr	r4, [r3, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023e2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff ff98 	bl	8002320 <makeFreeRtosPriority>
 80023f0:	4602      	mov	r2, r0
 80023f2:	f107 030c 	add.w	r3, r7, #12
 80023f6:	9301      	str	r3, [sp, #4]
 80023f8:	9200      	str	r2, [sp, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	4632      	mov	r2, r6
 80023fe:	4629      	mov	r1, r5
 8002400:	4620      	mov	r0, r4
 8002402:	f000 ffe6 	bl	80033d2 <xTaskCreate>
 8002406:	4603      	mov	r3, r0
 8002408:	2b01      	cmp	r3, #1
 800240a:	d001      	beq.n	8002410 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800240c:	2300      	movs	r3, #0
 800240e:	e000      	b.n	8002412 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002410:	68fb      	ldr	r3, [r7, #12]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800241a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b084      	sub	sp, #16
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <osDelay+0x16>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	e000      	b.n	8002432 <osDelay+0x18>
 8002430:	2301      	movs	r3, #1
 8002432:	4618      	mov	r0, r3
 8002434:	f001 f904 	bl	8003640 <vTaskDelay>
  
  return osOK;
 8002438:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d007      	beq.n	8002462 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	4619      	mov	r1, r3
 8002458:	2001      	movs	r0, #1
 800245a:	f000 fb38 	bl	8002ace <xQueueCreateMutexStatic>
 800245e:	4603      	mov	r3, r0
 8002460:	e003      	b.n	800246a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8002462:	2001      	movs	r0, #1
 8002464:	f000 fb1b 	bl	8002a9e <xQueueCreateMutex>
 8002468:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af02      	add	r7, sp, #8
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00f      	beq.n	80024a4 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d10a      	bne.n	80024a0 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2203      	movs	r2, #3
 8002490:	9200      	str	r2, [sp, #0]
 8002492:	2200      	movs	r2, #0
 8002494:	2100      	movs	r1, #0
 8002496:	2001      	movs	r0, #1
 8002498:	f000 fa16 	bl	80028c8 <xQueueGenericCreateStatic>
 800249c:	4603      	mov	r3, r0
 800249e:	e016      	b.n	80024ce <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	e014      	b.n	80024ce <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d110      	bne.n	80024cc <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80024aa:	2203      	movs	r2, #3
 80024ac:	2100      	movs	r1, #0
 80024ae:	2001      	movs	r0, #1
 80024b0:	f000 fa82 	bl	80029b8 <xQueueGenericCreate>
 80024b4:	60f8      	str	r0, [r7, #12]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <osSemaphoreCreate+0x56>
 80024bc:	2300      	movs	r3, #0
 80024be:	2200      	movs	r2, #0
 80024c0:	2100      	movs	r1, #0
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 fb1e 	bl	8002b04 <xQueueGenericSend>
      return sema;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	e000      	b.n	80024ce <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80024cc:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80024d6:	b590      	push	{r4, r7, lr}
 80024d8:	b085      	sub	sp, #20
 80024da:	af02      	add	r7, sp, #8
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d011      	beq.n	800250c <osMessageCreate+0x36>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00d      	beq.n	800250c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6818      	ldr	r0, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6859      	ldr	r1, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2400      	movs	r4, #0
 8002502:	9400      	str	r4, [sp, #0]
 8002504:	f000 f9e0 	bl	80028c8 <xQueueGenericCreateStatic>
 8002508:	4603      	mov	r3, r0
 800250a:	e008      	b.n	800251e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	4619      	mov	r1, r3
 8002518:	f000 fa4e 	bl	80029b8 <xQueueGenericCreate>
 800251c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800251e:	4618      	mov	r0, r3
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	bd90      	pop	{r4, r7, pc}
	...

08002528 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002534:	2300      	movs	r3, #0
 8002536:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <osMessagePut+0x1e>
    ticks = 1;
 8002542:	2301      	movs	r3, #1
 8002544:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8002546:	f7ff ff03 	bl	8002350 <inHandlerMode>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d018      	beq.n	8002582 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002550:	f107 0210 	add.w	r2, r7, #16
 8002554:	f107 0108 	add.w	r1, r7, #8
 8002558:	2300      	movs	r3, #0
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 fbd0 	bl	8002d00 <xQueueGenericSendFromISR>
 8002560:	4603      	mov	r3, r0
 8002562:	2b01      	cmp	r3, #1
 8002564:	d001      	beq.n	800256a <osMessagePut+0x42>
      return osErrorOS;
 8002566:	23ff      	movs	r3, #255	; 0xff
 8002568:	e018      	b.n	800259c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d014      	beq.n	800259a <osMessagePut+0x72>
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <osMessagePut+0x7c>)
 8002572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	f3bf 8f4f 	dsb	sy
 800257c:	f3bf 8f6f 	isb	sy
 8002580:	e00b      	b.n	800259a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002582:	f107 0108 	add.w	r1, r7, #8
 8002586:	2300      	movs	r3, #0
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 faba 	bl	8002b04 <xQueueGenericSend>
 8002590:	4603      	mov	r3, r0
 8002592:	2b01      	cmp	r3, #1
 8002594:	d001      	beq.n	800259a <osMessagePut+0x72>
      return osErrorOS;
 8002596:	23ff      	movs	r3, #255	; 0xff
 8002598:	e000      	b.n	800259c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	e000ed04 	.word	0xe000ed04

080025a8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b08b      	sub	sp, #44	; 0x2c
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10a      	bne.n	80025d8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	617b      	str	r3, [r7, #20]
    return event;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	461c      	mov	r4, r3
 80025ca:	f107 0314 	add.w	r3, r7, #20
 80025ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80025d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80025d6:	e054      	b.n	8002682 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80025d8:	2300      	movs	r3, #0
 80025da:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025e6:	d103      	bne.n	80025f0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80025e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
 80025ee:	e009      	b.n	8002604 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d006      	beq.n	8002604 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <osMessageGet+0x5c>
      ticks = 1;
 8002600:	2301      	movs	r3, #1
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8002604:	f7ff fea4 	bl	8002350 <inHandlerMode>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d01c      	beq.n	8002648 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800260e:	f107 0220 	add.w	r2, r7, #32
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	3304      	adds	r3, #4
 8002618:	4619      	mov	r1, r3
 800261a:	68b8      	ldr	r0, [r7, #8]
 800261c:	f000 fcec 	bl	8002ff8 <xQueueReceiveFromISR>
 8002620:	4603      	mov	r3, r0
 8002622:	2b01      	cmp	r3, #1
 8002624:	d102      	bne.n	800262c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8002626:	2310      	movs	r3, #16
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	e001      	b.n	8002630 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d01d      	beq.n	8002672 <osMessageGet+0xca>
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <osMessageGet+0xe4>)
 8002638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	f3bf 8f6f 	isb	sy
 8002646:	e014      	b.n	8002672 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	3304      	adds	r3, #4
 800264e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002650:	4619      	mov	r1, r3
 8002652:	68b8      	ldr	r0, [r7, #8]
 8002654:	f000 fbf0 	bl	8002e38 <xQueueReceive>
 8002658:	4603      	mov	r3, r0
 800265a:	2b01      	cmp	r3, #1
 800265c:	d102      	bne.n	8002664 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800265e:	2310      	movs	r3, #16
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	e006      	b.n	8002672 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <osMessageGet+0xc6>
 800266a:	2300      	movs	r3, #0
 800266c:	e000      	b.n	8002670 <osMessageGet+0xc8>
 800266e:	2340      	movs	r3, #64	; 0x40
 8002670:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	461c      	mov	r4, r3
 8002676:	f107 0314 	add.w	r3, r7, #20
 800267a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800267e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	372c      	adds	r7, #44	; 0x2c
 8002686:	46bd      	mov	sp, r7
 8002688:	bd90      	pop	{r4, r7, pc}
 800268a:	bf00      	nop
 800268c:	e000ed04 	.word	0xe000ed04

08002690 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f103 0208 	add.w	r2, r3, #8
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f103 0208 	add.w	r2, r3, #8
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f103 0208 	add.w	r2, r3, #8
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026ea:	b480      	push	{r7}
 80026ec:	b085      	sub	sp, #20
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	601a      	str	r2, [r3, #0]
}
 8002726:	bf00      	nop
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002732:	b480      	push	{r7}
 8002734:	b085      	sub	sp, #20
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002748:	d103      	bne.n	8002752 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e00c      	b.n	800276c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3308      	adds	r3, #8
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	e002      	b.n	8002760 <vListInsert+0x2e>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	429a      	cmp	r2, r3
 800276a:	d2f6      	bcs.n	800275a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	601a      	str	r2, [r3, #0]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6892      	ldr	r2, [r2, #8]
 80027ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6852      	ldr	r2, [r2, #4]
 80027c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d103      	bne.n	80027d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	1e5a      	subs	r2, r3, #1
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10a      	bne.n	8002822 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800280c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800281e:	bf00      	nop
 8002820:	e7fe      	b.n	8002820 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002822:	f001 fd77 	bl	8004314 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282e:	68f9      	ldr	r1, [r7, #12]
 8002830:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	441a      	add	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002852:	3b01      	subs	r3, #1
 8002854:	68f9      	ldr	r1, [r7, #12]
 8002856:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	441a      	add	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	22ff      	movs	r2, #255	; 0xff
 8002866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	22ff      	movs	r2, #255	; 0xff
 800286e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d114      	bne.n	80028a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d01a      	beq.n	80028b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	3310      	adds	r3, #16
 8002884:	4618      	mov	r0, r3
 8002886:	f001 f951 	bl	8003b2c <xTaskRemoveFromEventList>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d012      	beq.n	80028b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <xQueueGenericReset+0xcc>)
 8002892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	f3bf 8f4f 	dsb	sy
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	e009      	b.n	80028b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	3310      	adds	r3, #16
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fef2 	bl	8002690 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	3324      	adds	r3, #36	; 0x24
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff feed 	bl	8002690 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80028b6:	f001 fd5d 	bl	8004374 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80028ba:	2301      	movs	r3, #1
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	e000ed04 	.word	0xe000ed04

080028c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08e      	sub	sp, #56	; 0x38
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10a      	bne.n	80028f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80028dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e0:	f383 8811 	msr	BASEPRI, r3
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80028ee:	bf00      	nop
 80028f0:	e7fe      	b.n	80028f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10a      	bne.n	800290e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80028f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fc:	f383 8811 	msr	BASEPRI, r3
 8002900:	f3bf 8f6f 	isb	sy
 8002904:	f3bf 8f4f 	dsb	sy
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
}
 800290a:	bf00      	nop
 800290c:	e7fe      	b.n	800290c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d002      	beq.n	800291a <xQueueGenericCreateStatic+0x52>
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <xQueueGenericCreateStatic+0x56>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <xQueueGenericCreateStatic+0x58>
 800291e:	2300      	movs	r3, #0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	623b      	str	r3, [r7, #32]
}
 8002936:	bf00      	nop
 8002938:	e7fe      	b.n	8002938 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d102      	bne.n	8002946 <xQueueGenericCreateStatic+0x7e>
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <xQueueGenericCreateStatic+0x82>
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <xQueueGenericCreateStatic+0x84>
 800294a:	2300      	movs	r3, #0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10a      	bne.n	8002966 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002954:	f383 8811 	msr	BASEPRI, r3
 8002958:	f3bf 8f6f 	isb	sy
 800295c:	f3bf 8f4f 	dsb	sy
 8002960:	61fb      	str	r3, [r7, #28]
}
 8002962:	bf00      	nop
 8002964:	e7fe      	b.n	8002964 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002966:	2348      	movs	r3, #72	; 0x48
 8002968:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2b48      	cmp	r3, #72	; 0x48
 800296e:	d00a      	beq.n	8002986 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002974:	f383 8811 	msr	BASEPRI, r3
 8002978:	f3bf 8f6f 	isb	sy
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	61bb      	str	r3, [r7, #24]
}
 8002982:	bf00      	nop
 8002984:	e7fe      	b.n	8002984 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002986:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800298c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00d      	beq.n	80029ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800299a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800299e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	4613      	mov	r3, r2
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	68b9      	ldr	r1, [r7, #8]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f83f 	bl	8002a2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80029ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3730      	adds	r7, #48	; 0x30
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	; 0x28
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	4613      	mov	r3, r2
 80029c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10a      	bne.n	80029e2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80029cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d0:	f383 8811 	msr	BASEPRI, r3
 80029d4:	f3bf 8f6f 	isb	sy
 80029d8:	f3bf 8f4f 	dsb	sy
 80029dc:	613b      	str	r3, [r7, #16]
}
 80029de:	bf00      	nop
 80029e0:	e7fe      	b.n	80029e0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	3348      	adds	r3, #72	; 0x48
 80029f0:	4618      	mov	r0, r3
 80029f2:	f001 fdb1 	bl	8004558 <pvPortMalloc>
 80029f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d011      	beq.n	8002a22 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	3348      	adds	r3, #72	; 0x48
 8002a06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a10:	79fa      	ldrb	r2, [r7, #7]
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	4613      	mov	r3, r2
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	68b9      	ldr	r1, [r7, #8]
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f805 	bl	8002a2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a22:	69bb      	ldr	r3, [r7, #24]
	}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3720      	adds	r7, #32
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d103      	bne.n	8002a48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	e002      	b.n	8002a4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	69b8      	ldr	r0, [r7, #24]
 8002a5e:	f7ff fecb 	bl	80027f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00e      	beq.n	8002a96 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2100      	movs	r1, #0
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f837 	bl	8002b04 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b086      	sub	sp, #24
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	2300      	movs	r3, #0
 8002aae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	6939      	ldr	r1, [r7, #16]
 8002ab6:	6978      	ldr	r0, [r7, #20]
 8002ab8:	f7ff ff7e 	bl	80029b8 <xQueueGenericCreate>
 8002abc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f7ff ffd3 	bl	8002a6a <prvInitialiseMutex>

		return xNewQueue;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
	}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b088      	sub	sp, #32
 8002ad2:	af02      	add	r7, sp, #8
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	6039      	str	r1, [r7, #0]
 8002ad8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002ada:	2301      	movs	r3, #1
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	6939      	ldr	r1, [r7, #16]
 8002aec:	6978      	ldr	r0, [r7, #20]
 8002aee:	f7ff feeb 	bl	80028c8 <xQueueGenericCreateStatic>
 8002af2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f7ff ffb8 	bl	8002a6a <prvInitialiseMutex>

		return xNewQueue;
 8002afa:	68fb      	ldr	r3, [r7, #12]
	}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08e      	sub	sp, #56	; 0x38
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b12:	2300      	movs	r3, #0
 8002b14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10a      	bne.n	8002b36 <xQueueGenericSend+0x32>
	__asm volatile
 8002b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b24:	f383 8811 	msr	BASEPRI, r3
 8002b28:	f3bf 8f6f 	isb	sy
 8002b2c:	f3bf 8f4f 	dsb	sy
 8002b30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b32:	bf00      	nop
 8002b34:	e7fe      	b.n	8002b34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d103      	bne.n	8002b44 <xQueueGenericSend+0x40>
 8002b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <xQueueGenericSend+0x44>
 8002b44:	2301      	movs	r3, #1
 8002b46:	e000      	b.n	8002b4a <xQueueGenericSend+0x46>
 8002b48:	2300      	movs	r3, #0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10a      	bne.n	8002b64 <xQueueGenericSend+0x60>
	__asm volatile
 8002b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b52:	f383 8811 	msr	BASEPRI, r3
 8002b56:	f3bf 8f6f 	isb	sy
 8002b5a:	f3bf 8f4f 	dsb	sy
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b60:	bf00      	nop
 8002b62:	e7fe      	b.n	8002b62 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d103      	bne.n	8002b72 <xQueueGenericSend+0x6e>
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <xQueueGenericSend+0x72>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <xQueueGenericSend+0x74>
 8002b76:	2300      	movs	r3, #0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10a      	bne.n	8002b92 <xQueueGenericSend+0x8e>
	__asm volatile
 8002b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b80:	f383 8811 	msr	BASEPRI, r3
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	623b      	str	r3, [r7, #32]
}
 8002b8e:	bf00      	nop
 8002b90:	e7fe      	b.n	8002b90 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b92:	f001 f987 	bl	8003ea4 <xTaskGetSchedulerState>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d102      	bne.n	8002ba2 <xQueueGenericSend+0x9e>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <xQueueGenericSend+0xa2>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <xQueueGenericSend+0xa4>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10a      	bne.n	8002bc2 <xQueueGenericSend+0xbe>
	__asm volatile
 8002bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb0:	f383 8811 	msr	BASEPRI, r3
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	61fb      	str	r3, [r7, #28]
}
 8002bbe:	bf00      	nop
 8002bc0:	e7fe      	b.n	8002bc0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bc2:	f001 fba7 	bl	8004314 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d302      	bcc.n	8002bd8 <xQueueGenericSend+0xd4>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d129      	bne.n	8002c2c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	68b9      	ldr	r1, [r7, #8]
 8002bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bde:	f000 fa8b 	bl	80030f8 <prvCopyDataToQueue>
 8002be2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d010      	beq.n	8002c0e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bee:	3324      	adds	r3, #36	; 0x24
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 ff9b 	bl	8003b2c <xTaskRemoveFromEventList>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d013      	beq.n	8002c24 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002bfc:	4b3f      	ldr	r3, [pc, #252]	; (8002cfc <xQueueGenericSend+0x1f8>)
 8002bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	f3bf 8f6f 	isb	sy
 8002c0c:	e00a      	b.n	8002c24 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d007      	beq.n	8002c24 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c14:	4b39      	ldr	r3, [pc, #228]	; (8002cfc <xQueueGenericSend+0x1f8>)
 8002c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	f3bf 8f4f 	dsb	sy
 8002c20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c24:	f001 fba6 	bl	8004374 <vPortExitCritical>
				return pdPASS;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e063      	b.n	8002cf4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d103      	bne.n	8002c3a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c32:	f001 fb9f 	bl	8004374 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	e05c      	b.n	8002cf4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d106      	bne.n	8002c4e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c40:	f107 0314 	add.w	r3, r7, #20
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 ffd3 	bl	8003bf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c4e:	f001 fb91 	bl	8004374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c52:	f000 fd89 	bl	8003768 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c56:	f001 fb5d 	bl	8004314 <vPortEnterCritical>
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c60:	b25b      	sxtb	r3, r3
 8002c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c66:	d103      	bne.n	8002c70 <xQueueGenericSend+0x16c>
 8002c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c76:	b25b      	sxtb	r3, r3
 8002c78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c7c:	d103      	bne.n	8002c86 <xQueueGenericSend+0x182>
 8002c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c86:	f001 fb75 	bl	8004374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c8a:	1d3a      	adds	r2, r7, #4
 8002c8c:	f107 0314 	add.w	r3, r7, #20
 8002c90:	4611      	mov	r1, r2
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 ffc2 	bl	8003c1c <xTaskCheckForTimeOut>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d124      	bne.n	8002ce8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ca0:	f000 fb22 	bl	80032e8 <prvIsQueueFull>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d018      	beq.n	8002cdc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cac:	3310      	adds	r3, #16
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 ff16 	bl	8003ae4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cba:	f000 faad 	bl	8003218 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002cbe:	f000 fd61 	bl	8003784 <xTaskResumeAll>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f47f af7c 	bne.w	8002bc2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002cca:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <xQueueGenericSend+0x1f8>)
 8002ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	f3bf 8f4f 	dsb	sy
 8002cd6:	f3bf 8f6f 	isb	sy
 8002cda:	e772      	b.n	8002bc2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cde:	f000 fa9b 	bl	8003218 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ce2:	f000 fd4f 	bl	8003784 <xTaskResumeAll>
 8002ce6:	e76c      	b.n	8002bc2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cea:	f000 fa95 	bl	8003218 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cee:	f000 fd49 	bl	8003784 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002cf2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3738      	adds	r7, #56	; 0x38
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	e000ed04 	.word	0xe000ed04

08002d00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b090      	sub	sp, #64	; 0x40
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10a      	bne.n	8002d2e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d2a:	bf00      	nop
 8002d2c:	e7fe      	b.n	8002d2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d103      	bne.n	8002d3c <xQueueGenericSendFromISR+0x3c>
 8002d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <xQueueGenericSendFromISR+0x40>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e000      	b.n	8002d42 <xQueueGenericSendFromISR+0x42>
 8002d40:	2300      	movs	r3, #0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10a      	bne.n	8002d5c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4a:	f383 8811 	msr	BASEPRI, r3
 8002d4e:	f3bf 8f6f 	isb	sy
 8002d52:	f3bf 8f4f 	dsb	sy
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d58:	bf00      	nop
 8002d5a:	e7fe      	b.n	8002d5a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d103      	bne.n	8002d6a <xQueueGenericSendFromISR+0x6a>
 8002d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d101      	bne.n	8002d6e <xQueueGenericSendFromISR+0x6e>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <xQueueGenericSendFromISR+0x70>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10a      	bne.n	8002d8a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d78:	f383 8811 	msr	BASEPRI, r3
 8002d7c:	f3bf 8f6f 	isb	sy
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	623b      	str	r3, [r7, #32]
}
 8002d86:	bf00      	nop
 8002d88:	e7fe      	b.n	8002d88 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d8a:	f001 fba5 	bl	80044d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d8e:	f3ef 8211 	mrs	r2, BASEPRI
 8002d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d96:	f383 8811 	msr	BASEPRI, r3
 8002d9a:	f3bf 8f6f 	isb	sy
 8002d9e:	f3bf 8f4f 	dsb	sy
 8002da2:	61fa      	str	r2, [r7, #28]
 8002da4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002da6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002da8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d302      	bcc.n	8002dbc <xQueueGenericSendFromISR+0xbc>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d12f      	bne.n	8002e1c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	68b9      	ldr	r1, [r7, #8]
 8002dd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002dd2:	f000 f991 	bl	80030f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002dd6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002dda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dde:	d112      	bne.n	8002e06 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d016      	beq.n	8002e16 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dea:	3324      	adds	r3, #36	; 0x24
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 fe9d 	bl	8003b2c <xTaskRemoveFromEventList>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00e      	beq.n	8002e16 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00b      	beq.n	8002e16 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	e007      	b.n	8002e16 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	b25a      	sxtb	r2, r3
 8002e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002e16:	2301      	movs	r3, #1
 8002e18:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002e1a:	e001      	b.n	8002e20 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e22:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e2a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3740      	adds	r7, #64	; 0x40
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08c      	sub	sp, #48	; 0x30
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e44:	2300      	movs	r3, #0
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10a      	bne.n	8002e68 <xQueueReceive+0x30>
	__asm volatile
 8002e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e56:	f383 8811 	msr	BASEPRI, r3
 8002e5a:	f3bf 8f6f 	isb	sy
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	623b      	str	r3, [r7, #32]
}
 8002e64:	bf00      	nop
 8002e66:	e7fe      	b.n	8002e66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d103      	bne.n	8002e76 <xQueueReceive+0x3e>
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <xQueueReceive+0x42>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <xQueueReceive+0x44>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10a      	bne.n	8002e96 <xQueueReceive+0x5e>
	__asm volatile
 8002e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	61fb      	str	r3, [r7, #28]
}
 8002e92:	bf00      	nop
 8002e94:	e7fe      	b.n	8002e94 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e96:	f001 f805 	bl	8003ea4 <xTaskGetSchedulerState>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d102      	bne.n	8002ea6 <xQueueReceive+0x6e>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <xQueueReceive+0x72>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <xQueueReceive+0x74>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10a      	bne.n	8002ec6 <xQueueReceive+0x8e>
	__asm volatile
 8002eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb4:	f383 8811 	msr	BASEPRI, r3
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	61bb      	str	r3, [r7, #24]
}
 8002ec2:	bf00      	nop
 8002ec4:	e7fe      	b.n	8002ec4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ec6:	f001 fa25 	bl	8004314 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d01f      	beq.n	8002f16 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ed6:	68b9      	ldr	r1, [r7, #8]
 8002ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eda:	f000 f977 	bl	80031cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	1e5a      	subs	r2, r3, #1
 8002ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00f      	beq.n	8002f0e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef0:	3310      	adds	r3, #16
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 fe1a 	bl	8003b2c <xTaskRemoveFromEventList>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d007      	beq.n	8002f0e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002efe:	4b3d      	ldr	r3, [pc, #244]	; (8002ff4 <xQueueReceive+0x1bc>)
 8002f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f0e:	f001 fa31 	bl	8004374 <vPortExitCritical>
				return pdPASS;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e069      	b.n	8002fea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d103      	bne.n	8002f24 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f1c:	f001 fa2a 	bl	8004374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f20:	2300      	movs	r3, #0
 8002f22:	e062      	b.n	8002fea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d106      	bne.n	8002f38 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f2a:	f107 0310 	add.w	r3, r7, #16
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fe5e 	bl	8003bf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f34:	2301      	movs	r3, #1
 8002f36:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f38:	f001 fa1c 	bl	8004374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f3c:	f000 fc14 	bl	8003768 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f40:	f001 f9e8 	bl	8004314 <vPortEnterCritical>
 8002f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f4a:	b25b      	sxtb	r3, r3
 8002f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f50:	d103      	bne.n	8002f5a <xQueueReceive+0x122>
 8002f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f60:	b25b      	sxtb	r3, r3
 8002f62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f66:	d103      	bne.n	8002f70 <xQueueReceive+0x138>
 8002f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f70:	f001 fa00 	bl	8004374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f74:	1d3a      	adds	r2, r7, #4
 8002f76:	f107 0310 	add.w	r3, r7, #16
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fe4d 	bl	8003c1c <xTaskCheckForTimeOut>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d123      	bne.n	8002fd0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f8a:	f000 f997 	bl	80032bc <prvIsQueueEmpty>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d017      	beq.n	8002fc4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f96:	3324      	adds	r3, #36	; 0x24
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 fda1 	bl	8003ae4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fa4:	f000 f938 	bl	8003218 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fa8:	f000 fbec 	bl	8003784 <xTaskResumeAll>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d189      	bne.n	8002ec6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002fb2:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <xQueueReceive+0x1bc>)
 8002fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	f3bf 8f4f 	dsb	sy
 8002fbe:	f3bf 8f6f 	isb	sy
 8002fc2:	e780      	b.n	8002ec6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fc6:	f000 f927 	bl	8003218 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fca:	f000 fbdb 	bl	8003784 <xTaskResumeAll>
 8002fce:	e77a      	b.n	8002ec6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002fd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fd2:	f000 f921 	bl	8003218 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fd6:	f000 fbd5 	bl	8003784 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fdc:	f000 f96e 	bl	80032bc <prvIsQueueEmpty>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f43f af6f 	beq.w	8002ec6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002fe8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3730      	adds	r7, #48	; 0x30
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	e000ed04 	.word	0xe000ed04

08002ff8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08e      	sub	sp, #56	; 0x38
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10a      	bne.n	8003024 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	623b      	str	r3, [r7, #32]
}
 8003020:	bf00      	nop
 8003022:	e7fe      	b.n	8003022 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d103      	bne.n	8003032 <xQueueReceiveFromISR+0x3a>
 800302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <xQueueReceiveFromISR+0x3e>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <xQueueReceiveFromISR+0x40>
 8003036:	2300      	movs	r3, #0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10a      	bne.n	8003052 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800303c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003040:	f383 8811 	msr	BASEPRI, r3
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	f3bf 8f4f 	dsb	sy
 800304c:	61fb      	str	r3, [r7, #28]
}
 800304e:	bf00      	nop
 8003050:	e7fe      	b.n	8003050 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003052:	f001 fa41 	bl	80044d8 <vPortValidateInterruptPriority>
	__asm volatile
 8003056:	f3ef 8211 	mrs	r2, BASEPRI
 800305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	61ba      	str	r2, [r7, #24]
 800306c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800306e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003070:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003076:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307a:	2b00      	cmp	r3, #0
 800307c:	d02f      	beq.n	80030de <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800307e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003080:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003088:	68b9      	ldr	r1, [r7, #8]
 800308a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800308c:	f000 f89e 	bl	80031cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003092:	1e5a      	subs	r2, r3, #1
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003096:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003098:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800309c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030a0:	d112      	bne.n	80030c8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d016      	beq.n	80030d8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ac:	3310      	adds	r3, #16
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fd3c 	bl	8003b2c <xTaskRemoveFromEventList>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00e      	beq.n	80030d8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00b      	beq.n	80030d8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	e007      	b.n	80030d8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80030c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030cc:	3301      	adds	r3, #1
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	b25a      	sxtb	r2, r3
 80030d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80030d8:	2301      	movs	r3, #1
 80030da:	637b      	str	r3, [r7, #52]	; 0x34
 80030dc:	e001      	b.n	80030e2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80030de:	2300      	movs	r3, #0
 80030e0:	637b      	str	r3, [r7, #52]	; 0x34
 80030e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f383 8811 	msr	BASEPRI, r3
}
 80030ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3738      	adds	r7, #56	; 0x38
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10d      	bne.n	8003132 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d14d      	bne.n	80031ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	4618      	mov	r0, r3
 8003124:	f000 fedc 	bl	8003ee0 <xTaskPriorityDisinherit>
 8003128:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	609a      	str	r2, [r3, #8]
 8003130:	e043      	b.n	80031ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d119      	bne.n	800316c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6858      	ldr	r0, [r3, #4]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	461a      	mov	r2, r3
 8003142:	68b9      	ldr	r1, [r7, #8]
 8003144:	f001 fc46 	bl	80049d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	441a      	add	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	429a      	cmp	r2, r3
 8003160:	d32b      	bcc.n	80031ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	e026      	b.n	80031ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	68d8      	ldr	r0, [r3, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	461a      	mov	r2, r3
 8003176:	68b9      	ldr	r1, [r7, #8]
 8003178:	f001 fc2c 	bl	80049d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	425b      	negs	r3, r3
 8003186:	441a      	add	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d207      	bcs.n	80031a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	425b      	negs	r3, r3
 80031a2:	441a      	add	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d105      	bne.n	80031ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80031c2:	697b      	ldr	r3, [r7, #20]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d018      	beq.n	8003210 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	441a      	add	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d303      	bcc.n	8003200 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68d9      	ldr	r1, [r3, #12]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	461a      	mov	r2, r3
 800320a:	6838      	ldr	r0, [r7, #0]
 800320c:	f001 fbe2 	bl	80049d4 <memcpy>
	}
}
 8003210:	bf00      	nop
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003220:	f001 f878 	bl	8004314 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800322a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800322c:	e011      	b.n	8003252 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	2b00      	cmp	r3, #0
 8003234:	d012      	beq.n	800325c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3324      	adds	r3, #36	; 0x24
 800323a:	4618      	mov	r0, r3
 800323c:	f000 fc76 	bl	8003b2c <xTaskRemoveFromEventList>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003246:	f000 fd4b 	bl	8003ce0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800324a:	7bfb      	ldrb	r3, [r7, #15]
 800324c:	3b01      	subs	r3, #1
 800324e:	b2db      	uxtb	r3, r3
 8003250:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003256:	2b00      	cmp	r3, #0
 8003258:	dce9      	bgt.n	800322e <prvUnlockQueue+0x16>
 800325a:	e000      	b.n	800325e <prvUnlockQueue+0x46>
					break;
 800325c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	22ff      	movs	r2, #255	; 0xff
 8003262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003266:	f001 f885 	bl	8004374 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800326a:	f001 f853 	bl	8004314 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003274:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003276:	e011      	b.n	800329c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d012      	beq.n	80032a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3310      	adds	r3, #16
 8003284:	4618      	mov	r0, r3
 8003286:	f000 fc51 	bl	8003b2c <xTaskRemoveFromEventList>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003290:	f000 fd26 	bl	8003ce0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003294:	7bbb      	ldrb	r3, [r7, #14]
 8003296:	3b01      	subs	r3, #1
 8003298:	b2db      	uxtb	r3, r3
 800329a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800329c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	dce9      	bgt.n	8003278 <prvUnlockQueue+0x60>
 80032a4:	e000      	b.n	80032a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80032a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	22ff      	movs	r2, #255	; 0xff
 80032ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80032b0:	f001 f860 	bl	8004374 <vPortExitCritical>
}
 80032b4:	bf00      	nop
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032c4:	f001 f826 	bl	8004314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d102      	bne.n	80032d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80032d0:	2301      	movs	r3, #1
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	e001      	b.n	80032da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80032d6:	2300      	movs	r3, #0
 80032d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032da:	f001 f84b 	bl	8004374 <vPortExitCritical>

	return xReturn;
 80032de:	68fb      	ldr	r3, [r7, #12]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032f0:	f001 f810 	bl	8004314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d102      	bne.n	8003306 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003300:	2301      	movs	r3, #1
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	e001      	b.n	800330a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800330a:	f001 f833 	bl	8004374 <vPortExitCritical>

	return xReturn;
 800330e:	68fb      	ldr	r3, [r7, #12]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003318:	b580      	push	{r7, lr}
 800331a:	b08e      	sub	sp, #56	; 0x38
 800331c:	af04      	add	r7, sp, #16
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
 8003324:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10a      	bne.n	8003342 <xTaskCreateStatic+0x2a>
	__asm volatile
 800332c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003330:	f383 8811 	msr	BASEPRI, r3
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	623b      	str	r3, [r7, #32]
}
 800333e:	bf00      	nop
 8003340:	e7fe      	b.n	8003340 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10a      	bne.n	800335e <xTaskCreateStatic+0x46>
	__asm volatile
 8003348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	61fb      	str	r3, [r7, #28]
}
 800335a:	bf00      	nop
 800335c:	e7fe      	b.n	800335c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800335e:	2354      	movs	r3, #84	; 0x54
 8003360:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	2b54      	cmp	r3, #84	; 0x54
 8003366:	d00a      	beq.n	800337e <xTaskCreateStatic+0x66>
	__asm volatile
 8003368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336c:	f383 8811 	msr	BASEPRI, r3
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	61bb      	str	r3, [r7, #24]
}
 800337a:	bf00      	nop
 800337c:	e7fe      	b.n	800337c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800337e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003382:	2b00      	cmp	r3, #0
 8003384:	d01e      	beq.n	80033c4 <xTaskCreateStatic+0xac>
 8003386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003388:	2b00      	cmp	r3, #0
 800338a:	d01b      	beq.n	80033c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800338c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003394:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	2202      	movs	r2, #2
 800339a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800339e:	2300      	movs	r3, #0
 80033a0:	9303      	str	r3, [sp, #12]
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	9302      	str	r3, [sp, #8]
 80033a6:	f107 0314 	add.w	r3, r7, #20
 80033aa:	9301      	str	r3, [sp, #4]
 80033ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 f850 	bl	800345c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033be:	f000 f8d5 	bl	800356c <prvAddNewTaskToReadyList>
 80033c2:	e001      	b.n	80033c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80033c8:	697b      	ldr	r3, [r7, #20]
	}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3728      	adds	r7, #40	; 0x28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b08c      	sub	sp, #48	; 0x30
 80033d6:	af04      	add	r7, sp, #16
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4613      	mov	r3, r2
 80033e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80033e2:	88fb      	ldrh	r3, [r7, #6]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4618      	mov	r0, r3
 80033e8:	f001 f8b6 	bl	8004558 <pvPortMalloc>
 80033ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00e      	beq.n	8003412 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80033f4:	2054      	movs	r0, #84	; 0x54
 80033f6:	f001 f8af 	bl	8004558 <pvPortMalloc>
 80033fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	631a      	str	r2, [r3, #48]	; 0x30
 8003408:	e005      	b.n	8003416 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800340a:	6978      	ldr	r0, [r7, #20]
 800340c:	f001 f970 	bl	80046f0 <vPortFree>
 8003410:	e001      	b.n	8003416 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003412:	2300      	movs	r3, #0
 8003414:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d017      	beq.n	800344c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003424:	88fa      	ldrh	r2, [r7, #6]
 8003426:	2300      	movs	r3, #0
 8003428:	9303      	str	r3, [sp, #12]
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	9302      	str	r3, [sp, #8]
 800342e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003430:	9301      	str	r3, [sp, #4]
 8003432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 f80e 	bl	800345c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003440:	69f8      	ldr	r0, [r7, #28]
 8003442:	f000 f893 	bl	800356c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003446:	2301      	movs	r3, #1
 8003448:	61bb      	str	r3, [r7, #24]
 800344a:	e002      	b.n	8003452 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800344c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003450:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003452:	69bb      	ldr	r3, [r7, #24]
	}
 8003454:	4618      	mov	r0, r3
 8003456:	3720      	adds	r7, #32
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
 8003468:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003474:	3b01      	subs	r3, #1
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	f023 0307 	bic.w	r3, r3, #7
 8003482:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800348e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003492:	f383 8811 	msr	BASEPRI, r3
 8003496:	f3bf 8f6f 	isb	sy
 800349a:	f3bf 8f4f 	dsb	sy
 800349e:	617b      	str	r3, [r7, #20]
}
 80034a0:	bf00      	nop
 80034a2:	e7fe      	b.n	80034a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d01f      	beq.n	80034ea <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
 80034ae:	e012      	b.n	80034d6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	4413      	add	r3, r2
 80034b6:	7819      	ldrb	r1, [r3, #0]
 80034b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	4413      	add	r3, r2
 80034be:	3334      	adds	r3, #52	; 0x34
 80034c0:	460a      	mov	r2, r1
 80034c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	4413      	add	r3, r2
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d006      	beq.n	80034de <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	3301      	adds	r3, #1
 80034d4:	61fb      	str	r3, [r7, #28]
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	2b0f      	cmp	r3, #15
 80034da:	d9e9      	bls.n	80034b0 <prvInitialiseNewTask+0x54>
 80034dc:	e000      	b.n	80034e0 <prvInitialiseNewTask+0x84>
			{
				break;
 80034de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034e8:	e003      	b.n	80034f2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80034ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f4:	2b06      	cmp	r3, #6
 80034f6:	d901      	bls.n	80034fc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034f8:	2306      	movs	r3, #6
 80034fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80034fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003500:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003506:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350a:	2200      	movs	r2, #0
 800350c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	3304      	adds	r3, #4
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff f8dc 	bl	80026d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351a:	3318      	adds	r3, #24
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff f8d7 	bl	80026d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003526:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352a:	f1c3 0207 	rsb	r2, r3, #7
 800352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003530:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003536:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353a:	2200      	movs	r2, #0
 800353c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	68f9      	ldr	r1, [r7, #12]
 800354a:	69b8      	ldr	r0, [r7, #24]
 800354c:	f000 fdb4 	bl	80040b8 <pxPortInitialiseStack>
 8003550:	4602      	mov	r2, r0
 8003552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003554:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800355c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003560:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003562:	bf00      	nop
 8003564:	3720      	adds	r7, #32
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003574:	f000 fece 	bl	8004314 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003578:	4b2a      	ldr	r3, [pc, #168]	; (8003624 <prvAddNewTaskToReadyList+0xb8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	3301      	adds	r3, #1
 800357e:	4a29      	ldr	r2, [pc, #164]	; (8003624 <prvAddNewTaskToReadyList+0xb8>)
 8003580:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003582:	4b29      	ldr	r3, [pc, #164]	; (8003628 <prvAddNewTaskToReadyList+0xbc>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d109      	bne.n	800359e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800358a:	4a27      	ldr	r2, [pc, #156]	; (8003628 <prvAddNewTaskToReadyList+0xbc>)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003590:	4b24      	ldr	r3, [pc, #144]	; (8003624 <prvAddNewTaskToReadyList+0xb8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d110      	bne.n	80035ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003598:	f000 fbc6 	bl	8003d28 <prvInitialiseTaskLists>
 800359c:	e00d      	b.n	80035ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800359e:	4b23      	ldr	r3, [pc, #140]	; (800362c <prvAddNewTaskToReadyList+0xc0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035a6:	4b20      	ldr	r3, [pc, #128]	; (8003628 <prvAddNewTaskToReadyList+0xbc>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d802      	bhi.n	80035ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80035b4:	4a1c      	ldr	r2, [pc, #112]	; (8003628 <prvAddNewTaskToReadyList+0xbc>)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80035ba:	4b1d      	ldr	r3, [pc, #116]	; (8003630 <prvAddNewTaskToReadyList+0xc4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3301      	adds	r3, #1
 80035c0:	4a1b      	ldr	r2, [pc, #108]	; (8003630 <prvAddNewTaskToReadyList+0xc4>)
 80035c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	2201      	movs	r2, #1
 80035ca:	409a      	lsls	r2, r3
 80035cc:	4b19      	ldr	r3, [pc, #100]	; (8003634 <prvAddNewTaskToReadyList+0xc8>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	4a18      	ldr	r2, [pc, #96]	; (8003634 <prvAddNewTaskToReadyList+0xc8>)
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035da:	4613      	mov	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4a15      	ldr	r2, [pc, #84]	; (8003638 <prvAddNewTaskToReadyList+0xcc>)
 80035e4:	441a      	add	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3304      	adds	r3, #4
 80035ea:	4619      	mov	r1, r3
 80035ec:	4610      	mov	r0, r2
 80035ee:	f7ff f87c 	bl	80026ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035f2:	f000 febf 	bl	8004374 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035f6:	4b0d      	ldr	r3, [pc, #52]	; (800362c <prvAddNewTaskToReadyList+0xc0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00e      	beq.n	800361c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035fe:	4b0a      	ldr	r3, [pc, #40]	; (8003628 <prvAddNewTaskToReadyList+0xbc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	429a      	cmp	r2, r3
 800360a:	d207      	bcs.n	800361c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800360c:	4b0b      	ldr	r3, [pc, #44]	; (800363c <prvAddNewTaskToReadyList+0xd0>)
 800360e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800361c:	bf00      	nop
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	2000043c 	.word	0x2000043c
 8003628:	2000033c 	.word	0x2000033c
 800362c:	20000448 	.word	0x20000448
 8003630:	20000458 	.word	0x20000458
 8003634:	20000444 	.word	0x20000444
 8003638:	20000340 	.word	0x20000340
 800363c:	e000ed04 	.word	0xe000ed04

08003640 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d017      	beq.n	8003682 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003652:	4b13      	ldr	r3, [pc, #76]	; (80036a0 <vTaskDelay+0x60>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <vTaskDelay+0x30>
	__asm volatile
 800365a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365e:	f383 8811 	msr	BASEPRI, r3
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	f3bf 8f4f 	dsb	sy
 800366a:	60bb      	str	r3, [r7, #8]
}
 800366c:	bf00      	nop
 800366e:	e7fe      	b.n	800366e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003670:	f000 f87a 	bl	8003768 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003674:	2100      	movs	r1, #0
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fcb8 	bl	8003fec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800367c:	f000 f882 	bl	8003784 <xTaskResumeAll>
 8003680:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d107      	bne.n	8003698 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003688:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <vTaskDelay+0x64>)
 800368a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	f3bf 8f4f 	dsb	sy
 8003694:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003698:	bf00      	nop
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20000464 	.word	0x20000464
 80036a4:	e000ed04 	.word	0xe000ed04

080036a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08a      	sub	sp, #40	; 0x28
 80036ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036b6:	463a      	mov	r2, r7
 80036b8:	1d39      	adds	r1, r7, #4
 80036ba:	f107 0308 	add.w	r3, r7, #8
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fc ff5c 	bl	800057c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036c4:	6839      	ldr	r1, [r7, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	9202      	str	r2, [sp, #8]
 80036cc:	9301      	str	r3, [sp, #4]
 80036ce:	2300      	movs	r3, #0
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	2300      	movs	r3, #0
 80036d4:	460a      	mov	r2, r1
 80036d6:	491e      	ldr	r1, [pc, #120]	; (8003750 <vTaskStartScheduler+0xa8>)
 80036d8:	481e      	ldr	r0, [pc, #120]	; (8003754 <vTaskStartScheduler+0xac>)
 80036da:	f7ff fe1d 	bl	8003318 <xTaskCreateStatic>
 80036de:	4603      	mov	r3, r0
 80036e0:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <vTaskStartScheduler+0xb0>)
 80036e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80036e4:	4b1c      	ldr	r3, [pc, #112]	; (8003758 <vTaskStartScheduler+0xb0>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80036ec:	2301      	movs	r3, #1
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	e001      	b.n	80036f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d116      	bne.n	800372a <vTaskStartScheduler+0x82>
	__asm volatile
 80036fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003700:	f383 8811 	msr	BASEPRI, r3
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	613b      	str	r3, [r7, #16]
}
 800370e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003710:	4b12      	ldr	r3, [pc, #72]	; (800375c <vTaskStartScheduler+0xb4>)
 8003712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003716:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003718:	4b11      	ldr	r3, [pc, #68]	; (8003760 <vTaskStartScheduler+0xb8>)
 800371a:	2201      	movs	r2, #1
 800371c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800371e:	4b11      	ldr	r3, [pc, #68]	; (8003764 <vTaskStartScheduler+0xbc>)
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003724:	f000 fd54 	bl	80041d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003728:	e00e      	b.n	8003748 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003730:	d10a      	bne.n	8003748 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003736:	f383 8811 	msr	BASEPRI, r3
 800373a:	f3bf 8f6f 	isb	sy
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	60fb      	str	r3, [r7, #12]
}
 8003744:	bf00      	nop
 8003746:	e7fe      	b.n	8003746 <vTaskStartScheduler+0x9e>
}
 8003748:	bf00      	nop
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	08005340 	.word	0x08005340
 8003754:	08003cf9 	.word	0x08003cf9
 8003758:	20000460 	.word	0x20000460
 800375c:	2000045c 	.word	0x2000045c
 8003760:	20000448 	.word	0x20000448
 8003764:	20000440 	.word	0x20000440

08003768 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800376c:	4b04      	ldr	r3, [pc, #16]	; (8003780 <vTaskSuspendAll+0x18>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3301      	adds	r3, #1
 8003772:	4a03      	ldr	r2, [pc, #12]	; (8003780 <vTaskSuspendAll+0x18>)
 8003774:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003776:	bf00      	nop
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	20000464 	.word	0x20000464

08003784 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800378e:	2300      	movs	r3, #0
 8003790:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003792:	4b41      	ldr	r3, [pc, #260]	; (8003898 <xTaskResumeAll+0x114>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10a      	bne.n	80037b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800379a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379e:	f383 8811 	msr	BASEPRI, r3
 80037a2:	f3bf 8f6f 	isb	sy
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	603b      	str	r3, [r7, #0]
}
 80037ac:	bf00      	nop
 80037ae:	e7fe      	b.n	80037ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037b0:	f000 fdb0 	bl	8004314 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037b4:	4b38      	ldr	r3, [pc, #224]	; (8003898 <xTaskResumeAll+0x114>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3b01      	subs	r3, #1
 80037ba:	4a37      	ldr	r2, [pc, #220]	; (8003898 <xTaskResumeAll+0x114>)
 80037bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037be:	4b36      	ldr	r3, [pc, #216]	; (8003898 <xTaskResumeAll+0x114>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d161      	bne.n	800388a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037c6:	4b35      	ldr	r3, [pc, #212]	; (800389c <xTaskResumeAll+0x118>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d05d      	beq.n	800388a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037ce:	e02e      	b.n	800382e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037d0:	4b33      	ldr	r3, [pc, #204]	; (80038a0 <xTaskResumeAll+0x11c>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	3318      	adds	r3, #24
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fe ffe1 	bl	80027a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3304      	adds	r3, #4
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fe ffdc 	bl	80027a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	2201      	movs	r2, #1
 80037f2:	409a      	lsls	r2, r3
 80037f4:	4b2b      	ldr	r3, [pc, #172]	; (80038a4 <xTaskResumeAll+0x120>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	4a2a      	ldr	r2, [pc, #168]	; (80038a4 <xTaskResumeAll+0x120>)
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4a27      	ldr	r2, [pc, #156]	; (80038a8 <xTaskResumeAll+0x124>)
 800380c:	441a      	add	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	3304      	adds	r3, #4
 8003812:	4619      	mov	r1, r3
 8003814:	4610      	mov	r0, r2
 8003816:	f7fe ff68 	bl	80026ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381e:	4b23      	ldr	r3, [pc, #140]	; (80038ac <xTaskResumeAll+0x128>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	429a      	cmp	r2, r3
 8003826:	d302      	bcc.n	800382e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003828:	4b21      	ldr	r3, [pc, #132]	; (80038b0 <xTaskResumeAll+0x12c>)
 800382a:	2201      	movs	r2, #1
 800382c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800382e:	4b1c      	ldr	r3, [pc, #112]	; (80038a0 <xTaskResumeAll+0x11c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1cc      	bne.n	80037d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800383c:	f000 fb12 	bl	8003e64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003840:	4b1c      	ldr	r3, [pc, #112]	; (80038b4 <xTaskResumeAll+0x130>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d010      	beq.n	800386e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800384c:	f000 f836 	bl	80038bc <xTaskIncrementTick>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003856:	4b16      	ldr	r3, [pc, #88]	; (80038b0 <xTaskResumeAll+0x12c>)
 8003858:	2201      	movs	r2, #1
 800385a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3b01      	subs	r3, #1
 8003860:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1f1      	bne.n	800384c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003868:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <xTaskResumeAll+0x130>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800386e:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <xTaskResumeAll+0x12c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d009      	beq.n	800388a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003876:	2301      	movs	r3, #1
 8003878:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800387a:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <xTaskResumeAll+0x134>)
 800387c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800388a:	f000 fd73 	bl	8004374 <vPortExitCritical>

	return xAlreadyYielded;
 800388e:	68bb      	ldr	r3, [r7, #8]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	20000464 	.word	0x20000464
 800389c:	2000043c 	.word	0x2000043c
 80038a0:	200003fc 	.word	0x200003fc
 80038a4:	20000444 	.word	0x20000444
 80038a8:	20000340 	.word	0x20000340
 80038ac:	2000033c 	.word	0x2000033c
 80038b0:	20000450 	.word	0x20000450
 80038b4:	2000044c 	.word	0x2000044c
 80038b8:	e000ed04 	.word	0xe000ed04

080038bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038c6:	4b4e      	ldr	r3, [pc, #312]	; (8003a00 <xTaskIncrementTick+0x144>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f040 808e 	bne.w	80039ec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038d0:	4b4c      	ldr	r3, [pc, #304]	; (8003a04 <xTaskIncrementTick+0x148>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3301      	adds	r3, #1
 80038d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80038d8:	4a4a      	ldr	r2, [pc, #296]	; (8003a04 <xTaskIncrementTick+0x148>)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d120      	bne.n	8003926 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80038e4:	4b48      	ldr	r3, [pc, #288]	; (8003a08 <xTaskIncrementTick+0x14c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <xTaskIncrementTick+0x48>
	__asm volatile
 80038ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f2:	f383 8811 	msr	BASEPRI, r3
 80038f6:	f3bf 8f6f 	isb	sy
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	603b      	str	r3, [r7, #0]
}
 8003900:	bf00      	nop
 8003902:	e7fe      	b.n	8003902 <xTaskIncrementTick+0x46>
 8003904:	4b40      	ldr	r3, [pc, #256]	; (8003a08 <xTaskIncrementTick+0x14c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	4b40      	ldr	r3, [pc, #256]	; (8003a0c <xTaskIncrementTick+0x150>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a3e      	ldr	r2, [pc, #248]	; (8003a08 <xTaskIncrementTick+0x14c>)
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	4a3e      	ldr	r2, [pc, #248]	; (8003a0c <xTaskIncrementTick+0x150>)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	4b3d      	ldr	r3, [pc, #244]	; (8003a10 <xTaskIncrementTick+0x154>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3301      	adds	r3, #1
 800391e:	4a3c      	ldr	r2, [pc, #240]	; (8003a10 <xTaskIncrementTick+0x154>)
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	f000 fa9f 	bl	8003e64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003926:	4b3b      	ldr	r3, [pc, #236]	; (8003a14 <xTaskIncrementTick+0x158>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	429a      	cmp	r2, r3
 800392e:	d348      	bcc.n	80039c2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003930:	4b35      	ldr	r3, [pc, #212]	; (8003a08 <xTaskIncrementTick+0x14c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d104      	bne.n	8003944 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800393a:	4b36      	ldr	r3, [pc, #216]	; (8003a14 <xTaskIncrementTick+0x158>)
 800393c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003940:	601a      	str	r2, [r3, #0]
					break;
 8003942:	e03e      	b.n	80039c2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003944:	4b30      	ldr	r3, [pc, #192]	; (8003a08 <xTaskIncrementTick+0x14c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	429a      	cmp	r2, r3
 800395a:	d203      	bcs.n	8003964 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800395c:	4a2d      	ldr	r2, [pc, #180]	; (8003a14 <xTaskIncrementTick+0x158>)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003962:	e02e      	b.n	80039c2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	3304      	adds	r3, #4
 8003968:	4618      	mov	r0, r3
 800396a:	f7fe ff1b 	bl	80027a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003972:	2b00      	cmp	r3, #0
 8003974:	d004      	beq.n	8003980 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	3318      	adds	r3, #24
 800397a:	4618      	mov	r0, r3
 800397c:	f7fe ff12 	bl	80027a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	2201      	movs	r2, #1
 8003986:	409a      	lsls	r2, r3
 8003988:	4b23      	ldr	r3, [pc, #140]	; (8003a18 <xTaskIncrementTick+0x15c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4313      	orrs	r3, r2
 800398e:	4a22      	ldr	r2, [pc, #136]	; (8003a18 <xTaskIncrementTick+0x15c>)
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4a1f      	ldr	r2, [pc, #124]	; (8003a1c <xTaskIncrementTick+0x160>)
 80039a0:	441a      	add	r2, r3
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	3304      	adds	r3, #4
 80039a6:	4619      	mov	r1, r3
 80039a8:	4610      	mov	r0, r2
 80039aa:	f7fe fe9e 	bl	80026ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b2:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <xTaskIncrementTick+0x164>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d3b9      	bcc.n	8003930 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80039bc:	2301      	movs	r3, #1
 80039be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039c0:	e7b6      	b.n	8003930 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039c2:	4b17      	ldr	r3, [pc, #92]	; (8003a20 <xTaskIncrementTick+0x164>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c8:	4914      	ldr	r1, [pc, #80]	; (8003a1c <xTaskIncrementTick+0x160>)
 80039ca:	4613      	mov	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	440b      	add	r3, r1
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d901      	bls.n	80039de <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80039da:	2301      	movs	r3, #1
 80039dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80039de:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <xTaskIncrementTick+0x168>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d007      	beq.n	80039f6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80039e6:	2301      	movs	r3, #1
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	e004      	b.n	80039f6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80039ec:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <xTaskIncrementTick+0x16c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3301      	adds	r3, #1
 80039f2:	4a0d      	ldr	r2, [pc, #52]	; (8003a28 <xTaskIncrementTick+0x16c>)
 80039f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80039f6:	697b      	ldr	r3, [r7, #20]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	20000464 	.word	0x20000464
 8003a04:	20000440 	.word	0x20000440
 8003a08:	200003f4 	.word	0x200003f4
 8003a0c:	200003f8 	.word	0x200003f8
 8003a10:	20000454 	.word	0x20000454
 8003a14:	2000045c 	.word	0x2000045c
 8003a18:	20000444 	.word	0x20000444
 8003a1c:	20000340 	.word	0x20000340
 8003a20:	2000033c 	.word	0x2000033c
 8003a24:	20000450 	.word	0x20000450
 8003a28:	2000044c 	.word	0x2000044c

08003a2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a32:	4b27      	ldr	r3, [pc, #156]	; (8003ad0 <vTaskSwitchContext+0xa4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a3a:	4b26      	ldr	r3, [pc, #152]	; (8003ad4 <vTaskSwitchContext+0xa8>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a40:	e03f      	b.n	8003ac2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003a42:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <vTaskSwitchContext+0xa8>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a48:	4b23      	ldr	r3, [pc, #140]	; (8003ad8 <vTaskSwitchContext+0xac>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	fab3 f383 	clz	r3, r3
 8003a54:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003a56:	7afb      	ldrb	r3, [r7, #11]
 8003a58:	f1c3 031f 	rsb	r3, r3, #31
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	491f      	ldr	r1, [pc, #124]	; (8003adc <vTaskSwitchContext+0xb0>)
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10a      	bne.n	8003a88 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	607b      	str	r3, [r7, #4]
}
 8003a84:	bf00      	nop
 8003a86:	e7fe      	b.n	8003a86 <vTaskSwitchContext+0x5a>
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4a12      	ldr	r2, [pc, #72]	; (8003adc <vTaskSwitchContext+0xb0>)
 8003a94:	4413      	add	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	3308      	adds	r3, #8
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d104      	bne.n	8003ab8 <vTaskSwitchContext+0x8c>
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	605a      	str	r2, [r3, #4]
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	4a08      	ldr	r2, [pc, #32]	; (8003ae0 <vTaskSwitchContext+0xb4>)
 8003ac0:	6013      	str	r3, [r2, #0]
}
 8003ac2:	bf00      	nop
 8003ac4:	371c      	adds	r7, #28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	20000464 	.word	0x20000464
 8003ad4:	20000450 	.word	0x20000450
 8003ad8:	20000444 	.word	0x20000444
 8003adc:	20000340 	.word	0x20000340
 8003ae0:	2000033c 	.word	0x2000033c

08003ae4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10a      	bne.n	8003b0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	60fb      	str	r3, [r7, #12]
}
 8003b06:	bf00      	nop
 8003b08:	e7fe      	b.n	8003b08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b0a:	4b07      	ldr	r3, [pc, #28]	; (8003b28 <vTaskPlaceOnEventList+0x44>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3318      	adds	r3, #24
 8003b10:	4619      	mov	r1, r3
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7fe fe0d 	bl	8002732 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b18:	2101      	movs	r1, #1
 8003b1a:	6838      	ldr	r0, [r7, #0]
 8003b1c:	f000 fa66 	bl	8003fec <prvAddCurrentTaskToDelayedList>
}
 8003b20:	bf00      	nop
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	2000033c 	.word	0x2000033c

08003b2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10a      	bne.n	8003b58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	60fb      	str	r3, [r7, #12]
}
 8003b54:	bf00      	nop
 8003b56:	e7fe      	b.n	8003b56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	3318      	adds	r3, #24
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fe fe21 	bl	80027a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b62:	4b1d      	ldr	r3, [pc, #116]	; (8003bd8 <xTaskRemoveFromEventList+0xac>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d11c      	bne.n	8003ba4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fe fe18 	bl	80027a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	2201      	movs	r2, #1
 8003b7a:	409a      	lsls	r2, r3
 8003b7c:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <xTaskRemoveFromEventList+0xb0>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	4a16      	ldr	r2, [pc, #88]	; (8003bdc <xTaskRemoveFromEventList+0xb0>)
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4a13      	ldr	r2, [pc, #76]	; (8003be0 <xTaskRemoveFromEventList+0xb4>)
 8003b94:	441a      	add	r2, r3
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	f7fe fda4 	bl	80026ea <vListInsertEnd>
 8003ba2:	e005      	b.n	8003bb0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	3318      	adds	r3, #24
 8003ba8:	4619      	mov	r1, r3
 8003baa:	480e      	ldr	r0, [pc, #56]	; (8003be4 <xTaskRemoveFromEventList+0xb8>)
 8003bac:	f7fe fd9d 	bl	80026ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <xTaskRemoveFromEventList+0xbc>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d905      	bls.n	8003bca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <xTaskRemoveFromEventList+0xc0>)
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	e001      	b.n	8003bce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003bce:	697b      	ldr	r3, [r7, #20]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20000464 	.word	0x20000464
 8003bdc:	20000444 	.word	0x20000444
 8003be0:	20000340 	.word	0x20000340
 8003be4:	200003fc 	.word	0x200003fc
 8003be8:	2000033c 	.word	0x2000033c
 8003bec:	20000450 	.word	0x20000450

08003bf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <vTaskInternalSetTimeOutState+0x24>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c00:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <vTaskInternalSetTimeOutState+0x28>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	605a      	str	r2, [r3, #4]
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	20000454 	.word	0x20000454
 8003c18:	20000440 	.word	0x20000440

08003c1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10a      	bne.n	8003c42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	613b      	str	r3, [r7, #16]
}
 8003c3e:	bf00      	nop
 8003c40:	e7fe      	b.n	8003c40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10a      	bne.n	8003c5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4c:	f383 8811 	msr	BASEPRI, r3
 8003c50:	f3bf 8f6f 	isb	sy
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	60fb      	str	r3, [r7, #12]
}
 8003c5a:	bf00      	nop
 8003c5c:	e7fe      	b.n	8003c5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003c5e:	f000 fb59 	bl	8004314 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003c62:	4b1d      	ldr	r3, [pc, #116]	; (8003cd8 <xTaskCheckForTimeOut+0xbc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c7a:	d102      	bne.n	8003c82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61fb      	str	r3, [r7, #28]
 8003c80:	e023      	b.n	8003cca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	4b15      	ldr	r3, [pc, #84]	; (8003cdc <xTaskCheckForTimeOut+0xc0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d007      	beq.n	8003c9e <xTaskCheckForTimeOut+0x82>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d302      	bcc.n	8003c9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	61fb      	str	r3, [r7, #28]
 8003c9c:	e015      	b.n	8003cca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d20b      	bcs.n	8003cc0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	1ad2      	subs	r2, r2, r3
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff ff9b 	bl	8003bf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	e004      	b.n	8003cca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003cca:	f000 fb53 	bl	8004374 <vPortExitCritical>

	return xReturn;
 8003cce:	69fb      	ldr	r3, [r7, #28]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3720      	adds	r7, #32
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000440 	.word	0x20000440
 8003cdc:	20000454 	.word	0x20000454

08003ce0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ce4:	4b03      	ldr	r3, [pc, #12]	; (8003cf4 <vTaskMissedYield+0x14>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
}
 8003cea:	bf00      	nop
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	20000450 	.word	0x20000450

08003cf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d00:	f000 f852 	bl	8003da8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d04:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <prvIdleTask+0x28>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d9f9      	bls.n	8003d00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d0c:	4b05      	ldr	r3, [pc, #20]	; (8003d24 <prvIdleTask+0x2c>)
 8003d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d1c:	e7f0      	b.n	8003d00 <prvIdleTask+0x8>
 8003d1e:	bf00      	nop
 8003d20:	20000340 	.word	0x20000340
 8003d24:	e000ed04 	.word	0xe000ed04

08003d28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d2e:	2300      	movs	r3, #0
 8003d30:	607b      	str	r3, [r7, #4]
 8003d32:	e00c      	b.n	8003d4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4a12      	ldr	r2, [pc, #72]	; (8003d88 <prvInitialiseTaskLists+0x60>)
 8003d40:	4413      	add	r3, r2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe fca4 	bl	8002690 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	607b      	str	r3, [r7, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b06      	cmp	r3, #6
 8003d52:	d9ef      	bls.n	8003d34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d54:	480d      	ldr	r0, [pc, #52]	; (8003d8c <prvInitialiseTaskLists+0x64>)
 8003d56:	f7fe fc9b 	bl	8002690 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d5a:	480d      	ldr	r0, [pc, #52]	; (8003d90 <prvInitialiseTaskLists+0x68>)
 8003d5c:	f7fe fc98 	bl	8002690 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d60:	480c      	ldr	r0, [pc, #48]	; (8003d94 <prvInitialiseTaskLists+0x6c>)
 8003d62:	f7fe fc95 	bl	8002690 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d66:	480c      	ldr	r0, [pc, #48]	; (8003d98 <prvInitialiseTaskLists+0x70>)
 8003d68:	f7fe fc92 	bl	8002690 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d6c:	480b      	ldr	r0, [pc, #44]	; (8003d9c <prvInitialiseTaskLists+0x74>)
 8003d6e:	f7fe fc8f 	bl	8002690 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d72:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <prvInitialiseTaskLists+0x78>)
 8003d74:	4a05      	ldr	r2, [pc, #20]	; (8003d8c <prvInitialiseTaskLists+0x64>)
 8003d76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d78:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <prvInitialiseTaskLists+0x7c>)
 8003d7a:	4a05      	ldr	r2, [pc, #20]	; (8003d90 <prvInitialiseTaskLists+0x68>)
 8003d7c:	601a      	str	r2, [r3, #0]
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20000340 	.word	0x20000340
 8003d8c:	200003cc 	.word	0x200003cc
 8003d90:	200003e0 	.word	0x200003e0
 8003d94:	200003fc 	.word	0x200003fc
 8003d98:	20000410 	.word	0x20000410
 8003d9c:	20000428 	.word	0x20000428
 8003da0:	200003f4 	.word	0x200003f4
 8003da4:	200003f8 	.word	0x200003f8

08003da8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dae:	e019      	b.n	8003de4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003db0:	f000 fab0 	bl	8004314 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003db4:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <prvCheckTasksWaitingTermination+0x50>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fe fcef 	bl	80027a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003dc6:	4b0d      	ldr	r3, [pc, #52]	; (8003dfc <prvCheckTasksWaitingTermination+0x54>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	4a0b      	ldr	r2, [pc, #44]	; (8003dfc <prvCheckTasksWaitingTermination+0x54>)
 8003dce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <prvCheckTasksWaitingTermination+0x58>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	4a0a      	ldr	r2, [pc, #40]	; (8003e00 <prvCheckTasksWaitingTermination+0x58>)
 8003dd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003dda:	f000 facb 	bl	8004374 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f810 	bl	8003e04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <prvCheckTasksWaitingTermination+0x58>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1e1      	bne.n	8003db0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003dec:	bf00      	nop
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000410 	.word	0x20000410
 8003dfc:	2000043c 	.word	0x2000043c
 8003e00:	20000424 	.word	0x20000424

08003e04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d108      	bne.n	8003e28 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 fc68 	bl	80046f0 <vPortFree>
				vPortFree( pxTCB );
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 fc65 	bl	80046f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e26:	e018      	b.n	8003e5a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d103      	bne.n	8003e3a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fc5c 	bl	80046f0 <vPortFree>
	}
 8003e38:	e00f      	b.n	8003e5a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d00a      	beq.n	8003e5a <prvDeleteTCB+0x56>
	__asm volatile
 8003e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	60fb      	str	r3, [r7, #12]
}
 8003e56:	bf00      	nop
 8003e58:	e7fe      	b.n	8003e58 <prvDeleteTCB+0x54>
	}
 8003e5a:	bf00      	nop
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e6a:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <prvResetNextTaskUnblockTime+0x38>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d104      	bne.n	8003e7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e74:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <prvResetNextTaskUnblockTime+0x3c>)
 8003e76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e7c:	e008      	b.n	8003e90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e7e:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <prvResetNextTaskUnblockTime+0x38>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	4a04      	ldr	r2, [pc, #16]	; (8003ea0 <prvResetNextTaskUnblockTime+0x3c>)
 8003e8e:	6013      	str	r3, [r2, #0]
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	200003f4 	.word	0x200003f4
 8003ea0:	2000045c 	.word	0x2000045c

08003ea4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003eaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <xTaskGetSchedulerState+0x34>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d102      	bne.n	8003eb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	607b      	str	r3, [r7, #4]
 8003eb6:	e008      	b.n	8003eca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eb8:	4b08      	ldr	r3, [pc, #32]	; (8003edc <xTaskGetSchedulerState+0x38>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d102      	bne.n	8003ec6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	607b      	str	r3, [r7, #4]
 8003ec4:	e001      	b.n	8003eca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003eca:	687b      	ldr	r3, [r7, #4]
	}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	20000448 	.word	0x20000448
 8003edc:	20000464 	.word	0x20000464

08003ee0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003eec:	2300      	movs	r3, #0
 8003eee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d06e      	beq.n	8003fd4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003ef6:	4b3a      	ldr	r3, [pc, #232]	; (8003fe0 <xTaskPriorityDisinherit+0x100>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d00a      	beq.n	8003f16 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	60fb      	str	r3, [r7, #12]
}
 8003f12:	bf00      	nop
 8003f14:	e7fe      	b.n	8003f14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10a      	bne.n	8003f34 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	60bb      	str	r3, [r7, #8]
}
 8003f30:	bf00      	nop
 8003f32:	e7fe      	b.n	8003f32 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f38:	1e5a      	subs	r2, r3, #1
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d044      	beq.n	8003fd4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d140      	bne.n	8003fd4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	3304      	adds	r3, #4
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fe fc24 	bl	80027a4 <uxListRemove>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d115      	bne.n	8003f8e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f66:	491f      	ldr	r1, [pc, #124]	; (8003fe4 <xTaskPriorityDisinherit+0x104>)
 8003f68:	4613      	mov	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10a      	bne.n	8003f8e <xTaskPriorityDisinherit+0xae>
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	43da      	mvns	r2, r3
 8003f84:	4b18      	ldr	r3, [pc, #96]	; (8003fe8 <xTaskPriorityDisinherit+0x108>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	4a17      	ldr	r2, [pc, #92]	; (8003fe8 <xTaskPriorityDisinherit+0x108>)
 8003f8c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	f1c3 0207 	rsb	r2, r3, #7
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	409a      	lsls	r2, r3
 8003faa:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <xTaskPriorityDisinherit+0x108>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	4a0d      	ldr	r2, [pc, #52]	; (8003fe8 <xTaskPriorityDisinherit+0x108>)
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb8:	4613      	mov	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4a08      	ldr	r2, [pc, #32]	; (8003fe4 <xTaskPriorityDisinherit+0x104>)
 8003fc2:	441a      	add	r2, r3
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4610      	mov	r0, r2
 8003fcc:	f7fe fb8d 	bl	80026ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003fd4:	697b      	ldr	r3, [r7, #20]
	}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	2000033c 	.word	0x2000033c
 8003fe4:	20000340 	.word	0x20000340
 8003fe8:	20000444 	.word	0x20000444

08003fec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ff6:	4b29      	ldr	r3, [pc, #164]	; (800409c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ffc:	4b28      	ldr	r3, [pc, #160]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3304      	adds	r3, #4
 8004002:	4618      	mov	r0, r3
 8004004:	f7fe fbce 	bl	80027a4 <uxListRemove>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10b      	bne.n	8004026 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800400e:	4b24      	ldr	r3, [pc, #144]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	2201      	movs	r2, #1
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	43da      	mvns	r2, r3
 800401c:	4b21      	ldr	r3, [pc, #132]	; (80040a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4013      	ands	r3, r2
 8004022:	4a20      	ldr	r2, [pc, #128]	; (80040a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004024:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800402c:	d10a      	bne.n	8004044 <prvAddCurrentTaskToDelayedList+0x58>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004034:	4b1a      	ldr	r3, [pc, #104]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3304      	adds	r3, #4
 800403a:	4619      	mov	r1, r3
 800403c:	481a      	ldr	r0, [pc, #104]	; (80040a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800403e:	f7fe fb54 	bl	80026ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004042:	e026      	b.n	8004092 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4413      	add	r3, r2
 800404a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800404c:	4b14      	ldr	r3, [pc, #80]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	429a      	cmp	r2, r3
 800405a:	d209      	bcs.n	8004070 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800405c:	4b13      	ldr	r3, [pc, #76]	; (80040ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3304      	adds	r3, #4
 8004066:	4619      	mov	r1, r3
 8004068:	4610      	mov	r0, r2
 800406a:	f7fe fb62 	bl	8002732 <vListInsert>
}
 800406e:	e010      	b.n	8004092 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004070:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3304      	adds	r3, #4
 800407a:	4619      	mov	r1, r3
 800407c:	4610      	mov	r0, r2
 800407e:	f7fe fb58 	bl	8002732 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004082:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	429a      	cmp	r2, r3
 800408a:	d202      	bcs.n	8004092 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800408c:	4a09      	ldr	r2, [pc, #36]	; (80040b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	6013      	str	r3, [r2, #0]
}
 8004092:	bf00      	nop
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	20000440 	.word	0x20000440
 80040a0:	2000033c 	.word	0x2000033c
 80040a4:	20000444 	.word	0x20000444
 80040a8:	20000428 	.word	0x20000428
 80040ac:	200003f8 	.word	0x200003f8
 80040b0:	200003f4 	.word	0x200003f4
 80040b4:	2000045c 	.word	0x2000045c

080040b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3b04      	subs	r3, #4
 80040c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	3b04      	subs	r3, #4
 80040d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f023 0201 	bic.w	r2, r3, #1
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	3b04      	subs	r3, #4
 80040e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80040e8:	4a0c      	ldr	r2, [pc, #48]	; (800411c <pxPortInitialiseStack+0x64>)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3b14      	subs	r3, #20
 80040f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	3b04      	subs	r3, #4
 80040fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f06f 0202 	mvn.w	r2, #2
 8004106:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3b20      	subs	r3, #32
 800410c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800410e:	68fb      	ldr	r3, [r7, #12]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	08004121 	.word	0x08004121

08004120 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004126:	2300      	movs	r3, #0
 8004128:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800412a:	4b12      	ldr	r3, [pc, #72]	; (8004174 <prvTaskExitError+0x54>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004132:	d00a      	beq.n	800414a <prvTaskExitError+0x2a>
	__asm volatile
 8004134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	60fb      	str	r3, [r7, #12]
}
 8004146:	bf00      	nop
 8004148:	e7fe      	b.n	8004148 <prvTaskExitError+0x28>
	__asm volatile
 800414a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	60bb      	str	r3, [r7, #8]
}
 800415c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800415e:	bf00      	nop
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0fc      	beq.n	8004160 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004166:	bf00      	nop
 8004168:	bf00      	nop
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	2000000c 	.word	0x2000000c
	...

08004180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004180:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <pxCurrentTCBConst2>)
 8004182:	6819      	ldr	r1, [r3, #0]
 8004184:	6808      	ldr	r0, [r1, #0]
 8004186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800418a:	f380 8809 	msr	PSP, r0
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f04f 0000 	mov.w	r0, #0
 8004196:	f380 8811 	msr	BASEPRI, r0
 800419a:	4770      	bx	lr
 800419c:	f3af 8000 	nop.w

080041a0 <pxCurrentTCBConst2>:
 80041a0:	2000033c 	.word	0x2000033c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop

080041a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80041a8:	4808      	ldr	r0, [pc, #32]	; (80041cc <prvPortStartFirstTask+0x24>)
 80041aa:	6800      	ldr	r0, [r0, #0]
 80041ac:	6800      	ldr	r0, [r0, #0]
 80041ae:	f380 8808 	msr	MSP, r0
 80041b2:	f04f 0000 	mov.w	r0, #0
 80041b6:	f380 8814 	msr	CONTROL, r0
 80041ba:	b662      	cpsie	i
 80041bc:	b661      	cpsie	f
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	df00      	svc	0
 80041c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80041ca:	bf00      	nop
 80041cc:	e000ed08 	.word	0xe000ed08

080041d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80041d6:	4b46      	ldr	r3, [pc, #280]	; (80042f0 <xPortStartScheduler+0x120>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a46      	ldr	r2, [pc, #280]	; (80042f4 <xPortStartScheduler+0x124>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d10a      	bne.n	80041f6 <xPortStartScheduler+0x26>
	__asm volatile
 80041e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e4:	f383 8811 	msr	BASEPRI, r3
 80041e8:	f3bf 8f6f 	isb	sy
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	613b      	str	r3, [r7, #16]
}
 80041f2:	bf00      	nop
 80041f4:	e7fe      	b.n	80041f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041f6:	4b3e      	ldr	r3, [pc, #248]	; (80042f0 <xPortStartScheduler+0x120>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a3f      	ldr	r2, [pc, #252]	; (80042f8 <xPortStartScheduler+0x128>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d10a      	bne.n	8004216 <xPortStartScheduler+0x46>
	__asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	60fb      	str	r3, [r7, #12]
}
 8004212:	bf00      	nop
 8004214:	e7fe      	b.n	8004214 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004216:	4b39      	ldr	r3, [pc, #228]	; (80042fc <xPortStartScheduler+0x12c>)
 8004218:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	22ff      	movs	r2, #255	; 0xff
 8004226:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	b2db      	uxtb	r3, r3
 8004234:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004238:	b2da      	uxtb	r2, r3
 800423a:	4b31      	ldr	r3, [pc, #196]	; (8004300 <xPortStartScheduler+0x130>)
 800423c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800423e:	4b31      	ldr	r3, [pc, #196]	; (8004304 <xPortStartScheduler+0x134>)
 8004240:	2207      	movs	r2, #7
 8004242:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004244:	e009      	b.n	800425a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004246:	4b2f      	ldr	r3, [pc, #188]	; (8004304 <xPortStartScheduler+0x134>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3b01      	subs	r3, #1
 800424c:	4a2d      	ldr	r2, [pc, #180]	; (8004304 <xPortStartScheduler+0x134>)
 800424e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004250:	78fb      	ldrb	r3, [r7, #3]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	b2db      	uxtb	r3, r3
 8004258:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004262:	2b80      	cmp	r3, #128	; 0x80
 8004264:	d0ef      	beq.n	8004246 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004266:	4b27      	ldr	r3, [pc, #156]	; (8004304 <xPortStartScheduler+0x134>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f1c3 0307 	rsb	r3, r3, #7
 800426e:	2b04      	cmp	r3, #4
 8004270:	d00a      	beq.n	8004288 <xPortStartScheduler+0xb8>
	__asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	60bb      	str	r3, [r7, #8]
}
 8004284:	bf00      	nop
 8004286:	e7fe      	b.n	8004286 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004288:	4b1e      	ldr	r3, [pc, #120]	; (8004304 <xPortStartScheduler+0x134>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	4a1d      	ldr	r2, [pc, #116]	; (8004304 <xPortStartScheduler+0x134>)
 8004290:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004292:	4b1c      	ldr	r3, [pc, #112]	; (8004304 <xPortStartScheduler+0x134>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800429a:	4a1a      	ldr	r2, [pc, #104]	; (8004304 <xPortStartScheduler+0x134>)
 800429c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80042a6:	4b18      	ldr	r3, [pc, #96]	; (8004308 <xPortStartScheduler+0x138>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a17      	ldr	r2, [pc, #92]	; (8004308 <xPortStartScheduler+0x138>)
 80042ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80042b2:	4b15      	ldr	r3, [pc, #84]	; (8004308 <xPortStartScheduler+0x138>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a14      	ldr	r2, [pc, #80]	; (8004308 <xPortStartScheduler+0x138>)
 80042b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80042bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80042be:	f000 f8dd 	bl	800447c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80042c2:	4b12      	ldr	r3, [pc, #72]	; (800430c <xPortStartScheduler+0x13c>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80042c8:	f000 f8fc 	bl	80044c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042cc:	4b10      	ldr	r3, [pc, #64]	; (8004310 <xPortStartScheduler+0x140>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a0f      	ldr	r2, [pc, #60]	; (8004310 <xPortStartScheduler+0x140>)
 80042d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80042d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80042d8:	f7ff ff66 	bl	80041a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80042dc:	f7ff fba6 	bl	8003a2c <vTaskSwitchContext>
	prvTaskExitError();
 80042e0:	f7ff ff1e 	bl	8004120 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	e000ed00 	.word	0xe000ed00
 80042f4:	410fc271 	.word	0x410fc271
 80042f8:	410fc270 	.word	0x410fc270
 80042fc:	e000e400 	.word	0xe000e400
 8004300:	20000468 	.word	0x20000468
 8004304:	2000046c 	.word	0x2000046c
 8004308:	e000ed20 	.word	0xe000ed20
 800430c:	2000000c 	.word	0x2000000c
 8004310:	e000ef34 	.word	0xe000ef34

08004314 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	607b      	str	r3, [r7, #4]
}
 800432c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800432e:	4b0f      	ldr	r3, [pc, #60]	; (800436c <vPortEnterCritical+0x58>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3301      	adds	r3, #1
 8004334:	4a0d      	ldr	r2, [pc, #52]	; (800436c <vPortEnterCritical+0x58>)
 8004336:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004338:	4b0c      	ldr	r3, [pc, #48]	; (800436c <vPortEnterCritical+0x58>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d10f      	bne.n	8004360 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004340:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <vPortEnterCritical+0x5c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <vPortEnterCritical+0x4c>
	__asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	603b      	str	r3, [r7, #0]
}
 800435c:	bf00      	nop
 800435e:	e7fe      	b.n	800435e <vPortEnterCritical+0x4a>
	}
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	2000000c 	.word	0x2000000c
 8004370:	e000ed04 	.word	0xe000ed04

08004374 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800437a:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <vPortExitCritical+0x50>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10a      	bne.n	8004398 <vPortExitCritical+0x24>
	__asm volatile
 8004382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	607b      	str	r3, [r7, #4]
}
 8004394:	bf00      	nop
 8004396:	e7fe      	b.n	8004396 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004398:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <vPortExitCritical+0x50>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3b01      	subs	r3, #1
 800439e:	4a09      	ldr	r2, [pc, #36]	; (80043c4 <vPortExitCritical+0x50>)
 80043a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80043a2:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <vPortExitCritical+0x50>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d105      	bne.n	80043b6 <vPortExitCritical+0x42>
 80043aa:	2300      	movs	r3, #0
 80043ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	f383 8811 	msr	BASEPRI, r3
}
 80043b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	2000000c 	.word	0x2000000c
	...

080043d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80043d0:	f3ef 8009 	mrs	r0, PSP
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	4b15      	ldr	r3, [pc, #84]	; (8004430 <pxCurrentTCBConst>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	f01e 0f10 	tst.w	lr, #16
 80043e0:	bf08      	it	eq
 80043e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ea:	6010      	str	r0, [r2, #0]
 80043ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80043f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80043f4:	f380 8811 	msr	BASEPRI, r0
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f7ff fb14 	bl	8003a2c <vTaskSwitchContext>
 8004404:	f04f 0000 	mov.w	r0, #0
 8004408:	f380 8811 	msr	BASEPRI, r0
 800440c:	bc09      	pop	{r0, r3}
 800440e:	6819      	ldr	r1, [r3, #0]
 8004410:	6808      	ldr	r0, [r1, #0]
 8004412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004416:	f01e 0f10 	tst.w	lr, #16
 800441a:	bf08      	it	eq
 800441c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004420:	f380 8809 	msr	PSP, r0
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	f3af 8000 	nop.w

08004430 <pxCurrentTCBConst>:
 8004430:	2000033c 	.word	0x2000033c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop

08004438 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
	__asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	607b      	str	r3, [r7, #4]
}
 8004450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004452:	f7ff fa33 	bl	80038bc <xTaskIncrementTick>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800445c:	4b06      	ldr	r3, [pc, #24]	; (8004478 <xPortSysTickHandler+0x40>)
 800445e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	2300      	movs	r3, #0
 8004466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	f383 8811 	msr	BASEPRI, r3
}
 800446e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004470:	bf00      	nop
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	e000ed04 	.word	0xe000ed04

0800447c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004480:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <vPortSetupTimerInterrupt+0x34>)
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004486:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <vPortSetupTimerInterrupt+0x38>)
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800448c:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <vPortSetupTimerInterrupt+0x3c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a0a      	ldr	r2, [pc, #40]	; (80044bc <vPortSetupTimerInterrupt+0x40>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	099b      	lsrs	r3, r3, #6
 8004498:	4a09      	ldr	r2, [pc, #36]	; (80044c0 <vPortSetupTimerInterrupt+0x44>)
 800449a:	3b01      	subs	r3, #1
 800449c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800449e:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <vPortSetupTimerInterrupt+0x34>)
 80044a0:	2207      	movs	r2, #7
 80044a2:	601a      	str	r2, [r3, #0]
}
 80044a4:	bf00      	nop
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	e000e010 	.word	0xe000e010
 80044b4:	e000e018 	.word	0xe000e018
 80044b8:	20000000 	.word	0x20000000
 80044bc:	10624dd3 	.word	0x10624dd3
 80044c0:	e000e014 	.word	0xe000e014

080044c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80044c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80044d4 <vPortEnableVFP+0x10>
 80044c8:	6801      	ldr	r1, [r0, #0]
 80044ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044ce:	6001      	str	r1, [r0, #0]
 80044d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80044d2:	bf00      	nop
 80044d4:	e000ed88 	.word	0xe000ed88

080044d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80044de:	f3ef 8305 	mrs	r3, IPSR
 80044e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b0f      	cmp	r3, #15
 80044e8:	d914      	bls.n	8004514 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80044ea:	4a17      	ldr	r2, [pc, #92]	; (8004548 <vPortValidateInterruptPriority+0x70>)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4413      	add	r3, r2
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80044f4:	4b15      	ldr	r3, [pc, #84]	; (800454c <vPortValidateInterruptPriority+0x74>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	7afa      	ldrb	r2, [r7, #11]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d20a      	bcs.n	8004514 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	607b      	str	r3, [r7, #4]
}
 8004510:	bf00      	nop
 8004512:	e7fe      	b.n	8004512 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004514:	4b0e      	ldr	r3, [pc, #56]	; (8004550 <vPortValidateInterruptPriority+0x78>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800451c:	4b0d      	ldr	r3, [pc, #52]	; (8004554 <vPortValidateInterruptPriority+0x7c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d90a      	bls.n	800453a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	603b      	str	r3, [r7, #0]
}
 8004536:	bf00      	nop
 8004538:	e7fe      	b.n	8004538 <vPortValidateInterruptPriority+0x60>
	}
 800453a:	bf00      	nop
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	e000e3f0 	.word	0xe000e3f0
 800454c:	20000468 	.word	0x20000468
 8004550:	e000ed0c 	.word	0xe000ed0c
 8004554:	2000046c 	.word	0x2000046c

08004558 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08a      	sub	sp, #40	; 0x28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004560:	2300      	movs	r3, #0
 8004562:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004564:	f7ff f900 	bl	8003768 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004568:	4b5b      	ldr	r3, [pc, #364]	; (80046d8 <pvPortMalloc+0x180>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004570:	f000 f920 	bl	80047b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004574:	4b59      	ldr	r3, [pc, #356]	; (80046dc <pvPortMalloc+0x184>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4013      	ands	r3, r2
 800457c:	2b00      	cmp	r3, #0
 800457e:	f040 8093 	bne.w	80046a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01d      	beq.n	80045c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004588:	2208      	movs	r2, #8
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4413      	add	r3, r2
 800458e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	2b00      	cmp	r3, #0
 8004598:	d014      	beq.n	80045c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f023 0307 	bic.w	r3, r3, #7
 80045a0:	3308      	adds	r3, #8
 80045a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <pvPortMalloc+0x6c>
	__asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	617b      	str	r3, [r7, #20]
}
 80045c0:	bf00      	nop
 80045c2:	e7fe      	b.n	80045c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d06e      	beq.n	80046a8 <pvPortMalloc+0x150>
 80045ca:	4b45      	ldr	r3, [pc, #276]	; (80046e0 <pvPortMalloc+0x188>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d869      	bhi.n	80046a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80045d4:	4b43      	ldr	r3, [pc, #268]	; (80046e4 <pvPortMalloc+0x18c>)
 80045d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80045d8:	4b42      	ldr	r3, [pc, #264]	; (80046e4 <pvPortMalloc+0x18c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045de:	e004      	b.n	80045ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d903      	bls.n	80045fc <pvPortMalloc+0xa4>
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1f1      	bne.n	80045e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80045fc:	4b36      	ldr	r3, [pc, #216]	; (80046d8 <pvPortMalloc+0x180>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004602:	429a      	cmp	r2, r3
 8004604:	d050      	beq.n	80046a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2208      	movs	r2, #8
 800460c:	4413      	add	r3, r2
 800460e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	1ad2      	subs	r2, r2, r3
 8004620:	2308      	movs	r3, #8
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	429a      	cmp	r2, r3
 8004626:	d91f      	bls.n	8004668 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4413      	add	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <pvPortMalloc+0xf8>
	__asm volatile
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	613b      	str	r3, [r7, #16]
}
 800464c:	bf00      	nop
 800464e:	e7fe      	b.n	800464e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	1ad2      	subs	r2, r2, r3
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004662:	69b8      	ldr	r0, [r7, #24]
 8004664:	f000 f908 	bl	8004878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004668:	4b1d      	ldr	r3, [pc, #116]	; (80046e0 <pvPortMalloc+0x188>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	4a1b      	ldr	r2, [pc, #108]	; (80046e0 <pvPortMalloc+0x188>)
 8004674:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004676:	4b1a      	ldr	r3, [pc, #104]	; (80046e0 <pvPortMalloc+0x188>)
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	4b1b      	ldr	r3, [pc, #108]	; (80046e8 <pvPortMalloc+0x190>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d203      	bcs.n	800468a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004682:	4b17      	ldr	r3, [pc, #92]	; (80046e0 <pvPortMalloc+0x188>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a18      	ldr	r2, [pc, #96]	; (80046e8 <pvPortMalloc+0x190>)
 8004688:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	4b13      	ldr	r3, [pc, #76]	; (80046dc <pvPortMalloc+0x184>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	431a      	orrs	r2, r3
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800469e:	4b13      	ldr	r3, [pc, #76]	; (80046ec <pvPortMalloc+0x194>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3301      	adds	r3, #1
 80046a4:	4a11      	ldr	r2, [pc, #68]	; (80046ec <pvPortMalloc+0x194>)
 80046a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80046a8:	f7ff f86c 	bl	8003784 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	f003 0307 	and.w	r3, r3, #7
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00a      	beq.n	80046cc <pvPortMalloc+0x174>
	__asm volatile
 80046b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	60fb      	str	r3, [r7, #12]
}
 80046c8:	bf00      	nop
 80046ca:	e7fe      	b.n	80046ca <pvPortMalloc+0x172>
	return pvReturn;
 80046cc:	69fb      	ldr	r3, [r7, #28]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3728      	adds	r7, #40	; 0x28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20004078 	.word	0x20004078
 80046dc:	2000408c 	.word	0x2000408c
 80046e0:	2000407c 	.word	0x2000407c
 80046e4:	20004070 	.word	0x20004070
 80046e8:	20004080 	.word	0x20004080
 80046ec:	20004084 	.word	0x20004084

080046f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d04d      	beq.n	800479e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004702:	2308      	movs	r3, #8
 8004704:	425b      	negs	r3, r3
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	4413      	add	r3, r2
 800470a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	4b24      	ldr	r3, [pc, #144]	; (80047a8 <vPortFree+0xb8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4013      	ands	r3, r2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10a      	bne.n	8004734 <vPortFree+0x44>
	__asm volatile
 800471e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	60fb      	str	r3, [r7, #12]
}
 8004730:	bf00      	nop
 8004732:	e7fe      	b.n	8004732 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <vPortFree+0x62>
	__asm volatile
 800473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	60bb      	str	r3, [r7, #8]
}
 800474e:	bf00      	nop
 8004750:	e7fe      	b.n	8004750 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	4b14      	ldr	r3, [pc, #80]	; (80047a8 <vPortFree+0xb8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4013      	ands	r3, r2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d01e      	beq.n	800479e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d11a      	bne.n	800479e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	4b0e      	ldr	r3, [pc, #56]	; (80047a8 <vPortFree+0xb8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	43db      	mvns	r3, r3
 8004772:	401a      	ands	r2, r3
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004778:	f7fe fff6 	bl	8003768 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	4b0a      	ldr	r3, [pc, #40]	; (80047ac <vPortFree+0xbc>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4413      	add	r3, r2
 8004786:	4a09      	ldr	r2, [pc, #36]	; (80047ac <vPortFree+0xbc>)
 8004788:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800478a:	6938      	ldr	r0, [r7, #16]
 800478c:	f000 f874 	bl	8004878 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004790:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <vPortFree+0xc0>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	3301      	adds	r3, #1
 8004796:	4a06      	ldr	r2, [pc, #24]	; (80047b0 <vPortFree+0xc0>)
 8004798:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800479a:	f7fe fff3 	bl	8003784 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800479e:	bf00      	nop
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	2000408c 	.word	0x2000408c
 80047ac:	2000407c 	.word	0x2000407c
 80047b0:	20004088 	.word	0x20004088

080047b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80047be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80047c0:	4b27      	ldr	r3, [pc, #156]	; (8004860 <prvHeapInit+0xac>)
 80047c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00c      	beq.n	80047e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3307      	adds	r3, #7
 80047d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0307 	bic.w	r3, r3, #7
 80047da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	4a1f      	ldr	r2, [pc, #124]	; (8004860 <prvHeapInit+0xac>)
 80047e4:	4413      	add	r3, r2
 80047e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047ec:	4a1d      	ldr	r2, [pc, #116]	; (8004864 <prvHeapInit+0xb0>)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80047f2:	4b1c      	ldr	r3, [pc, #112]	; (8004864 <prvHeapInit+0xb0>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	4413      	add	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004800:	2208      	movs	r2, #8
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0307 	bic.w	r3, r3, #7
 800480e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4a15      	ldr	r2, [pc, #84]	; (8004868 <prvHeapInit+0xb4>)
 8004814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004816:	4b14      	ldr	r3, [pc, #80]	; (8004868 <prvHeapInit+0xb4>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2200      	movs	r2, #0
 800481c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800481e:	4b12      	ldr	r3, [pc, #72]	; (8004868 <prvHeapInit+0xb4>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	1ad2      	subs	r2, r2, r3
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004834:	4b0c      	ldr	r3, [pc, #48]	; (8004868 <prvHeapInit+0xb4>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	4a0a      	ldr	r2, [pc, #40]	; (800486c <prvHeapInit+0xb8>)
 8004842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	4a09      	ldr	r2, [pc, #36]	; (8004870 <prvHeapInit+0xbc>)
 800484a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800484c:	4b09      	ldr	r3, [pc, #36]	; (8004874 <prvHeapInit+0xc0>)
 800484e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004852:	601a      	str	r2, [r3, #0]
}
 8004854:	bf00      	nop
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	20000470 	.word	0x20000470
 8004864:	20004070 	.word	0x20004070
 8004868:	20004078 	.word	0x20004078
 800486c:	20004080 	.word	0x20004080
 8004870:	2000407c 	.word	0x2000407c
 8004874:	2000408c 	.word	0x2000408c

08004878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004880:	4b28      	ldr	r3, [pc, #160]	; (8004924 <prvInsertBlockIntoFreeList+0xac>)
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	e002      	b.n	800488c <prvInsertBlockIntoFreeList+0x14>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	429a      	cmp	r2, r3
 8004894:	d8f7      	bhi.n	8004886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	4413      	add	r3, r2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d108      	bne.n	80048ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	441a      	add	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	441a      	add	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d118      	bne.n	8004900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	4b15      	ldr	r3, [pc, #84]	; (8004928 <prvInsertBlockIntoFreeList+0xb0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d00d      	beq.n	80048f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	441a      	add	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	e008      	b.n	8004908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048f6:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <prvInsertBlockIntoFreeList+0xb0>)
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	e003      	b.n	8004908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	429a      	cmp	r2, r3
 800490e:	d002      	beq.n	8004916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004916:	bf00      	nop
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	20004070 	.word	0x20004070
 8004928:	20004078 	.word	0x20004078

0800492c <siprintf>:
 800492c:	b40e      	push	{r1, r2, r3}
 800492e:	b500      	push	{lr}
 8004930:	b09c      	sub	sp, #112	; 0x70
 8004932:	ab1d      	add	r3, sp, #116	; 0x74
 8004934:	9002      	str	r0, [sp, #8]
 8004936:	9006      	str	r0, [sp, #24]
 8004938:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800493c:	4809      	ldr	r0, [pc, #36]	; (8004964 <siprintf+0x38>)
 800493e:	9107      	str	r1, [sp, #28]
 8004940:	9104      	str	r1, [sp, #16]
 8004942:	4909      	ldr	r1, [pc, #36]	; (8004968 <siprintf+0x3c>)
 8004944:	f853 2b04 	ldr.w	r2, [r3], #4
 8004948:	9105      	str	r1, [sp, #20]
 800494a:	6800      	ldr	r0, [r0, #0]
 800494c:	9301      	str	r3, [sp, #4]
 800494e:	a902      	add	r1, sp, #8
 8004950:	f000 f8a8 	bl	8004aa4 <_svfiprintf_r>
 8004954:	9b02      	ldr	r3, [sp, #8]
 8004956:	2200      	movs	r2, #0
 8004958:	701a      	strb	r2, [r3, #0]
 800495a:	b01c      	add	sp, #112	; 0x70
 800495c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004960:	b003      	add	sp, #12
 8004962:	4770      	bx	lr
 8004964:	2000005c 	.word	0x2000005c
 8004968:	ffff0208 	.word	0xffff0208

0800496c <memset>:
 800496c:	4402      	add	r2, r0
 800496e:	4603      	mov	r3, r0
 8004970:	4293      	cmp	r3, r2
 8004972:	d100      	bne.n	8004976 <memset+0xa>
 8004974:	4770      	bx	lr
 8004976:	f803 1b01 	strb.w	r1, [r3], #1
 800497a:	e7f9      	b.n	8004970 <memset+0x4>

0800497c <__errno>:
 800497c:	4b01      	ldr	r3, [pc, #4]	; (8004984 <__errno+0x8>)
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	2000005c 	.word	0x2000005c

08004988 <__libc_init_array>:
 8004988:	b570      	push	{r4, r5, r6, lr}
 800498a:	4d0d      	ldr	r5, [pc, #52]	; (80049c0 <__libc_init_array+0x38>)
 800498c:	4c0d      	ldr	r4, [pc, #52]	; (80049c4 <__libc_init_array+0x3c>)
 800498e:	1b64      	subs	r4, r4, r5
 8004990:	10a4      	asrs	r4, r4, #2
 8004992:	2600      	movs	r6, #0
 8004994:	42a6      	cmp	r6, r4
 8004996:	d109      	bne.n	80049ac <__libc_init_array+0x24>
 8004998:	4d0b      	ldr	r5, [pc, #44]	; (80049c8 <__libc_init_array+0x40>)
 800499a:	4c0c      	ldr	r4, [pc, #48]	; (80049cc <__libc_init_array+0x44>)
 800499c:	f000 fc6a 	bl	8005274 <_init>
 80049a0:	1b64      	subs	r4, r4, r5
 80049a2:	10a4      	asrs	r4, r4, #2
 80049a4:	2600      	movs	r6, #0
 80049a6:	42a6      	cmp	r6, r4
 80049a8:	d105      	bne.n	80049b6 <__libc_init_array+0x2e>
 80049aa:	bd70      	pop	{r4, r5, r6, pc}
 80049ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b0:	4798      	blx	r3
 80049b2:	3601      	adds	r6, #1
 80049b4:	e7ee      	b.n	8004994 <__libc_init_array+0xc>
 80049b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ba:	4798      	blx	r3
 80049bc:	3601      	adds	r6, #1
 80049be:	e7f2      	b.n	80049a6 <__libc_init_array+0x1e>
 80049c0:	0800539c 	.word	0x0800539c
 80049c4:	0800539c 	.word	0x0800539c
 80049c8:	0800539c 	.word	0x0800539c
 80049cc:	080053a0 	.word	0x080053a0

080049d0 <__retarget_lock_acquire_recursive>:
 80049d0:	4770      	bx	lr

080049d2 <__retarget_lock_release_recursive>:
 80049d2:	4770      	bx	lr

080049d4 <memcpy>:
 80049d4:	440a      	add	r2, r1
 80049d6:	4291      	cmp	r1, r2
 80049d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80049dc:	d100      	bne.n	80049e0 <memcpy+0xc>
 80049de:	4770      	bx	lr
 80049e0:	b510      	push	{r4, lr}
 80049e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049ea:	4291      	cmp	r1, r2
 80049ec:	d1f9      	bne.n	80049e2 <memcpy+0xe>
 80049ee:	bd10      	pop	{r4, pc}

080049f0 <__ssputs_r>:
 80049f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049f4:	688e      	ldr	r6, [r1, #8]
 80049f6:	461f      	mov	r7, r3
 80049f8:	42be      	cmp	r6, r7
 80049fa:	680b      	ldr	r3, [r1, #0]
 80049fc:	4682      	mov	sl, r0
 80049fe:	460c      	mov	r4, r1
 8004a00:	4690      	mov	r8, r2
 8004a02:	d82c      	bhi.n	8004a5e <__ssputs_r+0x6e>
 8004a04:	898a      	ldrh	r2, [r1, #12]
 8004a06:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a0a:	d026      	beq.n	8004a5a <__ssputs_r+0x6a>
 8004a0c:	6965      	ldr	r5, [r4, #20]
 8004a0e:	6909      	ldr	r1, [r1, #16]
 8004a10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a14:	eba3 0901 	sub.w	r9, r3, r1
 8004a18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a1c:	1c7b      	adds	r3, r7, #1
 8004a1e:	444b      	add	r3, r9
 8004a20:	106d      	asrs	r5, r5, #1
 8004a22:	429d      	cmp	r5, r3
 8004a24:	bf38      	it	cc
 8004a26:	461d      	movcc	r5, r3
 8004a28:	0553      	lsls	r3, r2, #21
 8004a2a:	d527      	bpl.n	8004a7c <__ssputs_r+0x8c>
 8004a2c:	4629      	mov	r1, r5
 8004a2e:	f000 f957 	bl	8004ce0 <_malloc_r>
 8004a32:	4606      	mov	r6, r0
 8004a34:	b360      	cbz	r0, 8004a90 <__ssputs_r+0xa0>
 8004a36:	6921      	ldr	r1, [r4, #16]
 8004a38:	464a      	mov	r2, r9
 8004a3a:	f7ff ffcb 	bl	80049d4 <memcpy>
 8004a3e:	89a3      	ldrh	r3, [r4, #12]
 8004a40:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a48:	81a3      	strh	r3, [r4, #12]
 8004a4a:	6126      	str	r6, [r4, #16]
 8004a4c:	6165      	str	r5, [r4, #20]
 8004a4e:	444e      	add	r6, r9
 8004a50:	eba5 0509 	sub.w	r5, r5, r9
 8004a54:	6026      	str	r6, [r4, #0]
 8004a56:	60a5      	str	r5, [r4, #8]
 8004a58:	463e      	mov	r6, r7
 8004a5a:	42be      	cmp	r6, r7
 8004a5c:	d900      	bls.n	8004a60 <__ssputs_r+0x70>
 8004a5e:	463e      	mov	r6, r7
 8004a60:	6820      	ldr	r0, [r4, #0]
 8004a62:	4632      	mov	r2, r6
 8004a64:	4641      	mov	r1, r8
 8004a66:	f000 fb86 	bl	8005176 <memmove>
 8004a6a:	68a3      	ldr	r3, [r4, #8]
 8004a6c:	1b9b      	subs	r3, r3, r6
 8004a6e:	60a3      	str	r3, [r4, #8]
 8004a70:	6823      	ldr	r3, [r4, #0]
 8004a72:	4433      	add	r3, r6
 8004a74:	6023      	str	r3, [r4, #0]
 8004a76:	2000      	movs	r0, #0
 8004a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a7c:	462a      	mov	r2, r5
 8004a7e:	f000 fb4b 	bl	8005118 <_realloc_r>
 8004a82:	4606      	mov	r6, r0
 8004a84:	2800      	cmp	r0, #0
 8004a86:	d1e0      	bne.n	8004a4a <__ssputs_r+0x5a>
 8004a88:	6921      	ldr	r1, [r4, #16]
 8004a8a:	4650      	mov	r0, sl
 8004a8c:	f000 fb9e 	bl	80051cc <_free_r>
 8004a90:	230c      	movs	r3, #12
 8004a92:	f8ca 3000 	str.w	r3, [sl]
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a9c:	81a3      	strh	r3, [r4, #12]
 8004a9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004aa2:	e7e9      	b.n	8004a78 <__ssputs_r+0x88>

08004aa4 <_svfiprintf_r>:
 8004aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa8:	4698      	mov	r8, r3
 8004aaa:	898b      	ldrh	r3, [r1, #12]
 8004aac:	061b      	lsls	r3, r3, #24
 8004aae:	b09d      	sub	sp, #116	; 0x74
 8004ab0:	4607      	mov	r7, r0
 8004ab2:	460d      	mov	r5, r1
 8004ab4:	4614      	mov	r4, r2
 8004ab6:	d50e      	bpl.n	8004ad6 <_svfiprintf_r+0x32>
 8004ab8:	690b      	ldr	r3, [r1, #16]
 8004aba:	b963      	cbnz	r3, 8004ad6 <_svfiprintf_r+0x32>
 8004abc:	2140      	movs	r1, #64	; 0x40
 8004abe:	f000 f90f 	bl	8004ce0 <_malloc_r>
 8004ac2:	6028      	str	r0, [r5, #0]
 8004ac4:	6128      	str	r0, [r5, #16]
 8004ac6:	b920      	cbnz	r0, 8004ad2 <_svfiprintf_r+0x2e>
 8004ac8:	230c      	movs	r3, #12
 8004aca:	603b      	str	r3, [r7, #0]
 8004acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ad0:	e0d0      	b.n	8004c74 <_svfiprintf_r+0x1d0>
 8004ad2:	2340      	movs	r3, #64	; 0x40
 8004ad4:	616b      	str	r3, [r5, #20]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8004ada:	2320      	movs	r3, #32
 8004adc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ae0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ae4:	2330      	movs	r3, #48	; 0x30
 8004ae6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004c8c <_svfiprintf_r+0x1e8>
 8004aea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004aee:	f04f 0901 	mov.w	r9, #1
 8004af2:	4623      	mov	r3, r4
 8004af4:	469a      	mov	sl, r3
 8004af6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004afa:	b10a      	cbz	r2, 8004b00 <_svfiprintf_r+0x5c>
 8004afc:	2a25      	cmp	r2, #37	; 0x25
 8004afe:	d1f9      	bne.n	8004af4 <_svfiprintf_r+0x50>
 8004b00:	ebba 0b04 	subs.w	fp, sl, r4
 8004b04:	d00b      	beq.n	8004b1e <_svfiprintf_r+0x7a>
 8004b06:	465b      	mov	r3, fp
 8004b08:	4622      	mov	r2, r4
 8004b0a:	4629      	mov	r1, r5
 8004b0c:	4638      	mov	r0, r7
 8004b0e:	f7ff ff6f 	bl	80049f0 <__ssputs_r>
 8004b12:	3001      	adds	r0, #1
 8004b14:	f000 80a9 	beq.w	8004c6a <_svfiprintf_r+0x1c6>
 8004b18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b1a:	445a      	add	r2, fp
 8004b1c:	9209      	str	r2, [sp, #36]	; 0x24
 8004b1e:	f89a 3000 	ldrb.w	r3, [sl]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 80a1 	beq.w	8004c6a <_svfiprintf_r+0x1c6>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b32:	f10a 0a01 	add.w	sl, sl, #1
 8004b36:	9304      	str	r3, [sp, #16]
 8004b38:	9307      	str	r3, [sp, #28]
 8004b3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b3e:	931a      	str	r3, [sp, #104]	; 0x68
 8004b40:	4654      	mov	r4, sl
 8004b42:	2205      	movs	r2, #5
 8004b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b48:	4850      	ldr	r0, [pc, #320]	; (8004c8c <_svfiprintf_r+0x1e8>)
 8004b4a:	f7fb fb49 	bl	80001e0 <memchr>
 8004b4e:	9a04      	ldr	r2, [sp, #16]
 8004b50:	b9d8      	cbnz	r0, 8004b8a <_svfiprintf_r+0xe6>
 8004b52:	06d0      	lsls	r0, r2, #27
 8004b54:	bf44      	itt	mi
 8004b56:	2320      	movmi	r3, #32
 8004b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b5c:	0711      	lsls	r1, r2, #28
 8004b5e:	bf44      	itt	mi
 8004b60:	232b      	movmi	r3, #43	; 0x2b
 8004b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b66:	f89a 3000 	ldrb.w	r3, [sl]
 8004b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b6c:	d015      	beq.n	8004b9a <_svfiprintf_r+0xf6>
 8004b6e:	9a07      	ldr	r2, [sp, #28]
 8004b70:	4654      	mov	r4, sl
 8004b72:	2000      	movs	r0, #0
 8004b74:	f04f 0c0a 	mov.w	ip, #10
 8004b78:	4621      	mov	r1, r4
 8004b7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b7e:	3b30      	subs	r3, #48	; 0x30
 8004b80:	2b09      	cmp	r3, #9
 8004b82:	d94d      	bls.n	8004c20 <_svfiprintf_r+0x17c>
 8004b84:	b1b0      	cbz	r0, 8004bb4 <_svfiprintf_r+0x110>
 8004b86:	9207      	str	r2, [sp, #28]
 8004b88:	e014      	b.n	8004bb4 <_svfiprintf_r+0x110>
 8004b8a:	eba0 0308 	sub.w	r3, r0, r8
 8004b8e:	fa09 f303 	lsl.w	r3, r9, r3
 8004b92:	4313      	orrs	r3, r2
 8004b94:	9304      	str	r3, [sp, #16]
 8004b96:	46a2      	mov	sl, r4
 8004b98:	e7d2      	b.n	8004b40 <_svfiprintf_r+0x9c>
 8004b9a:	9b03      	ldr	r3, [sp, #12]
 8004b9c:	1d19      	adds	r1, r3, #4
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	9103      	str	r1, [sp, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	bfbb      	ittet	lt
 8004ba6:	425b      	neglt	r3, r3
 8004ba8:	f042 0202 	orrlt.w	r2, r2, #2
 8004bac:	9307      	strge	r3, [sp, #28]
 8004bae:	9307      	strlt	r3, [sp, #28]
 8004bb0:	bfb8      	it	lt
 8004bb2:	9204      	strlt	r2, [sp, #16]
 8004bb4:	7823      	ldrb	r3, [r4, #0]
 8004bb6:	2b2e      	cmp	r3, #46	; 0x2e
 8004bb8:	d10c      	bne.n	8004bd4 <_svfiprintf_r+0x130>
 8004bba:	7863      	ldrb	r3, [r4, #1]
 8004bbc:	2b2a      	cmp	r3, #42	; 0x2a
 8004bbe:	d134      	bne.n	8004c2a <_svfiprintf_r+0x186>
 8004bc0:	9b03      	ldr	r3, [sp, #12]
 8004bc2:	1d1a      	adds	r2, r3, #4
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	9203      	str	r2, [sp, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	bfb8      	it	lt
 8004bcc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004bd0:	3402      	adds	r4, #2
 8004bd2:	9305      	str	r3, [sp, #20]
 8004bd4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004c9c <_svfiprintf_r+0x1f8>
 8004bd8:	7821      	ldrb	r1, [r4, #0]
 8004bda:	2203      	movs	r2, #3
 8004bdc:	4650      	mov	r0, sl
 8004bde:	f7fb faff 	bl	80001e0 <memchr>
 8004be2:	b138      	cbz	r0, 8004bf4 <_svfiprintf_r+0x150>
 8004be4:	9b04      	ldr	r3, [sp, #16]
 8004be6:	eba0 000a 	sub.w	r0, r0, sl
 8004bea:	2240      	movs	r2, #64	; 0x40
 8004bec:	4082      	lsls	r2, r0
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	3401      	adds	r4, #1
 8004bf2:	9304      	str	r3, [sp, #16]
 8004bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bf8:	4825      	ldr	r0, [pc, #148]	; (8004c90 <_svfiprintf_r+0x1ec>)
 8004bfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bfe:	2206      	movs	r2, #6
 8004c00:	f7fb faee 	bl	80001e0 <memchr>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d038      	beq.n	8004c7a <_svfiprintf_r+0x1d6>
 8004c08:	4b22      	ldr	r3, [pc, #136]	; (8004c94 <_svfiprintf_r+0x1f0>)
 8004c0a:	bb1b      	cbnz	r3, 8004c54 <_svfiprintf_r+0x1b0>
 8004c0c:	9b03      	ldr	r3, [sp, #12]
 8004c0e:	3307      	adds	r3, #7
 8004c10:	f023 0307 	bic.w	r3, r3, #7
 8004c14:	3308      	adds	r3, #8
 8004c16:	9303      	str	r3, [sp, #12]
 8004c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c1a:	4433      	add	r3, r6
 8004c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c1e:	e768      	b.n	8004af2 <_svfiprintf_r+0x4e>
 8004c20:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c24:	460c      	mov	r4, r1
 8004c26:	2001      	movs	r0, #1
 8004c28:	e7a6      	b.n	8004b78 <_svfiprintf_r+0xd4>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	3401      	adds	r4, #1
 8004c2e:	9305      	str	r3, [sp, #20]
 8004c30:	4619      	mov	r1, r3
 8004c32:	f04f 0c0a 	mov.w	ip, #10
 8004c36:	4620      	mov	r0, r4
 8004c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c3c:	3a30      	subs	r2, #48	; 0x30
 8004c3e:	2a09      	cmp	r2, #9
 8004c40:	d903      	bls.n	8004c4a <_svfiprintf_r+0x1a6>
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0c6      	beq.n	8004bd4 <_svfiprintf_r+0x130>
 8004c46:	9105      	str	r1, [sp, #20]
 8004c48:	e7c4      	b.n	8004bd4 <_svfiprintf_r+0x130>
 8004c4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c4e:	4604      	mov	r4, r0
 8004c50:	2301      	movs	r3, #1
 8004c52:	e7f0      	b.n	8004c36 <_svfiprintf_r+0x192>
 8004c54:	ab03      	add	r3, sp, #12
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	462a      	mov	r2, r5
 8004c5a:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <_svfiprintf_r+0x1f4>)
 8004c5c:	a904      	add	r1, sp, #16
 8004c5e:	4638      	mov	r0, r7
 8004c60:	f3af 8000 	nop.w
 8004c64:	1c42      	adds	r2, r0, #1
 8004c66:	4606      	mov	r6, r0
 8004c68:	d1d6      	bne.n	8004c18 <_svfiprintf_r+0x174>
 8004c6a:	89ab      	ldrh	r3, [r5, #12]
 8004c6c:	065b      	lsls	r3, r3, #25
 8004c6e:	f53f af2d 	bmi.w	8004acc <_svfiprintf_r+0x28>
 8004c72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c74:	b01d      	add	sp, #116	; 0x74
 8004c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c7a:	ab03      	add	r3, sp, #12
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	462a      	mov	r2, r5
 8004c80:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <_svfiprintf_r+0x1f4>)
 8004c82:	a904      	add	r1, sp, #16
 8004c84:	4638      	mov	r0, r7
 8004c86:	f000 f919 	bl	8004ebc <_printf_i>
 8004c8a:	e7eb      	b.n	8004c64 <_svfiprintf_r+0x1c0>
 8004c8c:	08005360 	.word	0x08005360
 8004c90:	0800536a 	.word	0x0800536a
 8004c94:	00000000 	.word	0x00000000
 8004c98:	080049f1 	.word	0x080049f1
 8004c9c:	08005366 	.word	0x08005366

08004ca0 <sbrk_aligned>:
 8004ca0:	b570      	push	{r4, r5, r6, lr}
 8004ca2:	4e0e      	ldr	r6, [pc, #56]	; (8004cdc <sbrk_aligned+0x3c>)
 8004ca4:	460c      	mov	r4, r1
 8004ca6:	6831      	ldr	r1, [r6, #0]
 8004ca8:	4605      	mov	r5, r0
 8004caa:	b911      	cbnz	r1, 8004cb2 <sbrk_aligned+0x12>
 8004cac:	f000 fa7e 	bl	80051ac <_sbrk_r>
 8004cb0:	6030      	str	r0, [r6, #0]
 8004cb2:	4621      	mov	r1, r4
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	f000 fa79 	bl	80051ac <_sbrk_r>
 8004cba:	1c43      	adds	r3, r0, #1
 8004cbc:	d00a      	beq.n	8004cd4 <sbrk_aligned+0x34>
 8004cbe:	1cc4      	adds	r4, r0, #3
 8004cc0:	f024 0403 	bic.w	r4, r4, #3
 8004cc4:	42a0      	cmp	r0, r4
 8004cc6:	d007      	beq.n	8004cd8 <sbrk_aligned+0x38>
 8004cc8:	1a21      	subs	r1, r4, r0
 8004cca:	4628      	mov	r0, r5
 8004ccc:	f000 fa6e 	bl	80051ac <_sbrk_r>
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	d101      	bne.n	8004cd8 <sbrk_aligned+0x38>
 8004cd4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004cd8:	4620      	mov	r0, r4
 8004cda:	bd70      	pop	{r4, r5, r6, pc}
 8004cdc:	200041d0 	.word	0x200041d0

08004ce0 <_malloc_r>:
 8004ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ce4:	1ccd      	adds	r5, r1, #3
 8004ce6:	f025 0503 	bic.w	r5, r5, #3
 8004cea:	3508      	adds	r5, #8
 8004cec:	2d0c      	cmp	r5, #12
 8004cee:	bf38      	it	cc
 8004cf0:	250c      	movcc	r5, #12
 8004cf2:	2d00      	cmp	r5, #0
 8004cf4:	4607      	mov	r7, r0
 8004cf6:	db01      	blt.n	8004cfc <_malloc_r+0x1c>
 8004cf8:	42a9      	cmp	r1, r5
 8004cfa:	d905      	bls.n	8004d08 <_malloc_r+0x28>
 8004cfc:	230c      	movs	r3, #12
 8004cfe:	603b      	str	r3, [r7, #0]
 8004d00:	2600      	movs	r6, #0
 8004d02:	4630      	mov	r0, r6
 8004d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004ddc <_malloc_r+0xfc>
 8004d0c:	f000 f9f8 	bl	8005100 <__malloc_lock>
 8004d10:	f8d8 3000 	ldr.w	r3, [r8]
 8004d14:	461c      	mov	r4, r3
 8004d16:	bb5c      	cbnz	r4, 8004d70 <_malloc_r+0x90>
 8004d18:	4629      	mov	r1, r5
 8004d1a:	4638      	mov	r0, r7
 8004d1c:	f7ff ffc0 	bl	8004ca0 <sbrk_aligned>
 8004d20:	1c43      	adds	r3, r0, #1
 8004d22:	4604      	mov	r4, r0
 8004d24:	d155      	bne.n	8004dd2 <_malloc_r+0xf2>
 8004d26:	f8d8 4000 	ldr.w	r4, [r8]
 8004d2a:	4626      	mov	r6, r4
 8004d2c:	2e00      	cmp	r6, #0
 8004d2e:	d145      	bne.n	8004dbc <_malloc_r+0xdc>
 8004d30:	2c00      	cmp	r4, #0
 8004d32:	d048      	beq.n	8004dc6 <_malloc_r+0xe6>
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	4631      	mov	r1, r6
 8004d38:	4638      	mov	r0, r7
 8004d3a:	eb04 0903 	add.w	r9, r4, r3
 8004d3e:	f000 fa35 	bl	80051ac <_sbrk_r>
 8004d42:	4581      	cmp	r9, r0
 8004d44:	d13f      	bne.n	8004dc6 <_malloc_r+0xe6>
 8004d46:	6821      	ldr	r1, [r4, #0]
 8004d48:	1a6d      	subs	r5, r5, r1
 8004d4a:	4629      	mov	r1, r5
 8004d4c:	4638      	mov	r0, r7
 8004d4e:	f7ff ffa7 	bl	8004ca0 <sbrk_aligned>
 8004d52:	3001      	adds	r0, #1
 8004d54:	d037      	beq.n	8004dc6 <_malloc_r+0xe6>
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	442b      	add	r3, r5
 8004d5a:	6023      	str	r3, [r4, #0]
 8004d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d038      	beq.n	8004dd6 <_malloc_r+0xf6>
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	42a2      	cmp	r2, r4
 8004d68:	d12b      	bne.n	8004dc2 <_malloc_r+0xe2>
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	605a      	str	r2, [r3, #4]
 8004d6e:	e00f      	b.n	8004d90 <_malloc_r+0xb0>
 8004d70:	6822      	ldr	r2, [r4, #0]
 8004d72:	1b52      	subs	r2, r2, r5
 8004d74:	d41f      	bmi.n	8004db6 <_malloc_r+0xd6>
 8004d76:	2a0b      	cmp	r2, #11
 8004d78:	d917      	bls.n	8004daa <_malloc_r+0xca>
 8004d7a:	1961      	adds	r1, r4, r5
 8004d7c:	42a3      	cmp	r3, r4
 8004d7e:	6025      	str	r5, [r4, #0]
 8004d80:	bf18      	it	ne
 8004d82:	6059      	strne	r1, [r3, #4]
 8004d84:	6863      	ldr	r3, [r4, #4]
 8004d86:	bf08      	it	eq
 8004d88:	f8c8 1000 	streq.w	r1, [r8]
 8004d8c:	5162      	str	r2, [r4, r5]
 8004d8e:	604b      	str	r3, [r1, #4]
 8004d90:	4638      	mov	r0, r7
 8004d92:	f104 060b 	add.w	r6, r4, #11
 8004d96:	f000 f9b9 	bl	800510c <__malloc_unlock>
 8004d9a:	f026 0607 	bic.w	r6, r6, #7
 8004d9e:	1d23      	adds	r3, r4, #4
 8004da0:	1af2      	subs	r2, r6, r3
 8004da2:	d0ae      	beq.n	8004d02 <_malloc_r+0x22>
 8004da4:	1b9b      	subs	r3, r3, r6
 8004da6:	50a3      	str	r3, [r4, r2]
 8004da8:	e7ab      	b.n	8004d02 <_malloc_r+0x22>
 8004daa:	42a3      	cmp	r3, r4
 8004dac:	6862      	ldr	r2, [r4, #4]
 8004dae:	d1dd      	bne.n	8004d6c <_malloc_r+0x8c>
 8004db0:	f8c8 2000 	str.w	r2, [r8]
 8004db4:	e7ec      	b.n	8004d90 <_malloc_r+0xb0>
 8004db6:	4623      	mov	r3, r4
 8004db8:	6864      	ldr	r4, [r4, #4]
 8004dba:	e7ac      	b.n	8004d16 <_malloc_r+0x36>
 8004dbc:	4634      	mov	r4, r6
 8004dbe:	6876      	ldr	r6, [r6, #4]
 8004dc0:	e7b4      	b.n	8004d2c <_malloc_r+0x4c>
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	e7cc      	b.n	8004d60 <_malloc_r+0x80>
 8004dc6:	230c      	movs	r3, #12
 8004dc8:	603b      	str	r3, [r7, #0]
 8004dca:	4638      	mov	r0, r7
 8004dcc:	f000 f99e 	bl	800510c <__malloc_unlock>
 8004dd0:	e797      	b.n	8004d02 <_malloc_r+0x22>
 8004dd2:	6025      	str	r5, [r4, #0]
 8004dd4:	e7dc      	b.n	8004d90 <_malloc_r+0xb0>
 8004dd6:	605b      	str	r3, [r3, #4]
 8004dd8:	deff      	udf	#255	; 0xff
 8004dda:	bf00      	nop
 8004ddc:	200041cc 	.word	0x200041cc

08004de0 <_printf_common>:
 8004de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004de4:	4616      	mov	r6, r2
 8004de6:	4699      	mov	r9, r3
 8004de8:	688a      	ldr	r2, [r1, #8]
 8004dea:	690b      	ldr	r3, [r1, #16]
 8004dec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004df0:	4293      	cmp	r3, r2
 8004df2:	bfb8      	it	lt
 8004df4:	4613      	movlt	r3, r2
 8004df6:	6033      	str	r3, [r6, #0]
 8004df8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004dfc:	4607      	mov	r7, r0
 8004dfe:	460c      	mov	r4, r1
 8004e00:	b10a      	cbz	r2, 8004e06 <_printf_common+0x26>
 8004e02:	3301      	adds	r3, #1
 8004e04:	6033      	str	r3, [r6, #0]
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	0699      	lsls	r1, r3, #26
 8004e0a:	bf42      	ittt	mi
 8004e0c:	6833      	ldrmi	r3, [r6, #0]
 8004e0e:	3302      	addmi	r3, #2
 8004e10:	6033      	strmi	r3, [r6, #0]
 8004e12:	6825      	ldr	r5, [r4, #0]
 8004e14:	f015 0506 	ands.w	r5, r5, #6
 8004e18:	d106      	bne.n	8004e28 <_printf_common+0x48>
 8004e1a:	f104 0a19 	add.w	sl, r4, #25
 8004e1e:	68e3      	ldr	r3, [r4, #12]
 8004e20:	6832      	ldr	r2, [r6, #0]
 8004e22:	1a9b      	subs	r3, r3, r2
 8004e24:	42ab      	cmp	r3, r5
 8004e26:	dc26      	bgt.n	8004e76 <_printf_common+0x96>
 8004e28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e2c:	1e13      	subs	r3, r2, #0
 8004e2e:	6822      	ldr	r2, [r4, #0]
 8004e30:	bf18      	it	ne
 8004e32:	2301      	movne	r3, #1
 8004e34:	0692      	lsls	r2, r2, #26
 8004e36:	d42b      	bmi.n	8004e90 <_printf_common+0xb0>
 8004e38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e3c:	4649      	mov	r1, r9
 8004e3e:	4638      	mov	r0, r7
 8004e40:	47c0      	blx	r8
 8004e42:	3001      	adds	r0, #1
 8004e44:	d01e      	beq.n	8004e84 <_printf_common+0xa4>
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	6922      	ldr	r2, [r4, #16]
 8004e4a:	f003 0306 	and.w	r3, r3, #6
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	bf02      	ittt	eq
 8004e52:	68e5      	ldreq	r5, [r4, #12]
 8004e54:	6833      	ldreq	r3, [r6, #0]
 8004e56:	1aed      	subeq	r5, r5, r3
 8004e58:	68a3      	ldr	r3, [r4, #8]
 8004e5a:	bf0c      	ite	eq
 8004e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e60:	2500      	movne	r5, #0
 8004e62:	4293      	cmp	r3, r2
 8004e64:	bfc4      	itt	gt
 8004e66:	1a9b      	subgt	r3, r3, r2
 8004e68:	18ed      	addgt	r5, r5, r3
 8004e6a:	2600      	movs	r6, #0
 8004e6c:	341a      	adds	r4, #26
 8004e6e:	42b5      	cmp	r5, r6
 8004e70:	d11a      	bne.n	8004ea8 <_printf_common+0xc8>
 8004e72:	2000      	movs	r0, #0
 8004e74:	e008      	b.n	8004e88 <_printf_common+0xa8>
 8004e76:	2301      	movs	r3, #1
 8004e78:	4652      	mov	r2, sl
 8004e7a:	4649      	mov	r1, r9
 8004e7c:	4638      	mov	r0, r7
 8004e7e:	47c0      	blx	r8
 8004e80:	3001      	adds	r0, #1
 8004e82:	d103      	bne.n	8004e8c <_printf_common+0xac>
 8004e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e8c:	3501      	adds	r5, #1
 8004e8e:	e7c6      	b.n	8004e1e <_printf_common+0x3e>
 8004e90:	18e1      	adds	r1, r4, r3
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	2030      	movs	r0, #48	; 0x30
 8004e96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e9a:	4422      	add	r2, r4
 8004e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ea0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ea4:	3302      	adds	r3, #2
 8004ea6:	e7c7      	b.n	8004e38 <_printf_common+0x58>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	4622      	mov	r2, r4
 8004eac:	4649      	mov	r1, r9
 8004eae:	4638      	mov	r0, r7
 8004eb0:	47c0      	blx	r8
 8004eb2:	3001      	adds	r0, #1
 8004eb4:	d0e6      	beq.n	8004e84 <_printf_common+0xa4>
 8004eb6:	3601      	adds	r6, #1
 8004eb8:	e7d9      	b.n	8004e6e <_printf_common+0x8e>
	...

08004ebc <_printf_i>:
 8004ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec0:	7e0f      	ldrb	r7, [r1, #24]
 8004ec2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ec4:	2f78      	cmp	r7, #120	; 0x78
 8004ec6:	4691      	mov	r9, r2
 8004ec8:	4680      	mov	r8, r0
 8004eca:	460c      	mov	r4, r1
 8004ecc:	469a      	mov	sl, r3
 8004ece:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ed2:	d807      	bhi.n	8004ee4 <_printf_i+0x28>
 8004ed4:	2f62      	cmp	r7, #98	; 0x62
 8004ed6:	d80a      	bhi.n	8004eee <_printf_i+0x32>
 8004ed8:	2f00      	cmp	r7, #0
 8004eda:	f000 80d4 	beq.w	8005086 <_printf_i+0x1ca>
 8004ede:	2f58      	cmp	r7, #88	; 0x58
 8004ee0:	f000 80c0 	beq.w	8005064 <_printf_i+0x1a8>
 8004ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004eec:	e03a      	b.n	8004f64 <_printf_i+0xa8>
 8004eee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ef2:	2b15      	cmp	r3, #21
 8004ef4:	d8f6      	bhi.n	8004ee4 <_printf_i+0x28>
 8004ef6:	a101      	add	r1, pc, #4	; (adr r1, 8004efc <_printf_i+0x40>)
 8004ef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004efc:	08004f55 	.word	0x08004f55
 8004f00:	08004f69 	.word	0x08004f69
 8004f04:	08004ee5 	.word	0x08004ee5
 8004f08:	08004ee5 	.word	0x08004ee5
 8004f0c:	08004ee5 	.word	0x08004ee5
 8004f10:	08004ee5 	.word	0x08004ee5
 8004f14:	08004f69 	.word	0x08004f69
 8004f18:	08004ee5 	.word	0x08004ee5
 8004f1c:	08004ee5 	.word	0x08004ee5
 8004f20:	08004ee5 	.word	0x08004ee5
 8004f24:	08004ee5 	.word	0x08004ee5
 8004f28:	0800506d 	.word	0x0800506d
 8004f2c:	08004f95 	.word	0x08004f95
 8004f30:	08005027 	.word	0x08005027
 8004f34:	08004ee5 	.word	0x08004ee5
 8004f38:	08004ee5 	.word	0x08004ee5
 8004f3c:	0800508f 	.word	0x0800508f
 8004f40:	08004ee5 	.word	0x08004ee5
 8004f44:	08004f95 	.word	0x08004f95
 8004f48:	08004ee5 	.word	0x08004ee5
 8004f4c:	08004ee5 	.word	0x08004ee5
 8004f50:	0800502f 	.word	0x0800502f
 8004f54:	682b      	ldr	r3, [r5, #0]
 8004f56:	1d1a      	adds	r2, r3, #4
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	602a      	str	r2, [r5, #0]
 8004f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f64:	2301      	movs	r3, #1
 8004f66:	e09f      	b.n	80050a8 <_printf_i+0x1ec>
 8004f68:	6820      	ldr	r0, [r4, #0]
 8004f6a:	682b      	ldr	r3, [r5, #0]
 8004f6c:	0607      	lsls	r7, r0, #24
 8004f6e:	f103 0104 	add.w	r1, r3, #4
 8004f72:	6029      	str	r1, [r5, #0]
 8004f74:	d501      	bpl.n	8004f7a <_printf_i+0xbe>
 8004f76:	681e      	ldr	r6, [r3, #0]
 8004f78:	e003      	b.n	8004f82 <_printf_i+0xc6>
 8004f7a:	0646      	lsls	r6, r0, #25
 8004f7c:	d5fb      	bpl.n	8004f76 <_printf_i+0xba>
 8004f7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004f82:	2e00      	cmp	r6, #0
 8004f84:	da03      	bge.n	8004f8e <_printf_i+0xd2>
 8004f86:	232d      	movs	r3, #45	; 0x2d
 8004f88:	4276      	negs	r6, r6
 8004f8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f8e:	485a      	ldr	r0, [pc, #360]	; (80050f8 <_printf_i+0x23c>)
 8004f90:	230a      	movs	r3, #10
 8004f92:	e012      	b.n	8004fba <_printf_i+0xfe>
 8004f94:	682b      	ldr	r3, [r5, #0]
 8004f96:	6820      	ldr	r0, [r4, #0]
 8004f98:	1d19      	adds	r1, r3, #4
 8004f9a:	6029      	str	r1, [r5, #0]
 8004f9c:	0605      	lsls	r5, r0, #24
 8004f9e:	d501      	bpl.n	8004fa4 <_printf_i+0xe8>
 8004fa0:	681e      	ldr	r6, [r3, #0]
 8004fa2:	e002      	b.n	8004faa <_printf_i+0xee>
 8004fa4:	0641      	lsls	r1, r0, #25
 8004fa6:	d5fb      	bpl.n	8004fa0 <_printf_i+0xe4>
 8004fa8:	881e      	ldrh	r6, [r3, #0]
 8004faa:	4853      	ldr	r0, [pc, #332]	; (80050f8 <_printf_i+0x23c>)
 8004fac:	2f6f      	cmp	r7, #111	; 0x6f
 8004fae:	bf0c      	ite	eq
 8004fb0:	2308      	moveq	r3, #8
 8004fb2:	230a      	movne	r3, #10
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fba:	6865      	ldr	r5, [r4, #4]
 8004fbc:	60a5      	str	r5, [r4, #8]
 8004fbe:	2d00      	cmp	r5, #0
 8004fc0:	bfa2      	ittt	ge
 8004fc2:	6821      	ldrge	r1, [r4, #0]
 8004fc4:	f021 0104 	bicge.w	r1, r1, #4
 8004fc8:	6021      	strge	r1, [r4, #0]
 8004fca:	b90e      	cbnz	r6, 8004fd0 <_printf_i+0x114>
 8004fcc:	2d00      	cmp	r5, #0
 8004fce:	d04b      	beq.n	8005068 <_printf_i+0x1ac>
 8004fd0:	4615      	mov	r5, r2
 8004fd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004fd6:	fb03 6711 	mls	r7, r3, r1, r6
 8004fda:	5dc7      	ldrb	r7, [r0, r7]
 8004fdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004fe0:	4637      	mov	r7, r6
 8004fe2:	42bb      	cmp	r3, r7
 8004fe4:	460e      	mov	r6, r1
 8004fe6:	d9f4      	bls.n	8004fd2 <_printf_i+0x116>
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	d10b      	bne.n	8005004 <_printf_i+0x148>
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	07de      	lsls	r6, r3, #31
 8004ff0:	d508      	bpl.n	8005004 <_printf_i+0x148>
 8004ff2:	6923      	ldr	r3, [r4, #16]
 8004ff4:	6861      	ldr	r1, [r4, #4]
 8004ff6:	4299      	cmp	r1, r3
 8004ff8:	bfde      	ittt	le
 8004ffa:	2330      	movle	r3, #48	; 0x30
 8004ffc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005000:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005004:	1b52      	subs	r2, r2, r5
 8005006:	6122      	str	r2, [r4, #16]
 8005008:	f8cd a000 	str.w	sl, [sp]
 800500c:	464b      	mov	r3, r9
 800500e:	aa03      	add	r2, sp, #12
 8005010:	4621      	mov	r1, r4
 8005012:	4640      	mov	r0, r8
 8005014:	f7ff fee4 	bl	8004de0 <_printf_common>
 8005018:	3001      	adds	r0, #1
 800501a:	d14a      	bne.n	80050b2 <_printf_i+0x1f6>
 800501c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005020:	b004      	add	sp, #16
 8005022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	f043 0320 	orr.w	r3, r3, #32
 800502c:	6023      	str	r3, [r4, #0]
 800502e:	4833      	ldr	r0, [pc, #204]	; (80050fc <_printf_i+0x240>)
 8005030:	2778      	movs	r7, #120	; 0x78
 8005032:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	6829      	ldr	r1, [r5, #0]
 800503a:	061f      	lsls	r7, r3, #24
 800503c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005040:	d402      	bmi.n	8005048 <_printf_i+0x18c>
 8005042:	065f      	lsls	r7, r3, #25
 8005044:	bf48      	it	mi
 8005046:	b2b6      	uxthmi	r6, r6
 8005048:	07df      	lsls	r7, r3, #31
 800504a:	bf48      	it	mi
 800504c:	f043 0320 	orrmi.w	r3, r3, #32
 8005050:	6029      	str	r1, [r5, #0]
 8005052:	bf48      	it	mi
 8005054:	6023      	strmi	r3, [r4, #0]
 8005056:	b91e      	cbnz	r6, 8005060 <_printf_i+0x1a4>
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	f023 0320 	bic.w	r3, r3, #32
 800505e:	6023      	str	r3, [r4, #0]
 8005060:	2310      	movs	r3, #16
 8005062:	e7a7      	b.n	8004fb4 <_printf_i+0xf8>
 8005064:	4824      	ldr	r0, [pc, #144]	; (80050f8 <_printf_i+0x23c>)
 8005066:	e7e4      	b.n	8005032 <_printf_i+0x176>
 8005068:	4615      	mov	r5, r2
 800506a:	e7bd      	b.n	8004fe8 <_printf_i+0x12c>
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	6826      	ldr	r6, [r4, #0]
 8005070:	6961      	ldr	r1, [r4, #20]
 8005072:	1d18      	adds	r0, r3, #4
 8005074:	6028      	str	r0, [r5, #0]
 8005076:	0635      	lsls	r5, r6, #24
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	d501      	bpl.n	8005080 <_printf_i+0x1c4>
 800507c:	6019      	str	r1, [r3, #0]
 800507e:	e002      	b.n	8005086 <_printf_i+0x1ca>
 8005080:	0670      	lsls	r0, r6, #25
 8005082:	d5fb      	bpl.n	800507c <_printf_i+0x1c0>
 8005084:	8019      	strh	r1, [r3, #0]
 8005086:	2300      	movs	r3, #0
 8005088:	6123      	str	r3, [r4, #16]
 800508a:	4615      	mov	r5, r2
 800508c:	e7bc      	b.n	8005008 <_printf_i+0x14c>
 800508e:	682b      	ldr	r3, [r5, #0]
 8005090:	1d1a      	adds	r2, r3, #4
 8005092:	602a      	str	r2, [r5, #0]
 8005094:	681d      	ldr	r5, [r3, #0]
 8005096:	6862      	ldr	r2, [r4, #4]
 8005098:	2100      	movs	r1, #0
 800509a:	4628      	mov	r0, r5
 800509c:	f7fb f8a0 	bl	80001e0 <memchr>
 80050a0:	b108      	cbz	r0, 80050a6 <_printf_i+0x1ea>
 80050a2:	1b40      	subs	r0, r0, r5
 80050a4:	6060      	str	r0, [r4, #4]
 80050a6:	6863      	ldr	r3, [r4, #4]
 80050a8:	6123      	str	r3, [r4, #16]
 80050aa:	2300      	movs	r3, #0
 80050ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050b0:	e7aa      	b.n	8005008 <_printf_i+0x14c>
 80050b2:	6923      	ldr	r3, [r4, #16]
 80050b4:	462a      	mov	r2, r5
 80050b6:	4649      	mov	r1, r9
 80050b8:	4640      	mov	r0, r8
 80050ba:	47d0      	blx	sl
 80050bc:	3001      	adds	r0, #1
 80050be:	d0ad      	beq.n	800501c <_printf_i+0x160>
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	079b      	lsls	r3, r3, #30
 80050c4:	d413      	bmi.n	80050ee <_printf_i+0x232>
 80050c6:	68e0      	ldr	r0, [r4, #12]
 80050c8:	9b03      	ldr	r3, [sp, #12]
 80050ca:	4298      	cmp	r0, r3
 80050cc:	bfb8      	it	lt
 80050ce:	4618      	movlt	r0, r3
 80050d0:	e7a6      	b.n	8005020 <_printf_i+0x164>
 80050d2:	2301      	movs	r3, #1
 80050d4:	4632      	mov	r2, r6
 80050d6:	4649      	mov	r1, r9
 80050d8:	4640      	mov	r0, r8
 80050da:	47d0      	blx	sl
 80050dc:	3001      	adds	r0, #1
 80050de:	d09d      	beq.n	800501c <_printf_i+0x160>
 80050e0:	3501      	adds	r5, #1
 80050e2:	68e3      	ldr	r3, [r4, #12]
 80050e4:	9903      	ldr	r1, [sp, #12]
 80050e6:	1a5b      	subs	r3, r3, r1
 80050e8:	42ab      	cmp	r3, r5
 80050ea:	dcf2      	bgt.n	80050d2 <_printf_i+0x216>
 80050ec:	e7eb      	b.n	80050c6 <_printf_i+0x20a>
 80050ee:	2500      	movs	r5, #0
 80050f0:	f104 0619 	add.w	r6, r4, #25
 80050f4:	e7f5      	b.n	80050e2 <_printf_i+0x226>
 80050f6:	bf00      	nop
 80050f8:	08005371 	.word	0x08005371
 80050fc:	08005382 	.word	0x08005382

08005100 <__malloc_lock>:
 8005100:	4801      	ldr	r0, [pc, #4]	; (8005108 <__malloc_lock+0x8>)
 8005102:	f7ff bc65 	b.w	80049d0 <__retarget_lock_acquire_recursive>
 8005106:	bf00      	nop
 8005108:	200041c8 	.word	0x200041c8

0800510c <__malloc_unlock>:
 800510c:	4801      	ldr	r0, [pc, #4]	; (8005114 <__malloc_unlock+0x8>)
 800510e:	f7ff bc60 	b.w	80049d2 <__retarget_lock_release_recursive>
 8005112:	bf00      	nop
 8005114:	200041c8 	.word	0x200041c8

08005118 <_realloc_r>:
 8005118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800511c:	4680      	mov	r8, r0
 800511e:	4614      	mov	r4, r2
 8005120:	460e      	mov	r6, r1
 8005122:	b921      	cbnz	r1, 800512e <_realloc_r+0x16>
 8005124:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005128:	4611      	mov	r1, r2
 800512a:	f7ff bdd9 	b.w	8004ce0 <_malloc_r>
 800512e:	b92a      	cbnz	r2, 800513c <_realloc_r+0x24>
 8005130:	f000 f84c 	bl	80051cc <_free_r>
 8005134:	4625      	mov	r5, r4
 8005136:	4628      	mov	r0, r5
 8005138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800513c:	f000 f892 	bl	8005264 <_malloc_usable_size_r>
 8005140:	4284      	cmp	r4, r0
 8005142:	4607      	mov	r7, r0
 8005144:	d802      	bhi.n	800514c <_realloc_r+0x34>
 8005146:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800514a:	d812      	bhi.n	8005172 <_realloc_r+0x5a>
 800514c:	4621      	mov	r1, r4
 800514e:	4640      	mov	r0, r8
 8005150:	f7ff fdc6 	bl	8004ce0 <_malloc_r>
 8005154:	4605      	mov	r5, r0
 8005156:	2800      	cmp	r0, #0
 8005158:	d0ed      	beq.n	8005136 <_realloc_r+0x1e>
 800515a:	42bc      	cmp	r4, r7
 800515c:	4622      	mov	r2, r4
 800515e:	4631      	mov	r1, r6
 8005160:	bf28      	it	cs
 8005162:	463a      	movcs	r2, r7
 8005164:	f7ff fc36 	bl	80049d4 <memcpy>
 8005168:	4631      	mov	r1, r6
 800516a:	4640      	mov	r0, r8
 800516c:	f000 f82e 	bl	80051cc <_free_r>
 8005170:	e7e1      	b.n	8005136 <_realloc_r+0x1e>
 8005172:	4635      	mov	r5, r6
 8005174:	e7df      	b.n	8005136 <_realloc_r+0x1e>

08005176 <memmove>:
 8005176:	4288      	cmp	r0, r1
 8005178:	b510      	push	{r4, lr}
 800517a:	eb01 0402 	add.w	r4, r1, r2
 800517e:	d902      	bls.n	8005186 <memmove+0x10>
 8005180:	4284      	cmp	r4, r0
 8005182:	4623      	mov	r3, r4
 8005184:	d807      	bhi.n	8005196 <memmove+0x20>
 8005186:	1e43      	subs	r3, r0, #1
 8005188:	42a1      	cmp	r1, r4
 800518a:	d008      	beq.n	800519e <memmove+0x28>
 800518c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005190:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005194:	e7f8      	b.n	8005188 <memmove+0x12>
 8005196:	4402      	add	r2, r0
 8005198:	4601      	mov	r1, r0
 800519a:	428a      	cmp	r2, r1
 800519c:	d100      	bne.n	80051a0 <memmove+0x2a>
 800519e:	bd10      	pop	{r4, pc}
 80051a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051a4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051a8:	e7f7      	b.n	800519a <memmove+0x24>
	...

080051ac <_sbrk_r>:
 80051ac:	b538      	push	{r3, r4, r5, lr}
 80051ae:	4d06      	ldr	r5, [pc, #24]	; (80051c8 <_sbrk_r+0x1c>)
 80051b0:	2300      	movs	r3, #0
 80051b2:	4604      	mov	r4, r0
 80051b4:	4608      	mov	r0, r1
 80051b6:	602b      	str	r3, [r5, #0]
 80051b8:	f7fb fca6 	bl	8000b08 <_sbrk>
 80051bc:	1c43      	adds	r3, r0, #1
 80051be:	d102      	bne.n	80051c6 <_sbrk_r+0x1a>
 80051c0:	682b      	ldr	r3, [r5, #0]
 80051c2:	b103      	cbz	r3, 80051c6 <_sbrk_r+0x1a>
 80051c4:	6023      	str	r3, [r4, #0]
 80051c6:	bd38      	pop	{r3, r4, r5, pc}
 80051c8:	200041d4 	.word	0x200041d4

080051cc <_free_r>:
 80051cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051ce:	2900      	cmp	r1, #0
 80051d0:	d044      	beq.n	800525c <_free_r+0x90>
 80051d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051d6:	9001      	str	r0, [sp, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f1a1 0404 	sub.w	r4, r1, #4
 80051de:	bfb8      	it	lt
 80051e0:	18e4      	addlt	r4, r4, r3
 80051e2:	f7ff ff8d 	bl	8005100 <__malloc_lock>
 80051e6:	4a1e      	ldr	r2, [pc, #120]	; (8005260 <_free_r+0x94>)
 80051e8:	9801      	ldr	r0, [sp, #4]
 80051ea:	6813      	ldr	r3, [r2, #0]
 80051ec:	b933      	cbnz	r3, 80051fc <_free_r+0x30>
 80051ee:	6063      	str	r3, [r4, #4]
 80051f0:	6014      	str	r4, [r2, #0]
 80051f2:	b003      	add	sp, #12
 80051f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051f8:	f7ff bf88 	b.w	800510c <__malloc_unlock>
 80051fc:	42a3      	cmp	r3, r4
 80051fe:	d908      	bls.n	8005212 <_free_r+0x46>
 8005200:	6825      	ldr	r5, [r4, #0]
 8005202:	1961      	adds	r1, r4, r5
 8005204:	428b      	cmp	r3, r1
 8005206:	bf01      	itttt	eq
 8005208:	6819      	ldreq	r1, [r3, #0]
 800520a:	685b      	ldreq	r3, [r3, #4]
 800520c:	1949      	addeq	r1, r1, r5
 800520e:	6021      	streq	r1, [r4, #0]
 8005210:	e7ed      	b.n	80051ee <_free_r+0x22>
 8005212:	461a      	mov	r2, r3
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	b10b      	cbz	r3, 800521c <_free_r+0x50>
 8005218:	42a3      	cmp	r3, r4
 800521a:	d9fa      	bls.n	8005212 <_free_r+0x46>
 800521c:	6811      	ldr	r1, [r2, #0]
 800521e:	1855      	adds	r5, r2, r1
 8005220:	42a5      	cmp	r5, r4
 8005222:	d10b      	bne.n	800523c <_free_r+0x70>
 8005224:	6824      	ldr	r4, [r4, #0]
 8005226:	4421      	add	r1, r4
 8005228:	1854      	adds	r4, r2, r1
 800522a:	42a3      	cmp	r3, r4
 800522c:	6011      	str	r1, [r2, #0]
 800522e:	d1e0      	bne.n	80051f2 <_free_r+0x26>
 8005230:	681c      	ldr	r4, [r3, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	6053      	str	r3, [r2, #4]
 8005236:	440c      	add	r4, r1
 8005238:	6014      	str	r4, [r2, #0]
 800523a:	e7da      	b.n	80051f2 <_free_r+0x26>
 800523c:	d902      	bls.n	8005244 <_free_r+0x78>
 800523e:	230c      	movs	r3, #12
 8005240:	6003      	str	r3, [r0, #0]
 8005242:	e7d6      	b.n	80051f2 <_free_r+0x26>
 8005244:	6825      	ldr	r5, [r4, #0]
 8005246:	1961      	adds	r1, r4, r5
 8005248:	428b      	cmp	r3, r1
 800524a:	bf04      	itt	eq
 800524c:	6819      	ldreq	r1, [r3, #0]
 800524e:	685b      	ldreq	r3, [r3, #4]
 8005250:	6063      	str	r3, [r4, #4]
 8005252:	bf04      	itt	eq
 8005254:	1949      	addeq	r1, r1, r5
 8005256:	6021      	streq	r1, [r4, #0]
 8005258:	6054      	str	r4, [r2, #4]
 800525a:	e7ca      	b.n	80051f2 <_free_r+0x26>
 800525c:	b003      	add	sp, #12
 800525e:	bd30      	pop	{r4, r5, pc}
 8005260:	200041cc 	.word	0x200041cc

08005264 <_malloc_usable_size_r>:
 8005264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005268:	1f18      	subs	r0, r3, #4
 800526a:	2b00      	cmp	r3, #0
 800526c:	bfbc      	itt	lt
 800526e:	580b      	ldrlt	r3, [r1, r0]
 8005270:	18c0      	addlt	r0, r0, r3
 8005272:	4770      	bx	lr

08005274 <_init>:
 8005274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005276:	bf00      	nop
 8005278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527a:	bc08      	pop	{r3}
 800527c:	469e      	mov	lr, r3
 800527e:	4770      	bx	lr

08005280 <_fini>:
 8005280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005282:	bf00      	nop
 8005284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005286:	bc08      	pop	{r3}
 8005288:	469e      	mov	lr, r3
 800528a:	4770      	bx	lr
