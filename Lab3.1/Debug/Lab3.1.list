
Lab3.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000479c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800493c  0800493c  0001493c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049bc  080049bc  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  080049bc  080049bc  000149bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049c4  080049c4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049c4  080049c4  000149c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049c8  080049c8  000149c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080049cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000064  08004a30  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08004a30  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d1a6  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cfd  00000000  00000000  0002d27d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  0002ef80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009bc  00000000  00000000  0002fbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001660b  00000000  00000000  000305a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dd03  00000000  00000000  00046baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e4ad  00000000  00000000  000548b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003978  00000000  00000000  000e2d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e66d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004924 	.word	0x08004924

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08004924 	.word	0x08004924

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <HAL_GPIO_EXTI_Callback>:
static void MX_TIM4_Init(void);
static void MX_TIM5_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
uint16_t delay = 200;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	80fb      	strh	r3, [r7, #6]
//	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	HAL_Delay(100);
 8000596:	2064      	movs	r0, #100	; 0x64
 8000598:	f000 fd26 	bl	8000fe8 <HAL_Delay>
	if(delay == 200) {
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <HAL_GPIO_EXTI_Callback+0x4c>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	2bc8      	cmp	r3, #200	; 0xc8
 80005a2:	d104      	bne.n	80005ae <HAL_GPIO_EXTI_Callback+0x22>
		delay = 1000;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80005a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005aa:	801a      	strh	r2, [r3, #0]
 80005ac:	e00c      	b.n	80005c8 <HAL_GPIO_EXTI_Callback+0x3c>
	} else if(delay == 1000) {
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005b6:	d104      	bne.n	80005c2 <HAL_GPIO_EXTI_Callback+0x36>
		delay = 5000;
 80005b8:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80005ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80005be:	801a      	strh	r2, [r3, #0]
 80005c0:	e002      	b.n	80005c8 <HAL_GPIO_EXTI_Callback+0x3c>
	} else {
		delay = 200;
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80005c4:	22c8      	movs	r2, #200	; 0xc8
 80005c6:	801a      	strh	r2, [r3, #0]
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <HAL_GPIO_EXTI_Callback+0x50>)
 80005ca:	88fb      	ldrh	r3, [r7, #6]
 80005cc:	6153      	str	r3, [r2, #20]
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000000 	.word	0x20000000
 80005dc:	40013c00 	.word	0x40013c00

080005e0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */
int internalLEDCount = 0;
int externalLEDCount = 0;
int currentColor = 30;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	6078      	str	r0, [r7, #4]
	if(htim == &htim3) {
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4a29      	ldr	r2, [pc, #164]	; (8000690 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d109      	bne.n	8000604 <HAL_TIM_PeriodElapsedCallback+0x24>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005f0:	2120      	movs	r1, #32
 80005f2:	4828      	ldr	r0, [pc, #160]	; (8000694 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80005f4:	f001 f85d 	bl	80016b2 <HAL_GPIO_TogglePin>
		internalLEDCount += 1;
 80005f8:	4b27      	ldr	r3, [pc, #156]	; (8000698 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	3301      	adds	r3, #1
 80005fe:	4a26      	ldr	r2, [pc, #152]	; (8000698 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000600:	6013      	str	r3, [r2, #0]
		currentColor++;
		if (currentColor > 37) {
			currentColor = 30;
		}
	}
}
 8000602:	e041      	b.n	8000688 <HAL_TIM_PeriodElapsedCallback+0xa8>
	} else if(htim == &htim4) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a25      	ldr	r2, [pc, #148]	; (800069c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d105      	bne.n	8000618 <HAL_TIM_PeriodElapsedCallback+0x38>
		externalLEDCount += 1;
 800060c:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	4a23      	ldr	r2, [pc, #140]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000614:	6013      	str	r3, [r2, #0]
}
 8000616:	e037      	b.n	8000688 <HAL_TIM_PeriodElapsedCallback+0xa8>
	} else if(htim == &htim5) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a22      	ldr	r2, [pc, #136]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d133      	bne.n	8000688 <HAL_TIM_PeriodElapsedCallback+0xa8>
		int currentTime = HAL_GetTick();
 8000620:	f000 fcd6 	bl	8000fd0 <HAL_GetTick>
 8000624:	4603      	mov	r3, r0
 8000626:	60fb      	str	r3, [r7, #12]
		char *message = (char*) malloc(sizeof(char) * 100);
 8000628:	2064      	movs	r0, #100	; 0x64
 800062a:	f003 fcc7 	bl	8003fbc <malloc>
 800062e:	4603      	mov	r3, r0
 8000630:	60bb      	str	r3, [r7, #8]
		sprintf(message, "\e[0;%dmTime: %d, internal= %d, external= %d\e[0m\r\n",
 8000632:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000634:	6819      	ldr	r1, [r3, #0]
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	0fda      	lsrs	r2, r3, #31
 800063c:	4413      	add	r3, r2
 800063e:	105b      	asrs	r3, r3, #1
 8000640:	461a      	mov	r2, r3
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	9200      	str	r2, [sp, #0]
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	460a      	mov	r2, r1
 800064e:	4917      	ldr	r1, [pc, #92]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000650:	68b8      	ldr	r0, [r7, #8]
 8000652:	f003 fd6f 	bl	8004134 <siprintf>
		HAL_UART_Transmit(&huart2, message, strlen(message), 100);
 8000656:	68b8      	ldr	r0, [r7, #8]
 8000658:	f7ff fdc2 	bl	80001e0 <strlen>
 800065c:	4603      	mov	r3, r0
 800065e:	b29a      	uxth	r2, r3
 8000660:	2364      	movs	r3, #100	; 0x64
 8000662:	68b9      	ldr	r1, [r7, #8]
 8000664:	4812      	ldr	r0, [pc, #72]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8000666:	f002 fcf7 	bl	8003058 <HAL_UART_Transmit>
		free(message);
 800066a:	68b8      	ldr	r0, [r7, #8]
 800066c:	f003 fcae 	bl	8003fcc <free>
		currentColor++;
 8000670:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3301      	adds	r3, #1
 8000676:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000678:	6013      	str	r3, [r2, #0]
		if (currentColor > 37) {
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b25      	cmp	r3, #37	; 0x25
 8000680:	dd02      	ble.n	8000688 <HAL_TIM_PeriodElapsedCallback+0xa8>
			currentColor = 30;
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000684:	221e      	movs	r2, #30
 8000686:	601a      	str	r2, [r3, #0]
}
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000080 	.word	0x20000080
 8000694:	40020000 	.word	0x40020000
 8000698:	200001a0 	.word	0x200001a0
 800069c:	200000c8 	.word	0x200000c8
 80006a0:	200001a4 	.word	0x200001a4
 80006a4:	20000110 	.word	0x20000110
 80006a8:	20000004 	.word	0x20000004
 80006ac:	0800493c 	.word	0x0800493c
 80006b0:	20000158 	.word	0x20000158

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 fc24 	bl	8000f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f81e 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f000 f9c2 	bl	8000a48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006c4:	f000 f996 	bl	80009f4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80006c8:	f000 f8f8 	bl	80008bc <MX_TIM4_Init>
  MX_TIM5_Init();
 80006cc:	f000 f944 	bl	8000958 <MX_TIM5_Init>
  MX_TIM3_Init();
 80006d0:	f000 f87c 	bl	80007cc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80006d4:	2100      	movs	r1, #0
 80006d6:	4806      	ldr	r0, [pc, #24]	; (80006f0 <main+0x3c>)
 80006d8:	f001 fdc2 	bl	8002260 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <main+0x3c>)
 80006de:	f001 fd03 	bl	80020e8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80006e2:	4804      	ldr	r0, [pc, #16]	; (80006f4 <main+0x40>)
 80006e4:	f001 fd00 	bl	80020e8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80006e8:	4803      	ldr	r0, [pc, #12]	; (80006f8 <main+0x44>)
 80006ea:	f001 fcfd 	bl	80020e8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <main+0x3a>
 80006f0:	20000080 	.word	0x20000080
 80006f4:	200000c8 	.word	0x200000c8
 80006f8:	20000110 	.word	0x20000110

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	2230      	movs	r2, #48	; 0x30
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f003 fd32 	bl	8004174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <SystemClock_Config+0xc8>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a26      	ldr	r2, [pc, #152]	; (80007c4 <SystemClock_Config+0xc8>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
 8000730:	4b24      	ldr	r3, [pc, #144]	; (80007c4 <SystemClock_Config+0xc8>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <SystemClock_Config+0xcc>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a20      	ldr	r2, [pc, #128]	; (80007c8 <SystemClock_Config+0xcc>)
 8000746:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <SystemClock_Config+0xcc>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000758:	2302      	movs	r3, #2
 800075a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075c:	2301      	movs	r3, #1
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000760:	2310      	movs	r3, #16
 8000762:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000764:	2302      	movs	r3, #2
 8000766:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000768:	2300      	movs	r3, #0
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800076c:	2308      	movs	r3, #8
 800076e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000770:	2364      	movs	r3, #100	; 0x64
 8000772:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000774:	2302      	movs	r3, #2
 8000776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000778:	2304      	movs	r3, #4
 800077a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	4618      	mov	r0, r3
 8000782:	f000 ffc9 	bl	8001718 <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800078c:	f000 f9d2 	bl	8000b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000790:	230f      	movs	r3, #15
 8000792:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000794:	2302      	movs	r3, #2
 8000796:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800079c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	2103      	movs	r1, #3
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 fa2b 	bl	8001c08 <HAL_RCC_ClockConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007b8:	f000 f9bc 	bl	8000b34 <Error_Handler>
  }
}
 80007bc:	bf00      	nop
 80007be:	3750      	adds	r7, #80	; 0x50
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40007000 	.word	0x40007000

080007cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08e      	sub	sp, #56	; 0x38
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e0:	f107 0320 	add.w	r3, r7, #32
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
 80007f8:	615a      	str	r2, [r3, #20]
 80007fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007fc:	4b2d      	ldr	r3, [pc, #180]	; (80008b4 <MX_TIM3_Init+0xe8>)
 80007fe:	4a2e      	ldr	r2, [pc, #184]	; (80008b8 <MX_TIM3_Init+0xec>)
 8000800:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 49999;
 8000802:	4b2c      	ldr	r3, [pc, #176]	; (80008b4 <MX_TIM3_Init+0xe8>)
 8000804:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000808:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b2a      	ldr	r3, [pc, #168]	; (80008b4 <MX_TIM3_Init+0xe8>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000810:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <MX_TIM3_Init+0xe8>)
 8000812:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000816:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000818:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <MX_TIM3_Init+0xe8>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800081e:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <MX_TIM3_Init+0xe8>)
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000824:	4823      	ldr	r0, [pc, #140]	; (80008b4 <MX_TIM3_Init+0xe8>)
 8000826:	f001 fc0f 	bl	8002048 <HAL_TIM_Base_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000830:	f000 f980 	bl	8000b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800083a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800083e:	4619      	mov	r1, r3
 8000840:	481c      	ldr	r0, [pc, #112]	; (80008b4 <MX_TIM3_Init+0xe8>)
 8000842:	f001 ff6f 	bl	8002724 <HAL_TIM_ConfigClockSource>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800084c:	f000 f972 	bl	8000b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000850:	4818      	ldr	r0, [pc, #96]	; (80008b4 <MX_TIM3_Init+0xe8>)
 8000852:	f001 fcab 	bl	80021ac <HAL_TIM_PWM_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800085c:	f000 f96a 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000868:	f107 0320 	add.w	r3, r7, #32
 800086c:	4619      	mov	r1, r3
 800086e:	4811      	ldr	r0, [pc, #68]	; (80008b4 <MX_TIM3_Init+0xe8>)
 8000870:	f002 fb20 	bl	8002eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800087a:	f000 f95b 	bl	8000b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800087e:	2360      	movs	r3, #96	; 0x60
 8000880:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000882:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000886:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	4619      	mov	r1, r3
 8000896:	4807      	ldr	r0, [pc, #28]	; (80008b4 <MX_TIM3_Init+0xe8>)
 8000898:	f001 fe82 	bl	80025a0 <HAL_TIM_PWM_ConfigChannel>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80008a2:	f000 f947 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008a6:	4803      	ldr	r0, [pc, #12]	; (80008b4 <MX_TIM3_Init+0xe8>)
 80008a8:	f000 f9d6 	bl	8000c58 <HAL_TIM_MspPostInit>

}
 80008ac:	bf00      	nop
 80008ae:	3738      	adds	r7, #56	; 0x38
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000080 	.word	0x20000080
 80008b8:	40000400 	.word	0x40000400

080008bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d0:	463b      	mov	r3, r7
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_TIM4_Init+0x94>)
 80008da:	4a1e      	ldr	r2, [pc, #120]	; (8000954 <MX_TIM4_Init+0x98>)
 80008dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 49999;
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <MX_TIM4_Init+0x94>)
 80008e0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80008e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_TIM4_Init+0x94>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 980;
 80008ec:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_TIM4_Init+0x94>)
 80008ee:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 80008f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_TIM4_Init+0x94>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <MX_TIM4_Init+0x94>)
 80008fc:	2280      	movs	r2, #128	; 0x80
 80008fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000900:	4813      	ldr	r0, [pc, #76]	; (8000950 <MX_TIM4_Init+0x94>)
 8000902:	f001 fba1 	bl	8002048 <HAL_TIM_Base_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800090c:	f000 f912 	bl	8000b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000914:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	4619      	mov	r1, r3
 800091c:	480c      	ldr	r0, [pc, #48]	; (8000950 <MX_TIM4_Init+0x94>)
 800091e:	f001 ff01 	bl	8002724 <HAL_TIM_ConfigClockSource>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000928:	f000 f904 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092c:	2300      	movs	r3, #0
 800092e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000934:	463b      	mov	r3, r7
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_TIM4_Init+0x94>)
 800093a:	f002 fabb 	bl	8002eb4 <HAL_TIMEx_MasterConfigSynchronization>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000944:	f000 f8f6 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200000c8 	.word	0x200000c8
 8000954:	40000800 	.word	0x40000800

08000958 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800095e:	f107 0308 	add.w	r3, r7, #8
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096c:	463b      	mov	r3, r7
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <MX_TIM5_Init+0x94>)
 8000976:	4a1e      	ldr	r2, [pc, #120]	; (80009f0 <MX_TIM5_Init+0x98>)
 8000978:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 49999;
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <MX_TIM5_Init+0x94>)
 800097c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000980:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_TIM5_Init+0x94>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_TIM5_Init+0x94>)
 800098a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800098e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_TIM5_Init+0x94>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_TIM5_Init+0x94>)
 8000998:	2280      	movs	r2, #128	; 0x80
 800099a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800099c:	4813      	ldr	r0, [pc, #76]	; (80009ec <MX_TIM5_Init+0x94>)
 800099e:	f001 fb53 	bl	8002048 <HAL_TIM_Base_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80009a8:	f000 f8c4 	bl	8000b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	4619      	mov	r1, r3
 80009b8:	480c      	ldr	r0, [pc, #48]	; (80009ec <MX_TIM5_Init+0x94>)
 80009ba:	f001 feb3 	bl	8002724 <HAL_TIM_ConfigClockSource>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80009c4:	f000 f8b6 	bl	8000b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c8:	2300      	movs	r3, #0
 80009ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80009d0:	463b      	mov	r3, r7
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_TIM5_Init+0x94>)
 80009d6:	f002 fa6d 	bl	8002eb4 <HAL_TIMEx_MasterConfigSynchronization>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80009e0:	f000 f8a8 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000110 	.word	0x20000110
 80009f0:	40000c00 	.word	0x40000c00

080009f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <MX_USART2_UART_Init+0x50>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_USART2_UART_Init+0x4c>)
 8000a2c:	f002 fac4 	bl	8002fb8 <HAL_UART_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a36:	f000 f87d 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000158 	.word	0x20000158
 8000a44:	40004400 	.word	0x40004400

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	4b31      	ldr	r3, [pc, #196]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a30      	ldr	r2, [pc, #192]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b2e      	ldr	r3, [pc, #184]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a29      	ldr	r2, [pc, #164]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a22      	ldr	r2, [pc, #136]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a1b      	ldr	r2, [pc, #108]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <MX_GPIO_Init+0xe0>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2120      	movs	r1, #32
 8000ad2:	4816      	ldr	r0, [pc, #88]	; (8000b2c <MX_GPIO_Init+0xe4>)
 8000ad4:	f000 fdd4 	bl	8001680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ad8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ade:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	4810      	ldr	r0, [pc, #64]	; (8000b30 <MX_GPIO_Init+0xe8>)
 8000af0:	f000 fc42 	bl	8001378 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000af4:	2320      	movs	r3, #32
 8000af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4808      	ldr	r0, [pc, #32]	; (8000b2c <MX_GPIO_Init+0xe4>)
 8000b0c:	f000 fc34 	bl	8001378 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2102      	movs	r1, #2
 8000b14:	2028      	movs	r0, #40	; 0x28
 8000b16:	f000 fb66 	bl	80011e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b1a:	2028      	movs	r0, #40	; 0x28
 8000b1c:	f000 fb7f 	bl	800121e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	; 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020000 	.word	0x40020000
 8000b30:	40020800 	.word	0x40020800

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b38:	b672      	cpsid	i
}
 8000b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <Error_Handler+0x8>
	...

08000b40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b54:	6453      	str	r3, [r2, #68]	; 0x44
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000b7e:	2005      	movs	r0, #5
 8000b80:	f000 fb26 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800

08000b90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a2a      	ldr	r2, [pc, #168]	; (8000c48 <HAL_TIM_Base_MspInit+0xb8>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d116      	bne.n	8000bd0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	4b29      	ldr	r3, [pc, #164]	; (8000c4c <HAL_TIM_Base_MspInit+0xbc>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	4a28      	ldr	r2, [pc, #160]	; (8000c4c <HAL_TIM_Base_MspInit+0xbc>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <HAL_TIM_Base_MspInit+0xbc>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	201d      	movs	r0, #29
 8000bc4:	f000 fb0f 	bl	80011e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bc8:	201d      	movs	r0, #29
 8000bca:	f000 fb28 	bl	800121e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000bce:	e036      	b.n	8000c3e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a1e      	ldr	r2, [pc, #120]	; (8000c50 <HAL_TIM_Base_MspInit+0xc0>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d116      	bne.n	8000c08 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <HAL_TIM_Base_MspInit+0xbc>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a1a      	ldr	r2, [pc, #104]	; (8000c4c <HAL_TIM_Base_MspInit+0xbc>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <HAL_TIM_Base_MspInit+0xbc>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	201e      	movs	r0, #30
 8000bfc:	f000 faf3 	bl	80011e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c00:	201e      	movs	r0, #30
 8000c02:	f000 fb0c 	bl	800121e <HAL_NVIC_EnableIRQ>
}
 8000c06:	e01a      	b.n	8000c3e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a11      	ldr	r2, [pc, #68]	; (8000c54 <HAL_TIM_Base_MspInit+0xc4>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d115      	bne.n	8000c3e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <HAL_TIM_Base_MspInit+0xbc>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a0c      	ldr	r2, [pc, #48]	; (8000c4c <HAL_TIM_Base_MspInit+0xbc>)
 8000c1c:	f043 0308 	orr.w	r3, r3, #8
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <HAL_TIM_Base_MspInit+0xbc>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f003 0308 	and.w	r3, r3, #8
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2032      	movs	r0, #50	; 0x32
 8000c34:	f000 fad7 	bl	80011e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000c38:	2032      	movs	r0, #50	; 0x32
 8000c3a:	f000 faf0 	bl	800121e <HAL_NVIC_EnableIRQ>
}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40000400 	.word	0x40000400
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40000800 	.word	0x40000800
 8000c54:	40000c00 	.word	0x40000c00

08000c58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <HAL_TIM_MspPostInit+0x68>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d11d      	bne.n	8000cb6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_TIM_MspPostInit+0x6c>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a10      	ldr	r2, [pc, #64]	; (8000cc4 <HAL_TIM_MspPostInit+0x6c>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_TIM_MspPostInit+0x6c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c96:	2340      	movs	r3, #64	; 0x40
 8000c98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <HAL_TIM_MspPostInit+0x70>)
 8000cb2:	f000 fb61 	bl	8001378 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3720      	adds	r7, #32
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40000400 	.word	0x40000400
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020000 	.word	0x40020000

08000ccc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a1d      	ldr	r2, [pc, #116]	; (8000d60 <HAL_UART_MspInit+0x94>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d133      	bne.n	8000d56 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <HAL_UART_MspInit+0x98>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a1b      	ldr	r2, [pc, #108]	; (8000d64 <HAL_UART_MspInit+0x98>)
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <HAL_UART_MspInit+0x98>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <HAL_UART_MspInit+0x98>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <HAL_UART_MspInit+0x98>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_UART_MspInit+0x98>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d26:	230c      	movs	r3, #12
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d36:	2307      	movs	r3, #7
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4809      	ldr	r0, [pc, #36]	; (8000d68 <HAL_UART_MspInit+0x9c>)
 8000d42:	f000 fb19 	bl	8001378 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2026      	movs	r0, #38	; 0x26
 8000d4c:	f000 fa4b 	bl	80011e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d50:	2026      	movs	r0, #38	; 0x26
 8000d52:	f000 fa64 	bl	800121e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	; 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40004400 	.word	0x40004400
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020000 	.word	0x40020000

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d70:	e7fe      	b.n	8000d70 <NMI_Handler+0x4>

08000d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <MemManage_Handler+0x4>

08000d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db8:	f000 f8f6 	bl	8000fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <TIM3_IRQHandler+0x10>)
 8000dc6:	f001 fafb 	bl	80023c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000080 	.word	0x20000080

08000dd4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <TIM4_IRQHandler+0x10>)
 8000dda:	f001 faf1 	bl	80023c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200000c8 	.word	0x200000c8

08000de8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <USART2_IRQHandler+0x10>)
 8000dee:	f002 f9bf 	bl	8003170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000158 	.word	0x20000158

08000dfc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e04:	f000 fc70 	bl	80016e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <TIM5_IRQHandler+0x10>)
 8000e12:	f001 fad5 	bl	80023c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000110 	.word	0x20000110

08000e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e28:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <_sbrk+0x5c>)
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <_sbrk+0x60>)
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <_sbrk+0x64>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <_sbrk+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d207      	bcs.n	8000e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e50:	f003 f9a8 	bl	80041a4 <__errno>
 8000e54:	4603      	mov	r3, r0
 8000e56:	220c      	movs	r2, #12
 8000e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e5e:	e009      	b.n	8000e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <_sbrk+0x64>)
 8000e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20020000 	.word	0x20020000
 8000e80:	00000400 	.word	0x00000400
 8000e84:	200001a8 	.word	0x200001a8
 8000e88:	200002f8 	.word	0x200002f8

08000e8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <SystemInit+0x20>)
 8000e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <SystemInit+0x20>)
 8000e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eb4:	f7ff ffea 	bl	8000e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eba:	490d      	ldr	r1, [pc, #52]	; (8000ef0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	; (8000ef4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec0:	e002      	b.n	8000ec8 <LoopCopyDataInit>

08000ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec6:	3304      	adds	r3, #4

08000ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ecc:	d3f9      	bcc.n	8000ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ed0:	4c0a      	ldr	r4, [pc, #40]	; (8000efc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed4:	e001      	b.n	8000eda <LoopFillZerobss>

08000ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed8:	3204      	adds	r2, #4

08000eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000edc:	d3fb      	bcc.n	8000ed6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ede:	f003 f967 	bl	80041b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee2:	f7ff fbe7 	bl	80006b4 <main>
  bx  lr    
 8000ee6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ee8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000ef4:	080049cc 	.word	0x080049cc
  ldr r2, =_sbss
 8000ef8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000efc:	200002f8 	.word	0x200002f8

08000f00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f00:	e7fe      	b.n	8000f00 <ADC_IRQHandler>
	...

08000f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <HAL_Init+0x40>)
 8000f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <HAL_Init+0x40>)
 8000f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <HAL_Init+0x40>)
 8000f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 f94f 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f000 f808 	bl	8000f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f38:	f7ff fe02 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40023c00 	.word	0x40023c00

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_InitTick+0x54>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_InitTick+0x58>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f967 	bl	800123a <HAL_SYSTICK_Config>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00e      	b.n	8000f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b0f      	cmp	r3, #15
 8000f7a:	d80a      	bhi.n	8000f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f84:	f000 f92f 	bl	80011e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f88:	4a06      	ldr	r2, [pc, #24]	; (8000fa4 <HAL_InitTick+0x5c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e000      	b.n	8000f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000008 	.word	0x20000008
 8000fa0:	20000010 	.word	0x20000010
 8000fa4:	2000000c 	.word	0x2000000c

08000fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_IncTick+0x20>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_IncTick+0x24>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <HAL_IncTick+0x24>)
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000010 	.word	0x20000010
 8000fcc:	200001ac 	.word	0x200001ac

08000fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <HAL_GetTick+0x14>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	200001ac 	.word	0x200001ac

08000fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff0:	f7ff ffee 	bl	8000fd0 <HAL_GetTick>
 8000ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001000:	d005      	beq.n	800100e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_Delay+0x44>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4413      	add	r3, r2
 800100c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800100e:	bf00      	nop
 8001010:	f7ff ffde 	bl	8000fd0 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	429a      	cmp	r2, r3
 800101e:	d8f7      	bhi.n	8001010 <HAL_Delay+0x28>
  {
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000010 	.word	0x20000010

08001030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800104c:	4013      	ands	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800105c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001062:	4a04      	ldr	r2, [pc, #16]	; (8001074 <__NVIC_SetPriorityGrouping+0x44>)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	60d3      	str	r3, [r2, #12]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <__NVIC_GetPriorityGrouping+0x18>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	f003 0307 	and.w	r3, r3, #7
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	db0b      	blt.n	80010be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	f003 021f 	and.w	r2, r3, #31
 80010ac:	4907      	ldr	r1, [pc, #28]	; (80010cc <__NVIC_EnableIRQ+0x38>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	095b      	lsrs	r3, r3, #5
 80010b4:	2001      	movs	r0, #1
 80010b6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e100 	.word	0xe000e100

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	; (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2b04      	cmp	r3, #4
 8001140:	bf28      	it	cs
 8001142:	2304      	movcs	r3, #4
 8001144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3304      	adds	r3, #4
 800114a:	2b06      	cmp	r3, #6
 800114c:	d902      	bls.n	8001154 <NVIC_EncodePriority+0x30>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3b03      	subs	r3, #3
 8001152:	e000      	b.n	8001156 <NVIC_EncodePriority+0x32>
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43d9      	mvns	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	4313      	orrs	r3, r2
         );
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	; 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800119c:	d301      	bcc.n	80011a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119e:	2301      	movs	r3, #1
 80011a0:	e00f      	b.n	80011c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <SysTick_Config+0x40>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011aa:	210f      	movs	r1, #15
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011b0:	f7ff ff8e 	bl	80010d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <SysTick_Config+0x40>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ba:	4b04      	ldr	r3, [pc, #16]	; (80011cc <SysTick_Config+0x40>)
 80011bc:	2207      	movs	r2, #7
 80011be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	e000e010 	.word	0xe000e010

080011d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff29 	bl	8001030 <__NVIC_SetPriorityGrouping>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f8:	f7ff ff3e 	bl	8001078 <__NVIC_GetPriorityGrouping>
 80011fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	6978      	ldr	r0, [r7, #20]
 8001204:	f7ff ff8e 	bl	8001124 <NVIC_EncodePriority>
 8001208:	4602      	mov	r2, r0
 800120a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff5d 	bl	80010d0 <__NVIC_SetPriority>
}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff31 	bl	8001094 <__NVIC_EnableIRQ>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ffa2 	bl	800118c <SysTick_Config>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff feb6 	bl	8000fd0 <HAL_GetTick>
 8001264:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d008      	beq.n	8001284 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2280      	movs	r2, #128	; 0x80
 8001276:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e052      	b.n	800132a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0216 	bic.w	r2, r2, #22
 8001292:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	695a      	ldr	r2, [r3, #20]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d103      	bne.n	80012b4 <HAL_DMA_Abort+0x62>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d007      	beq.n	80012c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0208 	bic.w	r2, r2, #8
 80012c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 0201 	bic.w	r2, r2, #1
 80012d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012d4:	e013      	b.n	80012fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012d6:	f7ff fe7b 	bl	8000fd0 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b05      	cmp	r3, #5
 80012e2:	d90c      	bls.n	80012fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2220      	movs	r2, #32
 80012e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2203      	movs	r2, #3
 80012ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e015      	b.n	800132a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1e4      	bne.n	80012d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001310:	223f      	movs	r2, #63	; 0x3f
 8001312:	409a      	lsls	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d004      	beq.n	8001350 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2280      	movs	r2, #128	; 0x80
 800134a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e00c      	b.n	800136a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2205      	movs	r2, #5
 8001354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0201 	bic.w	r2, r2, #1
 8001366:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	; 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800138a:	2300      	movs	r3, #0
 800138c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
 8001392:	e159      	b.n	8001648 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001394:	2201      	movs	r2, #1
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	f040 8148 	bne.w	8001642 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d005      	beq.n	80013ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d130      	bne.n	800142c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	2203      	movs	r2, #3
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	68da      	ldr	r2, [r3, #12]
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001400:	2201      	movs	r2, #1
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	091b      	lsrs	r3, r3, #4
 8001416:	f003 0201 	and.w	r2, r3, #1
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	2b03      	cmp	r3, #3
 8001436:	d017      	beq.n	8001468 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	2203      	movs	r2, #3
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d123      	bne.n	80014bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	08da      	lsrs	r2, r3, #3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3208      	adds	r2, #8
 800147c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	220f      	movs	r2, #15
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	691a      	ldr	r2, [r3, #16]
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	08da      	lsrs	r2, r3, #3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3208      	adds	r2, #8
 80014b6:	69b9      	ldr	r1, [r7, #24]
 80014b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	2203      	movs	r2, #3
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 0203 	and.w	r2, r3, #3
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 80a2 	beq.w	8001642 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	4b57      	ldr	r3, [pc, #348]	; (8001660 <HAL_GPIO_Init+0x2e8>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	4a56      	ldr	r2, [pc, #344]	; (8001660 <HAL_GPIO_Init+0x2e8>)
 8001508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150c:	6453      	str	r3, [r2, #68]	; 0x44
 800150e:	4b54      	ldr	r3, [pc, #336]	; (8001660 <HAL_GPIO_Init+0x2e8>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800151a:	4a52      	ldr	r2, [pc, #328]	; (8001664 <HAL_GPIO_Init+0x2ec>)
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	089b      	lsrs	r3, r3, #2
 8001520:	3302      	adds	r3, #2
 8001522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f003 0303 	and.w	r3, r3, #3
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	220f      	movs	r2, #15
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a49      	ldr	r2, [pc, #292]	; (8001668 <HAL_GPIO_Init+0x2f0>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d019      	beq.n	800157a <HAL_GPIO_Init+0x202>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a48      	ldr	r2, [pc, #288]	; (800166c <HAL_GPIO_Init+0x2f4>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d013      	beq.n	8001576 <HAL_GPIO_Init+0x1fe>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a47      	ldr	r2, [pc, #284]	; (8001670 <HAL_GPIO_Init+0x2f8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d00d      	beq.n	8001572 <HAL_GPIO_Init+0x1fa>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a46      	ldr	r2, [pc, #280]	; (8001674 <HAL_GPIO_Init+0x2fc>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d007      	beq.n	800156e <HAL_GPIO_Init+0x1f6>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a45      	ldr	r2, [pc, #276]	; (8001678 <HAL_GPIO_Init+0x300>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d101      	bne.n	800156a <HAL_GPIO_Init+0x1f2>
 8001566:	2304      	movs	r3, #4
 8001568:	e008      	b.n	800157c <HAL_GPIO_Init+0x204>
 800156a:	2307      	movs	r3, #7
 800156c:	e006      	b.n	800157c <HAL_GPIO_Init+0x204>
 800156e:	2303      	movs	r3, #3
 8001570:	e004      	b.n	800157c <HAL_GPIO_Init+0x204>
 8001572:	2302      	movs	r3, #2
 8001574:	e002      	b.n	800157c <HAL_GPIO_Init+0x204>
 8001576:	2301      	movs	r3, #1
 8001578:	e000      	b.n	800157c <HAL_GPIO_Init+0x204>
 800157a:	2300      	movs	r3, #0
 800157c:	69fa      	ldr	r2, [r7, #28]
 800157e:	f002 0203 	and.w	r2, r2, #3
 8001582:	0092      	lsls	r2, r2, #2
 8001584:	4093      	lsls	r3, r2
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4313      	orrs	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800158c:	4935      	ldr	r1, [pc, #212]	; (8001664 <HAL_GPIO_Init+0x2ec>)
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	089b      	lsrs	r3, r3, #2
 8001592:	3302      	adds	r3, #2
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800159a:	4b38      	ldr	r3, [pc, #224]	; (800167c <HAL_GPIO_Init+0x304>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015be:	4a2f      	ldr	r2, [pc, #188]	; (800167c <HAL_GPIO_Init+0x304>)
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015c4:	4b2d      	ldr	r3, [pc, #180]	; (800167c <HAL_GPIO_Init+0x304>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015e8:	4a24      	ldr	r2, [pc, #144]	; (800167c <HAL_GPIO_Init+0x304>)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ee:	4b23      	ldr	r3, [pc, #140]	; (800167c <HAL_GPIO_Init+0x304>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4013      	ands	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001612:	4a1a      	ldr	r2, [pc, #104]	; (800167c <HAL_GPIO_Init+0x304>)
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <HAL_GPIO_Init+0x304>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800163c:	4a0f      	ldr	r2, [pc, #60]	; (800167c <HAL_GPIO_Init+0x304>)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3301      	adds	r3, #1
 8001646:	61fb      	str	r3, [r7, #28]
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	2b0f      	cmp	r3, #15
 800164c:	f67f aea2 	bls.w	8001394 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	3724      	adds	r7, #36	; 0x24
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800
 8001664:	40013800 	.word	0x40013800
 8001668:	40020000 	.word	0x40020000
 800166c:	40020400 	.word	0x40020400
 8001670:	40020800 	.word	0x40020800
 8001674:	40020c00 	.word	0x40020c00
 8001678:	40021000 	.word	0x40021000
 800167c:	40013c00 	.word	0x40013c00

08001680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]
 800168c:	4613      	mov	r3, r2
 800168e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001690:	787b      	ldrb	r3, [r7, #1]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001696:	887a      	ldrh	r2, [r7, #2]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800169c:	e003      	b.n	80016a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800169e:	887b      	ldrh	r3, [r7, #2]
 80016a0:	041a      	lsls	r2, r3, #16
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	619a      	str	r2, [r3, #24]
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b085      	sub	sp, #20
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	460b      	mov	r3, r1
 80016bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016c4:	887a      	ldrh	r2, [r7, #2]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4013      	ands	r3, r2
 80016ca:	041a      	lsls	r2, r3, #16
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	43d9      	mvns	r1, r3
 80016d0:	887b      	ldrh	r3, [r7, #2]
 80016d2:	400b      	ands	r3, r1
 80016d4:	431a      	orrs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	619a      	str	r2, [r3, #24]
}
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d006      	beq.n	800170c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016fe:	4a05      	ldr	r2, [pc, #20]	; (8001714 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe ff40 	bl	800058c <HAL_GPIO_EXTI_Callback>
  }
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40013c00 	.word	0x40013c00

08001718 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e267      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d075      	beq.n	8001822 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001736:	4b88      	ldr	r3, [pc, #544]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
 800173e:	2b04      	cmp	r3, #4
 8001740:	d00c      	beq.n	800175c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001742:	4b85      	ldr	r3, [pc, #532]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800174a:	2b08      	cmp	r3, #8
 800174c:	d112      	bne.n	8001774 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800174e:	4b82      	ldr	r3, [pc, #520]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800175a:	d10b      	bne.n	8001774 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175c:	4b7e      	ldr	r3, [pc, #504]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d05b      	beq.n	8001820 <HAL_RCC_OscConfig+0x108>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d157      	bne.n	8001820 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e242      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177c:	d106      	bne.n	800178c <HAL_RCC_OscConfig+0x74>
 800177e:	4b76      	ldr	r3, [pc, #472]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a75      	ldr	r2, [pc, #468]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e01d      	b.n	80017c8 <HAL_RCC_OscConfig+0xb0>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001794:	d10c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x98>
 8001796:	4b70      	ldr	r3, [pc, #448]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a6f      	ldr	r2, [pc, #444]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 800179c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	4b6d      	ldr	r3, [pc, #436]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a6c      	ldr	r2, [pc, #432]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 80017a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e00b      	b.n	80017c8 <HAL_RCC_OscConfig+0xb0>
 80017b0:	4b69      	ldr	r3, [pc, #420]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a68      	ldr	r2, [pc, #416]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 80017b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4b66      	ldr	r3, [pc, #408]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a65      	ldr	r2, [pc, #404]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 80017c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d013      	beq.n	80017f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff fbfe 	bl	8000fd0 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff fbfa 	bl	8000fd0 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	; 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e207      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	4b5b      	ldr	r3, [pc, #364]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0xc0>
 80017f6:	e014      	b.n	8001822 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff fbea 	bl	8000fd0 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff fbe6 	bl	8000fd0 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	; 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e1f3      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001812:	4b51      	ldr	r3, [pc, #324]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0xe8>
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d063      	beq.n	80018f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800182e:	4b4a      	ldr	r3, [pc, #296]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00b      	beq.n	8001852 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800183a:	4b47      	ldr	r3, [pc, #284]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001842:	2b08      	cmp	r3, #8
 8001844:	d11c      	bne.n	8001880 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001846:	4b44      	ldr	r3, [pc, #272]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d116      	bne.n	8001880 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001852:	4b41      	ldr	r3, [pc, #260]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d005      	beq.n	800186a <HAL_RCC_OscConfig+0x152>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d001      	beq.n	800186a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e1c7      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186a:	4b3b      	ldr	r3, [pc, #236]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	4937      	ldr	r1, [pc, #220]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 800187a:	4313      	orrs	r3, r2
 800187c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187e:	e03a      	b.n	80018f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d020      	beq.n	80018ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001888:	4b34      	ldr	r3, [pc, #208]	; (800195c <HAL_RCC_OscConfig+0x244>)
 800188a:	2201      	movs	r2, #1
 800188c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188e:	f7ff fb9f 	bl	8000fd0 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001896:	f7ff fb9b 	bl	8000fd0 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e1a8      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a8:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b4:	4b28      	ldr	r3, [pc, #160]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4925      	ldr	r1, [pc, #148]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	600b      	str	r3, [r1, #0]
 80018c8:	e015      	b.n	80018f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ca:	4b24      	ldr	r3, [pc, #144]	; (800195c <HAL_RCC_OscConfig+0x244>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d0:	f7ff fb7e 	bl	8000fd0 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018d8:	f7ff fb7a 	bl	8000fd0 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e187      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ea:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d036      	beq.n	8001970 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d016      	beq.n	8001938 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <HAL_RCC_OscConfig+0x248>)
 800190c:	2201      	movs	r2, #1
 800190e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001910:	f7ff fb5e 	bl	8000fd0 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001918:	f7ff fb5a 	bl	8000fd0 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e167      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192a:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 800192c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x200>
 8001936:	e01b      	b.n	8001970 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_RCC_OscConfig+0x248>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193e:	f7ff fb47 	bl	8000fd0 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001944:	e00e      	b.n	8001964 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001946:	f7ff fb43 	bl	8000fd0 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d907      	bls.n	8001964 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e150      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
 8001958:	40023800 	.word	0x40023800
 800195c:	42470000 	.word	0x42470000
 8001960:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001964:	4b88      	ldr	r3, [pc, #544]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1ea      	bne.n	8001946 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 8097 	beq.w	8001aac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001982:	4b81      	ldr	r3, [pc, #516]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10f      	bne.n	80019ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	4b7d      	ldr	r3, [pc, #500]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	4a7c      	ldr	r2, [pc, #496]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199c:	6413      	str	r3, [r2, #64]	; 0x40
 800199e:	4b7a      	ldr	r3, [pc, #488]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019aa:	2301      	movs	r3, #1
 80019ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ae:	4b77      	ldr	r3, [pc, #476]	; (8001b8c <HAL_RCC_OscConfig+0x474>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d118      	bne.n	80019ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ba:	4b74      	ldr	r3, [pc, #464]	; (8001b8c <HAL_RCC_OscConfig+0x474>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a73      	ldr	r2, [pc, #460]	; (8001b8c <HAL_RCC_OscConfig+0x474>)
 80019c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c6:	f7ff fb03 	bl	8000fd0 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ce:	f7ff faff 	bl	8000fd0 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e10c      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e0:	4b6a      	ldr	r3, [pc, #424]	; (8001b8c <HAL_RCC_OscConfig+0x474>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f0      	beq.n	80019ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d106      	bne.n	8001a02 <HAL_RCC_OscConfig+0x2ea>
 80019f4:	4b64      	ldr	r3, [pc, #400]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 80019f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f8:	4a63      	ldr	r2, [pc, #396]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001a00:	e01c      	b.n	8001a3c <HAL_RCC_OscConfig+0x324>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b05      	cmp	r3, #5
 8001a08:	d10c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x30c>
 8001a0a:	4b5f      	ldr	r3, [pc, #380]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0e:	4a5e      	ldr	r2, [pc, #376]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	6713      	str	r3, [r2, #112]	; 0x70
 8001a16:	4b5c      	ldr	r3, [pc, #368]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1a:	4a5b      	ldr	r2, [pc, #364]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6713      	str	r3, [r2, #112]	; 0x70
 8001a22:	e00b      	b.n	8001a3c <HAL_RCC_OscConfig+0x324>
 8001a24:	4b58      	ldr	r3, [pc, #352]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a28:	4a57      	ldr	r2, [pc, #348]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001a2a:	f023 0301 	bic.w	r3, r3, #1
 8001a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a30:	4b55      	ldr	r3, [pc, #340]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a34:	4a54      	ldr	r2, [pc, #336]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001a36:	f023 0304 	bic.w	r3, r3, #4
 8001a3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d015      	beq.n	8001a70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a44:	f7ff fac4 	bl	8000fd0 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4a:	e00a      	b.n	8001a62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a4c:	f7ff fac0 	bl	8000fd0 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e0cb      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a62:	4b49      	ldr	r3, [pc, #292]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0ee      	beq.n	8001a4c <HAL_RCC_OscConfig+0x334>
 8001a6e:	e014      	b.n	8001a9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a70:	f7ff faae 	bl	8000fd0 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a76:	e00a      	b.n	8001a8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a78:	f7ff faaa 	bl	8000fd0 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e0b5      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8e:	4b3e      	ldr	r3, [pc, #248]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1ee      	bne.n	8001a78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a9a:	7dfb      	ldrb	r3, [r7, #23]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d105      	bne.n	8001aac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa0:	4b39      	ldr	r3, [pc, #228]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	4a38      	ldr	r2, [pc, #224]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001aa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 80a1 	beq.w	8001bf8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ab6:	4b34      	ldr	r3, [pc, #208]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d05c      	beq.n	8001b7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d141      	bne.n	8001b4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aca:	4b31      	ldr	r3, [pc, #196]	; (8001b90 <HAL_RCC_OscConfig+0x478>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad0:	f7ff fa7e 	bl	8000fd0 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7ff fa7a 	bl	8000fd0 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e087      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aea:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69da      	ldr	r2, [r3, #28]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	019b      	lsls	r3, r3, #6
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0c:	085b      	lsrs	r3, r3, #1
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	041b      	lsls	r3, r3, #16
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	061b      	lsls	r3, r3, #24
 8001b1a:	491b      	ldr	r1, [pc, #108]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b20:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <HAL_RCC_OscConfig+0x478>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b26:	f7ff fa53 	bl	8000fd0 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2e:	f7ff fa4f 	bl	8000fd0 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e05c      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0f0      	beq.n	8001b2e <HAL_RCC_OscConfig+0x416>
 8001b4c:	e054      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <HAL_RCC_OscConfig+0x478>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b54:	f7ff fa3c 	bl	8000fd0 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b5c:	f7ff fa38 	bl	8000fd0 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e045      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0x444>
 8001b7a:	e03d      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d107      	bne.n	8001b94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e038      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40007000 	.word	0x40007000
 8001b90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <HAL_RCC_OscConfig+0x4ec>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d028      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d121      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d11a      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d111      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bda:	085b      	lsrs	r3, r3, #1
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d107      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800

08001c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0cc      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c1c:	4b68      	ldr	r3, [pc, #416]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d90c      	bls.n	8001c44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	4b65      	ldr	r3, [pc, #404]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c32:	4b63      	ldr	r3, [pc, #396]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0b8      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d020      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c5c:	4b59      	ldr	r3, [pc, #356]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	4a58      	ldr	r2, [pc, #352]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c74:	4b53      	ldr	r3, [pc, #332]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	4a52      	ldr	r2, [pc, #328]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c80:	4b50      	ldr	r3, [pc, #320]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	494d      	ldr	r1, [pc, #308]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d044      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d107      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca6:	4b47      	ldr	r3, [pc, #284]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d119      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e07f      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d003      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d107      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc6:	4b3f      	ldr	r3, [pc, #252]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d109      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e06f      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd6:	4b3b      	ldr	r3, [pc, #236]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e067      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ce6:	4b37      	ldr	r3, [pc, #220]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f023 0203 	bic.w	r2, r3, #3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	4934      	ldr	r1, [pc, #208]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cf8:	f7ff f96a 	bl	8000fd0 <HAL_GetTick>
 8001cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfe:	e00a      	b.n	8001d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d00:	f7ff f966 	bl	8000fd0 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e04f      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d16:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 020c 	and.w	r2, r3, #12
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d1eb      	bne.n	8001d00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d28:	4b25      	ldr	r3, [pc, #148]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d20c      	bcs.n	8001d50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d36:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e032      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d008      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d5c:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	4916      	ldr	r1, [pc, #88]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d009      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	490e      	ldr	r1, [pc, #56]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d8e:	f000 f821 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 8001d92:	4602      	mov	r2, r0
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	490a      	ldr	r1, [pc, #40]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	5ccb      	ldrb	r3, [r1, r3]
 8001da2:	fa22 f303 	lsr.w	r3, r2, r3
 8001da6:	4a09      	ldr	r2, [pc, #36]	; (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff f8ca 	bl	8000f48 <HAL_InitTick>

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023c00 	.word	0x40023c00
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	08004970 	.word	0x08004970
 8001dcc:	20000008 	.word	0x20000008
 8001dd0:	2000000c 	.word	0x2000000c

08001dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dd8:	b094      	sub	sp, #80	; 0x50
 8001dda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	647b      	str	r3, [r7, #68]	; 0x44
 8001de0:	2300      	movs	r3, #0
 8001de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001de4:	2300      	movs	r3, #0
 8001de6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dec:	4b79      	ldr	r3, [pc, #484]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 030c 	and.w	r3, r3, #12
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d00d      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0x40>
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	f200 80e1 	bhi.w	8001fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0x34>
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d003      	beq.n	8001e0e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e06:	e0db      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e08:	4b73      	ldr	r3, [pc, #460]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e0c:	e0db      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e0e:	4b73      	ldr	r3, [pc, #460]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x208>)
 8001e10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e12:	e0d8      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e14:	4b6f      	ldr	r3, [pc, #444]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e1e:	4b6d      	ldr	r3, [pc, #436]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d063      	beq.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e2a:	4b6a      	ldr	r3, [pc, #424]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	099b      	lsrs	r3, r3, #6
 8001e30:	2200      	movs	r2, #0
 8001e32:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e3c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e3e:	2300      	movs	r3, #0
 8001e40:	637b      	str	r3, [r7, #52]	; 0x34
 8001e42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e46:	4622      	mov	r2, r4
 8001e48:	462b      	mov	r3, r5
 8001e4a:	f04f 0000 	mov.w	r0, #0
 8001e4e:	f04f 0100 	mov.w	r1, #0
 8001e52:	0159      	lsls	r1, r3, #5
 8001e54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e58:	0150      	lsls	r0, r2, #5
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4621      	mov	r1, r4
 8001e60:	1a51      	subs	r1, r2, r1
 8001e62:	6139      	str	r1, [r7, #16]
 8001e64:	4629      	mov	r1, r5
 8001e66:	eb63 0301 	sbc.w	r3, r3, r1
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e78:	4659      	mov	r1, fp
 8001e7a:	018b      	lsls	r3, r1, #6
 8001e7c:	4651      	mov	r1, sl
 8001e7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e82:	4651      	mov	r1, sl
 8001e84:	018a      	lsls	r2, r1, #6
 8001e86:	4651      	mov	r1, sl
 8001e88:	ebb2 0801 	subs.w	r8, r2, r1
 8001e8c:	4659      	mov	r1, fp
 8001e8e:	eb63 0901 	sbc.w	r9, r3, r1
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ea6:	4690      	mov	r8, r2
 8001ea8:	4699      	mov	r9, r3
 8001eaa:	4623      	mov	r3, r4
 8001eac:	eb18 0303 	adds.w	r3, r8, r3
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	462b      	mov	r3, r5
 8001eb4:	eb49 0303 	adc.w	r3, r9, r3
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ec6:	4629      	mov	r1, r5
 8001ec8:	024b      	lsls	r3, r1, #9
 8001eca:	4621      	mov	r1, r4
 8001ecc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	024a      	lsls	r2, r1, #9
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eda:	2200      	movs	r2, #0
 8001edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ede:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ee0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ee4:	f7fe f9d4 	bl	8000290 <__aeabi_uldivmod>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4613      	mov	r3, r2
 8001eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ef0:	e058      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef2:	4b38      	ldr	r3, [pc, #224]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	099b      	lsrs	r3, r3, #6
 8001ef8:	2200      	movs	r2, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	4611      	mov	r1, r2
 8001efe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f02:	623b      	str	r3, [r7, #32]
 8001f04:	2300      	movs	r3, #0
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
 8001f08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f0c:	4642      	mov	r2, r8
 8001f0e:	464b      	mov	r3, r9
 8001f10:	f04f 0000 	mov.w	r0, #0
 8001f14:	f04f 0100 	mov.w	r1, #0
 8001f18:	0159      	lsls	r1, r3, #5
 8001f1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f1e:	0150      	lsls	r0, r2, #5
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4641      	mov	r1, r8
 8001f26:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f2a:	4649      	mov	r1, r9
 8001f2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	f04f 0300 	mov.w	r3, #0
 8001f38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f44:	ebb2 040a 	subs.w	r4, r2, sl
 8001f48:	eb63 050b 	sbc.w	r5, r3, fp
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	f04f 0300 	mov.w	r3, #0
 8001f54:	00eb      	lsls	r3, r5, #3
 8001f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f5a:	00e2      	lsls	r2, r4, #3
 8001f5c:	4614      	mov	r4, r2
 8001f5e:	461d      	mov	r5, r3
 8001f60:	4643      	mov	r3, r8
 8001f62:	18e3      	adds	r3, r4, r3
 8001f64:	603b      	str	r3, [r7, #0]
 8001f66:	464b      	mov	r3, r9
 8001f68:	eb45 0303 	adc.w	r3, r5, r3
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f7a:	4629      	mov	r1, r5
 8001f7c:	028b      	lsls	r3, r1, #10
 8001f7e:	4621      	mov	r1, r4
 8001f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f84:	4621      	mov	r1, r4
 8001f86:	028a      	lsls	r2, r1, #10
 8001f88:	4610      	mov	r0, r2
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f8e:	2200      	movs	r2, #0
 8001f90:	61bb      	str	r3, [r7, #24]
 8001f92:	61fa      	str	r2, [r7, #28]
 8001f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f98:	f7fe f97a 	bl	8000290 <__aeabi_uldivmod>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	0c1b      	lsrs	r3, r3, #16
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	3301      	adds	r3, #1
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001fb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fbe:	e002      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3750      	adds	r7, #80	; 0x50
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	00f42400 	.word	0x00f42400
 8001fdc:	007a1200 	.word	0x007a1200

08001fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20000008 	.word	0x20000008

08001ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ffc:	f7ff fff0 	bl	8001fe0 <HAL_RCC_GetHCLKFreq>
 8002000:	4602      	mov	r2, r0
 8002002:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	0a9b      	lsrs	r3, r3, #10
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	4903      	ldr	r1, [pc, #12]	; (800201c <HAL_RCC_GetPCLK1Freq+0x24>)
 800200e:	5ccb      	ldrb	r3, [r1, r3]
 8002010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002014:	4618      	mov	r0, r3
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40023800 	.word	0x40023800
 800201c:	08004980 	.word	0x08004980

08002020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002024:	f7ff ffdc 	bl	8001fe0 <HAL_RCC_GetHCLKFreq>
 8002028:	4602      	mov	r2, r0
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	0b5b      	lsrs	r3, r3, #13
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	4903      	ldr	r1, [pc, #12]	; (8002044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002036:	5ccb      	ldrb	r3, [r1, r3]
 8002038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800203c:	4618      	mov	r0, r3
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40023800 	.word	0x40023800
 8002044:	08004980 	.word	0x08004980

08002048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e041      	b.n	80020de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe fd8e 	bl	8000b90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2202      	movs	r2, #2
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3304      	adds	r3, #4
 8002084:	4619      	mov	r1, r3
 8002086:	4610      	mov	r0, r2
 8002088:	f000 fc3c 	bl	8002904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d001      	beq.n	8002100 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e044      	b.n	800218a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0201 	orr.w	r2, r2, #1
 8002116:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a1e      	ldr	r2, [pc, #120]	; (8002198 <HAL_TIM_Base_Start_IT+0xb0>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d018      	beq.n	8002154 <HAL_TIM_Base_Start_IT+0x6c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800212a:	d013      	beq.n	8002154 <HAL_TIM_Base_Start_IT+0x6c>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a1a      	ldr	r2, [pc, #104]	; (800219c <HAL_TIM_Base_Start_IT+0xb4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d00e      	beq.n	8002154 <HAL_TIM_Base_Start_IT+0x6c>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a19      	ldr	r2, [pc, #100]	; (80021a0 <HAL_TIM_Base_Start_IT+0xb8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d009      	beq.n	8002154 <HAL_TIM_Base_Start_IT+0x6c>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a17      	ldr	r2, [pc, #92]	; (80021a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d004      	beq.n	8002154 <HAL_TIM_Base_Start_IT+0x6c>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a16      	ldr	r2, [pc, #88]	; (80021a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d111      	bne.n	8002178 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b06      	cmp	r3, #6
 8002164:	d010      	beq.n	8002188 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 0201 	orr.w	r2, r2, #1
 8002174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002176:	e007      	b.n	8002188 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0201 	orr.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40010000 	.word	0x40010000
 800219c:	40000400 	.word	0x40000400
 80021a0:	40000800 	.word	0x40000800
 80021a4:	40000c00 	.word	0x40000c00
 80021a8:	40014000 	.word	0x40014000

080021ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e041      	b.n	8002242 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d106      	bne.n	80021d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f839 	bl	800224a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2202      	movs	r2, #2
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3304      	adds	r3, #4
 80021e8:	4619      	mov	r1, r3
 80021ea:	4610      	mov	r0, r2
 80021ec:	f000 fb8a 	bl	8002904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d109      	bne.n	8002284 <HAL_TIM_PWM_Start+0x24>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b01      	cmp	r3, #1
 800227a:	bf14      	ite	ne
 800227c:	2301      	movne	r3, #1
 800227e:	2300      	moveq	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	e022      	b.n	80022ca <HAL_TIM_PWM_Start+0x6a>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2b04      	cmp	r3, #4
 8002288:	d109      	bne.n	800229e <HAL_TIM_PWM_Start+0x3e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b01      	cmp	r3, #1
 8002294:	bf14      	ite	ne
 8002296:	2301      	movne	r3, #1
 8002298:	2300      	moveq	r3, #0
 800229a:	b2db      	uxtb	r3, r3
 800229c:	e015      	b.n	80022ca <HAL_TIM_PWM_Start+0x6a>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d109      	bne.n	80022b8 <HAL_TIM_PWM_Start+0x58>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	bf14      	ite	ne
 80022b0:	2301      	movne	r3, #1
 80022b2:	2300      	moveq	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	e008      	b.n	80022ca <HAL_TIM_PWM_Start+0x6a>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	bf14      	ite	ne
 80022c4:	2301      	movne	r3, #1
 80022c6:	2300      	moveq	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e068      	b.n	80023a4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d104      	bne.n	80022e2 <HAL_TIM_PWM_Start+0x82>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2202      	movs	r2, #2
 80022dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022e0:	e013      	b.n	800230a <HAL_TIM_PWM_Start+0xaa>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d104      	bne.n	80022f2 <HAL_TIM_PWM_Start+0x92>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022f0:	e00b      	b.n	800230a <HAL_TIM_PWM_Start+0xaa>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d104      	bne.n	8002302 <HAL_TIM_PWM_Start+0xa2>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002300:	e003      	b.n	800230a <HAL_TIM_PWM_Start+0xaa>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2202      	movs	r2, #2
 8002306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2201      	movs	r2, #1
 8002310:	6839      	ldr	r1, [r7, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f000 fda8 	bl	8002e68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a23      	ldr	r2, [pc, #140]	; (80023ac <HAL_TIM_PWM_Start+0x14c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d107      	bne.n	8002332 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002330:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a1d      	ldr	r2, [pc, #116]	; (80023ac <HAL_TIM_PWM_Start+0x14c>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d018      	beq.n	800236e <HAL_TIM_PWM_Start+0x10e>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002344:	d013      	beq.n	800236e <HAL_TIM_PWM_Start+0x10e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a19      	ldr	r2, [pc, #100]	; (80023b0 <HAL_TIM_PWM_Start+0x150>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d00e      	beq.n	800236e <HAL_TIM_PWM_Start+0x10e>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a17      	ldr	r2, [pc, #92]	; (80023b4 <HAL_TIM_PWM_Start+0x154>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d009      	beq.n	800236e <HAL_TIM_PWM_Start+0x10e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a16      	ldr	r2, [pc, #88]	; (80023b8 <HAL_TIM_PWM_Start+0x158>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d004      	beq.n	800236e <HAL_TIM_PWM_Start+0x10e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a14      	ldr	r2, [pc, #80]	; (80023bc <HAL_TIM_PWM_Start+0x15c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d111      	bne.n	8002392 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b06      	cmp	r3, #6
 800237e:	d010      	beq.n	80023a2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002390:	e007      	b.n	80023a2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f042 0201 	orr.w	r2, r2, #1
 80023a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40010000 	.word	0x40010000
 80023b0:	40000400 	.word	0x40000400
 80023b4:	40000800 	.word	0x40000800
 80023b8:	40000c00 	.word	0x40000c00
 80023bc:	40014000 	.word	0x40014000

080023c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d020      	beq.n	8002424 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01b      	beq.n	8002424 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0202 	mvn.w	r2, #2
 80023f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 fa5b 	bl	80028c6 <HAL_TIM_IC_CaptureCallback>
 8002410:	e005      	b.n	800241e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fa4d 	bl	80028b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 fa5e 	bl	80028da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	2b00      	cmp	r3, #0
 800242c:	d020      	beq.n	8002470 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01b      	beq.n	8002470 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0204 	mvn.w	r2, #4
 8002440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2202      	movs	r2, #2
 8002446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 fa35 	bl	80028c6 <HAL_TIM_IC_CaptureCallback>
 800245c:	e005      	b.n	800246a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fa27 	bl	80028b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 fa38 	bl	80028da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d020      	beq.n	80024bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01b      	beq.n	80024bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0208 	mvn.w	r2, #8
 800248c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2204      	movs	r2, #4
 8002492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 fa0f 	bl	80028c6 <HAL_TIM_IC_CaptureCallback>
 80024a8:	e005      	b.n	80024b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 fa01 	bl	80028b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 fa12 	bl	80028da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d020      	beq.n	8002508 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f003 0310 	and.w	r3, r3, #16
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d01b      	beq.n	8002508 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0210 	mvn.w	r2, #16
 80024d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2208      	movs	r2, #8
 80024de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f9e9 	bl	80028c6 <HAL_TIM_IC_CaptureCallback>
 80024f4:	e005      	b.n	8002502 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f9db 	bl	80028b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f9ec 	bl	80028da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00c      	beq.n	800252c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d007      	beq.n	800252c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f06f 0201 	mvn.w	r2, #1
 8002524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7fe f85a 	bl	80005e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00c      	beq.n	8002550 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253c:	2b00      	cmp	r3, #0
 800253e:	d007      	beq.n	8002550 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fd2a 	bl	8002fa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00c      	beq.n	8002574 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002560:	2b00      	cmp	r3, #0
 8002562:	d007      	beq.n	8002574 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800256c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f9bd 	bl	80028ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00c      	beq.n	8002598 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f003 0320 	and.w	r3, r3, #32
 8002584:	2b00      	cmp	r3, #0
 8002586:	d007      	beq.n	8002598 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0220 	mvn.w	r2, #32
 8002590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 fcfc 	bl	8002f90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002598:	bf00      	nop
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e0ae      	b.n	800271c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b0c      	cmp	r3, #12
 80025ca:	f200 809f 	bhi.w	800270c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80025ce:	a201      	add	r2, pc, #4	; (adr r2, 80025d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80025d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d4:	08002609 	.word	0x08002609
 80025d8:	0800270d 	.word	0x0800270d
 80025dc:	0800270d 	.word	0x0800270d
 80025e0:	0800270d 	.word	0x0800270d
 80025e4:	08002649 	.word	0x08002649
 80025e8:	0800270d 	.word	0x0800270d
 80025ec:	0800270d 	.word	0x0800270d
 80025f0:	0800270d 	.word	0x0800270d
 80025f4:	0800268b 	.word	0x0800268b
 80025f8:	0800270d 	.word	0x0800270d
 80025fc:	0800270d 	.word	0x0800270d
 8002600:	0800270d 	.word	0x0800270d
 8002604:	080026cb 	.word	0x080026cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fa04 	bl	8002a1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699a      	ldr	r2, [r3, #24]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0208 	orr.w	r2, r2, #8
 8002622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699a      	ldr	r2, [r3, #24]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0204 	bic.w	r2, r2, #4
 8002632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6999      	ldr	r1, [r3, #24]
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	619a      	str	r2, [r3, #24]
      break;
 8002646:	e064      	b.n	8002712 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	4618      	mov	r0, r3
 8002650:	f000 fa4a 	bl	8002ae8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699a      	ldr	r2, [r3, #24]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002662:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699a      	ldr	r2, [r3, #24]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002672:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6999      	ldr	r1, [r3, #24]
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	021a      	lsls	r2, r3, #8
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	619a      	str	r2, [r3, #24]
      break;
 8002688:	e043      	b.n	8002712 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	4618      	mov	r0, r3
 8002692:	f000 fa95 	bl	8002bc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	69da      	ldr	r2, [r3, #28]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 0208 	orr.w	r2, r2, #8
 80026a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	69da      	ldr	r2, [r3, #28]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0204 	bic.w	r2, r2, #4
 80026b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	69d9      	ldr	r1, [r3, #28]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	61da      	str	r2, [r3, #28]
      break;
 80026c8:	e023      	b.n	8002712 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 fadf 	bl	8002c94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	69da      	ldr	r2, [r3, #28]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	69da      	ldr	r2, [r3, #28]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	69d9      	ldr	r1, [r3, #28]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	021a      	lsls	r2, r3, #8
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	61da      	str	r2, [r3, #28]
      break;
 800270a:	e002      	b.n	8002712 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	75fb      	strb	r3, [r7, #23]
      break;
 8002710:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800271a:	7dfb      	ldrb	r3, [r7, #23]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_TIM_ConfigClockSource+0x1c>
 800273c:	2302      	movs	r3, #2
 800273e:	e0b4      	b.n	80028aa <HAL_TIM_ConfigClockSource+0x186>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800275e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002766:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002778:	d03e      	beq.n	80027f8 <HAL_TIM_ConfigClockSource+0xd4>
 800277a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800277e:	f200 8087 	bhi.w	8002890 <HAL_TIM_ConfigClockSource+0x16c>
 8002782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002786:	f000 8086 	beq.w	8002896 <HAL_TIM_ConfigClockSource+0x172>
 800278a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278e:	d87f      	bhi.n	8002890 <HAL_TIM_ConfigClockSource+0x16c>
 8002790:	2b70      	cmp	r3, #112	; 0x70
 8002792:	d01a      	beq.n	80027ca <HAL_TIM_ConfigClockSource+0xa6>
 8002794:	2b70      	cmp	r3, #112	; 0x70
 8002796:	d87b      	bhi.n	8002890 <HAL_TIM_ConfigClockSource+0x16c>
 8002798:	2b60      	cmp	r3, #96	; 0x60
 800279a:	d050      	beq.n	800283e <HAL_TIM_ConfigClockSource+0x11a>
 800279c:	2b60      	cmp	r3, #96	; 0x60
 800279e:	d877      	bhi.n	8002890 <HAL_TIM_ConfigClockSource+0x16c>
 80027a0:	2b50      	cmp	r3, #80	; 0x50
 80027a2:	d03c      	beq.n	800281e <HAL_TIM_ConfigClockSource+0xfa>
 80027a4:	2b50      	cmp	r3, #80	; 0x50
 80027a6:	d873      	bhi.n	8002890 <HAL_TIM_ConfigClockSource+0x16c>
 80027a8:	2b40      	cmp	r3, #64	; 0x40
 80027aa:	d058      	beq.n	800285e <HAL_TIM_ConfigClockSource+0x13a>
 80027ac:	2b40      	cmp	r3, #64	; 0x40
 80027ae:	d86f      	bhi.n	8002890 <HAL_TIM_ConfigClockSource+0x16c>
 80027b0:	2b30      	cmp	r3, #48	; 0x30
 80027b2:	d064      	beq.n	800287e <HAL_TIM_ConfigClockSource+0x15a>
 80027b4:	2b30      	cmp	r3, #48	; 0x30
 80027b6:	d86b      	bhi.n	8002890 <HAL_TIM_ConfigClockSource+0x16c>
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	d060      	beq.n	800287e <HAL_TIM_ConfigClockSource+0x15a>
 80027bc:	2b20      	cmp	r3, #32
 80027be:	d867      	bhi.n	8002890 <HAL_TIM_ConfigClockSource+0x16c>
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d05c      	beq.n	800287e <HAL_TIM_ConfigClockSource+0x15a>
 80027c4:	2b10      	cmp	r3, #16
 80027c6:	d05a      	beq.n	800287e <HAL_TIM_ConfigClockSource+0x15a>
 80027c8:	e062      	b.n	8002890 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027da:	f000 fb25 	bl	8002e28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	609a      	str	r2, [r3, #8]
      break;
 80027f6:	e04f      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002808:	f000 fb0e 	bl	8002e28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800281a:	609a      	str	r2, [r3, #8]
      break;
 800281c:	e03c      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800282a:	461a      	mov	r2, r3
 800282c:	f000 fa82 	bl	8002d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2150      	movs	r1, #80	; 0x50
 8002836:	4618      	mov	r0, r3
 8002838:	f000 fadb 	bl	8002df2 <TIM_ITRx_SetConfig>
      break;
 800283c:	e02c      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800284a:	461a      	mov	r2, r3
 800284c:	f000 faa1 	bl	8002d92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2160      	movs	r1, #96	; 0x60
 8002856:	4618      	mov	r0, r3
 8002858:	f000 facb 	bl	8002df2 <TIM_ITRx_SetConfig>
      break;
 800285c:	e01c      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800286a:	461a      	mov	r2, r3
 800286c:	f000 fa62 	bl	8002d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2140      	movs	r1, #64	; 0x40
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fabb 	bl	8002df2 <TIM_ITRx_SetConfig>
      break;
 800287c:	e00c      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4619      	mov	r1, r3
 8002888:	4610      	mov	r0, r2
 800288a:	f000 fab2 	bl	8002df2 <TIM_ITRx_SetConfig>
      break;
 800288e:	e003      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
      break;
 8002894:	e000      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002896:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a3a      	ldr	r2, [pc, #232]	; (8002a00 <TIM_Base_SetConfig+0xfc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d00f      	beq.n	800293c <TIM_Base_SetConfig+0x38>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002922:	d00b      	beq.n	800293c <TIM_Base_SetConfig+0x38>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a37      	ldr	r2, [pc, #220]	; (8002a04 <TIM_Base_SetConfig+0x100>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d007      	beq.n	800293c <TIM_Base_SetConfig+0x38>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a36      	ldr	r2, [pc, #216]	; (8002a08 <TIM_Base_SetConfig+0x104>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d003      	beq.n	800293c <TIM_Base_SetConfig+0x38>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a35      	ldr	r2, [pc, #212]	; (8002a0c <TIM_Base_SetConfig+0x108>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d108      	bne.n	800294e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	4313      	orrs	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a2b      	ldr	r2, [pc, #172]	; (8002a00 <TIM_Base_SetConfig+0xfc>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d01b      	beq.n	800298e <TIM_Base_SetConfig+0x8a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295c:	d017      	beq.n	800298e <TIM_Base_SetConfig+0x8a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a28      	ldr	r2, [pc, #160]	; (8002a04 <TIM_Base_SetConfig+0x100>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d013      	beq.n	800298e <TIM_Base_SetConfig+0x8a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a27      	ldr	r2, [pc, #156]	; (8002a08 <TIM_Base_SetConfig+0x104>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d00f      	beq.n	800298e <TIM_Base_SetConfig+0x8a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a26      	ldr	r2, [pc, #152]	; (8002a0c <TIM_Base_SetConfig+0x108>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d00b      	beq.n	800298e <TIM_Base_SetConfig+0x8a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a25      	ldr	r2, [pc, #148]	; (8002a10 <TIM_Base_SetConfig+0x10c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d007      	beq.n	800298e <TIM_Base_SetConfig+0x8a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a24      	ldr	r2, [pc, #144]	; (8002a14 <TIM_Base_SetConfig+0x110>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d003      	beq.n	800298e <TIM_Base_SetConfig+0x8a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a23      	ldr	r2, [pc, #140]	; (8002a18 <TIM_Base_SetConfig+0x114>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d108      	bne.n	80029a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4313      	orrs	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a0e      	ldr	r2, [pc, #56]	; (8002a00 <TIM_Base_SetConfig+0xfc>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d103      	bne.n	80029d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d105      	bne.n	80029f2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f023 0201 	bic.w	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	611a      	str	r2, [r3, #16]
  }
}
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40010000 	.word	0x40010000
 8002a04:	40000400 	.word	0x40000400
 8002a08:	40000800 	.word	0x40000800
 8002a0c:	40000c00 	.word	0x40000c00
 8002a10:	40014000 	.word	0x40014000
 8002a14:	40014400 	.word	0x40014400
 8002a18:	40014800 	.word	0x40014800

08002a1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	f023 0201 	bic.w	r2, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f023 0303 	bic.w	r3, r3, #3
 8002a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f023 0302 	bic.w	r3, r3, #2
 8002a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a1c      	ldr	r2, [pc, #112]	; (8002ae4 <TIM_OC1_SetConfig+0xc8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d10c      	bne.n	8002a92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f023 0308 	bic.w	r3, r3, #8
 8002a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f023 0304 	bic.w	r3, r3, #4
 8002a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a13      	ldr	r2, [pc, #76]	; (8002ae4 <TIM_OC1_SetConfig+0xc8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d111      	bne.n	8002abe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	621a      	str	r2, [r3, #32]
}
 8002ad8:	bf00      	nop
 8002ada:	371c      	adds	r7, #28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	40010000 	.word	0x40010000

08002ae8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	f023 0210 	bic.w	r2, r3, #16
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	021b      	lsls	r3, r3, #8
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f023 0320 	bic.w	r3, r3, #32
 8002b32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a1e      	ldr	r2, [pc, #120]	; (8002bbc <TIM_OC2_SetConfig+0xd4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d10d      	bne.n	8002b64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a15      	ldr	r2, [pc, #84]	; (8002bbc <TIM_OC2_SetConfig+0xd4>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d113      	bne.n	8002b94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	621a      	str	r2, [r3, #32]
}
 8002bae:	bf00      	nop
 8002bb0:	371c      	adds	r7, #28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40010000 	.word	0x40010000

08002bc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f023 0303 	bic.w	r3, r3, #3
 8002bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	021b      	lsls	r3, r3, #8
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a1d      	ldr	r2, [pc, #116]	; (8002c90 <TIM_OC3_SetConfig+0xd0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d10d      	bne.n	8002c3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	021b      	lsls	r3, r3, #8
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a14      	ldr	r2, [pc, #80]	; (8002c90 <TIM_OC3_SetConfig+0xd0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d113      	bne.n	8002c6a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	621a      	str	r2, [r3, #32]
}
 8002c84:	bf00      	nop
 8002c86:	371c      	adds	r7, #28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	40010000 	.word	0x40010000

08002c94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	021b      	lsls	r3, r3, #8
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	031b      	lsls	r3, r3, #12
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a10      	ldr	r2, [pc, #64]	; (8002d30 <TIM_OC4_SetConfig+0x9c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d109      	bne.n	8002d08 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	019b      	lsls	r3, r3, #6
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	621a      	str	r2, [r3, #32]
}
 8002d22:	bf00      	nop
 8002d24:	371c      	adds	r7, #28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40010000 	.word	0x40010000

08002d34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b087      	sub	sp, #28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	f023 0201 	bic.w	r2, r3, #1
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f023 030a 	bic.w	r3, r3, #10
 8002d70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	621a      	str	r2, [r3, #32]
}
 8002d86:	bf00      	nop
 8002d88:	371c      	adds	r7, #28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b087      	sub	sp, #28
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	f023 0210 	bic.w	r2, r3, #16
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	031b      	lsls	r3, r3, #12
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	621a      	str	r2, [r3, #32]
}
 8002de6:	bf00      	nop
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b085      	sub	sp, #20
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f043 0307 	orr.w	r3, r3, #7
 8002e14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	609a      	str	r2, [r3, #8]
}
 8002e1c:	bf00      	nop
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	021a      	lsls	r2, r3, #8
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	609a      	str	r2, [r3, #8]
}
 8002e5c:	bf00      	nop
 8002e5e:	371c      	adds	r7, #28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f003 031f 	and.w	r3, r3, #31
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a1a      	ldr	r2, [r3, #32]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	401a      	ands	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a1a      	ldr	r2, [r3, #32]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f003 031f 	and.w	r3, r3, #31
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	621a      	str	r2, [r3, #32]
}
 8002ea6:	bf00      	nop
 8002ea8:	371c      	adds	r7, #28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e050      	b.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a1c      	ldr	r2, [pc, #112]	; (8002f7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d018      	beq.n	8002f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f18:	d013      	beq.n	8002f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a18      	ldr	r2, [pc, #96]	; (8002f80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d00e      	beq.n	8002f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a16      	ldr	r2, [pc, #88]	; (8002f84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d009      	beq.n	8002f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a15      	ldr	r2, [pc, #84]	; (8002f88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d004      	beq.n	8002f42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a13      	ldr	r2, [pc, #76]	; (8002f8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d10c      	bne.n	8002f5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40010000 	.word	0x40010000
 8002f80:	40000400 	.word	0x40000400
 8002f84:	40000800 	.word	0x40000800
 8002f88:	40000c00 	.word	0x40000c00
 8002f8c:	40014000 	.word	0x40014000

08002f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e042      	b.n	8003050 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fd fe74 	bl	8000ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2224      	movs	r2, #36	; 0x24
 8002fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ffa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 fd69 	bl	8003ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003010:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695a      	ldr	r2, [r3, #20]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003020:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003030:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08a      	sub	sp, #40	; 0x28
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	4613      	mov	r3, r2
 8003066:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b20      	cmp	r3, #32
 8003076:	d175      	bne.n	8003164 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <HAL_UART_Transmit+0x2c>
 800307e:	88fb      	ldrh	r3, [r7, #6]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e06e      	b.n	8003166 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2221      	movs	r2, #33	; 0x21
 8003092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003096:	f7fd ff9b 	bl	8000fd0 <HAL_GetTick>
 800309a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	88fa      	ldrh	r2, [r7, #6]
 80030a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	88fa      	ldrh	r2, [r7, #6]
 80030a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b0:	d108      	bne.n	80030c4 <HAL_UART_Transmit+0x6c>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d104      	bne.n	80030c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	e003      	b.n	80030cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030cc:	e02e      	b.n	800312c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2200      	movs	r2, #0
 80030d6:	2180      	movs	r1, #128	; 0x80
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 fb05 	bl	80036e8 <UART_WaitOnFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e03a      	b.n	8003166 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10b      	bne.n	800310e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003104:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	3302      	adds	r3, #2
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	e007      	b.n	800311e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	781a      	ldrb	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	3301      	adds	r3, #1
 800311c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1cb      	bne.n	80030ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2200      	movs	r2, #0
 800313e:	2140      	movs	r1, #64	; 0x40
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 fad1 	bl	80036e8 <UART_WaitOnFlagUntilTimeout>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e006      	b.n	8003166 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	e000      	b.n	8003166 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003164:	2302      	movs	r3, #2
  }
}
 8003166:	4618      	mov	r0, r3
 8003168:	3720      	adds	r7, #32
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b0ba      	sub	sp, #232	; 0xe8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003196:	2300      	movs	r3, #0
 8003198:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800319c:	2300      	movs	r3, #0
 800319e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80031ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10f      	bne.n	80031d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d009      	beq.n	80031d6 <HAL_UART_IRQHandler+0x66>
 80031c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fbc2 	bl	8003958 <UART_Receive_IT>
      return;
 80031d4:	e25b      	b.n	800368e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80031d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 80de 	beq.w	800339c <HAL_UART_IRQHandler+0x22c>
 80031e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d106      	bne.n	80031fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80d1 	beq.w	800339c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00b      	beq.n	800321e <HAL_UART_IRQHandler+0xae>
 8003206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800320a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003216:	f043 0201 	orr.w	r2, r3, #1
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800321e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003222:	f003 0304 	and.w	r3, r3, #4
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00b      	beq.n	8003242 <HAL_UART_IRQHandler+0xd2>
 800322a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d005      	beq.n	8003242 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323a:	f043 0202 	orr.w	r2, r3, #2
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00b      	beq.n	8003266 <HAL_UART_IRQHandler+0xf6>
 800324e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d005      	beq.n	8003266 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	f043 0204 	orr.w	r2, r3, #4
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d011      	beq.n	8003296 <HAL_UART_IRQHandler+0x126>
 8003272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003276:	f003 0320 	and.w	r3, r3, #32
 800327a:	2b00      	cmp	r3, #0
 800327c:	d105      	bne.n	800328a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800327e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	f043 0208 	orr.w	r2, r3, #8
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 81f2 	beq.w	8003684 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a4:	f003 0320 	and.w	r3, r3, #32
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_UART_IRQHandler+0x14e>
 80032ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032b0:	f003 0320 	and.w	r3, r3, #32
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fb4d 	bl	8003958 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c8:	2b40      	cmp	r3, #64	; 0x40
 80032ca:	bf0c      	ite	eq
 80032cc:	2301      	moveq	r3, #1
 80032ce:	2300      	movne	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d103      	bne.n	80032ea <HAL_UART_IRQHandler+0x17a>
 80032e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d04f      	beq.n	800338a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fa55 	bl	800379a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fa:	2b40      	cmp	r3, #64	; 0x40
 80032fc:	d141      	bne.n	8003382 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	3314      	adds	r3, #20
 8003304:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003308:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800330c:	e853 3f00 	ldrex	r3, [r3]
 8003310:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003314:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800331c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	3314      	adds	r3, #20
 8003326:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800332a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800332e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003332:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003336:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800333a:	e841 2300 	strex	r3, r2, [r1]
 800333e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1d9      	bne.n	80032fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334e:	2b00      	cmp	r3, #0
 8003350:	d013      	beq.n	800337a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003356:	4a7e      	ldr	r2, [pc, #504]	; (8003550 <HAL_UART_IRQHandler+0x3e0>)
 8003358:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335e:	4618      	mov	r0, r3
 8003360:	f7fd ffe7 	bl	8001332 <HAL_DMA_Abort_IT>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d016      	beq.n	8003398 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003374:	4610      	mov	r0, r2
 8003376:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003378:	e00e      	b.n	8003398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f99e 	bl	80036bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003380:	e00a      	b.n	8003398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f99a 	bl	80036bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003388:	e006      	b.n	8003398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f996 	bl	80036bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003396:	e175      	b.n	8003684 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003398:	bf00      	nop
    return;
 800339a:	e173      	b.n	8003684 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	f040 814f 	bne.w	8003644 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033aa:	f003 0310 	and.w	r3, r3, #16
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 8148 	beq.w	8003644 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 8141 	beq.w	8003644 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033c2:	2300      	movs	r3, #0
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	60bb      	str	r3, [r7, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e2:	2b40      	cmp	r3, #64	; 0x40
 80033e4:	f040 80b6 	bne.w	8003554 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 8145 	beq.w	8003688 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003402:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003406:	429a      	cmp	r2, r3
 8003408:	f080 813e 	bcs.w	8003688 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003412:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800341e:	f000 8088 	beq.w	8003532 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	330c      	adds	r3, #12
 8003428:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003430:	e853 3f00 	ldrex	r3, [r3]
 8003434:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003438:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800343c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003440:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	330c      	adds	r3, #12
 800344a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800344e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003452:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003456:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800345a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800345e:	e841 2300 	strex	r3, r2, [r1]
 8003462:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1d9      	bne.n	8003422 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3314      	adds	r3, #20
 8003474:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003478:	e853 3f00 	ldrex	r3, [r3]
 800347c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800347e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003480:	f023 0301 	bic.w	r3, r3, #1
 8003484:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3314      	adds	r3, #20
 800348e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003492:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003496:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003498:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800349a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800349e:	e841 2300 	strex	r3, r2, [r1]
 80034a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1e1      	bne.n	800346e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	3314      	adds	r3, #20
 80034b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034b4:	e853 3f00 	ldrex	r3, [r3]
 80034b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3314      	adds	r3, #20
 80034ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80034d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034d6:	e841 2300 	strex	r3, r2, [r1]
 80034da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80034dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1e3      	bne.n	80034aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	330c      	adds	r3, #12
 80034f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034fa:	e853 3f00 	ldrex	r3, [r3]
 80034fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003502:	f023 0310 	bic.w	r3, r3, #16
 8003506:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	330c      	adds	r3, #12
 8003510:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003514:	65ba      	str	r2, [r7, #88]	; 0x58
 8003516:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003518:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800351a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800351c:	e841 2300 	strex	r3, r2, [r1]
 8003520:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1e3      	bne.n	80034f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd fe90 	bl	8001252 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2202      	movs	r2, #2
 8003536:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003540:	b29b      	uxth	r3, r3
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	b29b      	uxth	r3, r3
 8003546:	4619      	mov	r1, r3
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f8c1 	bl	80036d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800354e:	e09b      	b.n	8003688 <HAL_UART_IRQHandler+0x518>
 8003550:	08003861 	.word	0x08003861
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800355c:	b29b      	uxth	r3, r3
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 808e 	beq.w	800368c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 8089 	beq.w	800368c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	330c      	adds	r3, #12
 8003580:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003584:	e853 3f00 	ldrex	r3, [r3]
 8003588:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800358a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003590:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	330c      	adds	r3, #12
 800359a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800359e:	647a      	str	r2, [r7, #68]	; 0x44
 80035a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035a6:	e841 2300 	strex	r3, r2, [r1]
 80035aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1e3      	bne.n	800357a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3314      	adds	r3, #20
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	e853 3f00 	ldrex	r3, [r3]
 80035c0:	623b      	str	r3, [r7, #32]
   return(result);
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	f023 0301 	bic.w	r3, r3, #1
 80035c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3314      	adds	r3, #20
 80035d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035d6:	633a      	str	r2, [r7, #48]	; 0x30
 80035d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035de:	e841 2300 	strex	r3, r2, [r1]
 80035e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1e3      	bne.n	80035b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	330c      	adds	r3, #12
 80035fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	e853 3f00 	ldrex	r3, [r3]
 8003606:	60fb      	str	r3, [r7, #12]
   return(result);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0310 	bic.w	r3, r3, #16
 800360e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	330c      	adds	r3, #12
 8003618:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800361c:	61fa      	str	r2, [r7, #28]
 800361e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003620:	69b9      	ldr	r1, [r7, #24]
 8003622:	69fa      	ldr	r2, [r7, #28]
 8003624:	e841 2300 	strex	r3, r2, [r1]
 8003628:	617b      	str	r3, [r7, #20]
   return(result);
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1e3      	bne.n	80035f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003636:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800363a:	4619      	mov	r1, r3
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f847 	bl	80036d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003642:	e023      	b.n	800368c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364c:	2b00      	cmp	r3, #0
 800364e:	d009      	beq.n	8003664 <HAL_UART_IRQHandler+0x4f4>
 8003650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f913 	bl	8003888 <UART_Transmit_IT>
    return;
 8003662:	e014      	b.n	800368e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00e      	beq.n	800368e <HAL_UART_IRQHandler+0x51e>
 8003670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f953 	bl	8003928 <UART_EndTransmit_IT>
    return;
 8003682:	e004      	b.n	800368e <HAL_UART_IRQHandler+0x51e>
    return;
 8003684:	bf00      	nop
 8003686:	e002      	b.n	800368e <HAL_UART_IRQHandler+0x51e>
      return;
 8003688:	bf00      	nop
 800368a:	e000      	b.n	800368e <HAL_UART_IRQHandler+0x51e>
      return;
 800368c:	bf00      	nop
  }
}
 800368e:	37e8      	adds	r7, #232	; 0xe8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	4613      	mov	r3, r2
 80036f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f8:	e03b      	b.n	8003772 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003700:	d037      	beq.n	8003772 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003702:	f7fd fc65 	bl	8000fd0 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	6a3a      	ldr	r2, [r7, #32]
 800370e:	429a      	cmp	r2, r3
 8003710:	d302      	bcc.n	8003718 <UART_WaitOnFlagUntilTimeout+0x30>
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e03a      	b.n	8003792 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b00      	cmp	r3, #0
 8003728:	d023      	beq.n	8003772 <UART_WaitOnFlagUntilTimeout+0x8a>
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b80      	cmp	r3, #128	; 0x80
 800372e:	d020      	beq.n	8003772 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b40      	cmp	r3, #64	; 0x40
 8003734:	d01d      	beq.n	8003772 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b08      	cmp	r3, #8
 8003742:	d116      	bne.n	8003772 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	617b      	str	r3, [r7, #20]
 8003758:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 f81d 	bl	800379a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2208      	movs	r2, #8
 8003764:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e00f      	b.n	8003792 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4013      	ands	r3, r2
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	429a      	cmp	r2, r3
 8003780:	bf0c      	ite	eq
 8003782:	2301      	moveq	r3, #1
 8003784:	2300      	movne	r3, #0
 8003786:	b2db      	uxtb	r3, r3
 8003788:	461a      	mov	r2, r3
 800378a:	79fb      	ldrb	r3, [r7, #7]
 800378c:	429a      	cmp	r2, r3
 800378e:	d0b4      	beq.n	80036fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800379a:	b480      	push	{r7}
 800379c:	b095      	sub	sp, #84	; 0x54
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	330c      	adds	r3, #12
 80037a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	330c      	adds	r3, #12
 80037c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037c2:	643a      	str	r2, [r7, #64]	; 0x40
 80037c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037ca:	e841 2300 	strex	r3, r2, [r1]
 80037ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1e5      	bne.n	80037a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3314      	adds	r3, #20
 80037dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	e853 3f00 	ldrex	r3, [r3]
 80037e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3314      	adds	r3, #20
 80037f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037fe:	e841 2300 	strex	r3, r2, [r1]
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1e5      	bne.n	80037d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	2b01      	cmp	r3, #1
 8003810:	d119      	bne.n	8003846 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	330c      	adds	r3, #12
 8003818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	e853 3f00 	ldrex	r3, [r3]
 8003820:	60bb      	str	r3, [r7, #8]
   return(result);
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	f023 0310 	bic.w	r3, r3, #16
 8003828:	647b      	str	r3, [r7, #68]	; 0x44
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	330c      	adds	r3, #12
 8003830:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003832:	61ba      	str	r2, [r7, #24]
 8003834:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003836:	6979      	ldr	r1, [r7, #20]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	e841 2300 	strex	r3, r2, [r1]
 800383e:	613b      	str	r3, [r7, #16]
   return(result);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1e5      	bne.n	8003812 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003854:	bf00      	nop
 8003856:	3754      	adds	r7, #84	; 0x54
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f7ff ff1e 	bl	80036bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003880:	bf00      	nop
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b21      	cmp	r3, #33	; 0x21
 800389a:	d13e      	bne.n	800391a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a4:	d114      	bne.n	80038d0 <UART_Transmit_IT+0x48>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d110      	bne.n	80038d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	1c9a      	adds	r2, r3, #2
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	621a      	str	r2, [r3, #32]
 80038ce:	e008      	b.n	80038e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	1c59      	adds	r1, r3, #1
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6211      	str	r1, [r2, #32]
 80038da:	781a      	ldrb	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	4619      	mov	r1, r3
 80038f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10f      	bne.n	8003916 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003904:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003914:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	e000      	b.n	800391c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800391a:	2302      	movs	r3, #2
  }
}
 800391c:	4618      	mov	r0, r3
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800393e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff fea3 	bl	8003694 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08c      	sub	sp, #48	; 0x30
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b22      	cmp	r3, #34	; 0x22
 800396a:	f040 80ae 	bne.w	8003aca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003976:	d117      	bne.n	80039a8 <UART_Receive_IT+0x50>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d113      	bne.n	80039a8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003980:	2300      	movs	r3, #0
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003988:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	b29b      	uxth	r3, r3
 8003992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003996:	b29a      	uxth	r2, r3
 8003998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a0:	1c9a      	adds	r2, r3, #2
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	629a      	str	r2, [r3, #40]	; 0x28
 80039a6:	e026      	b.n	80039f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ba:	d007      	beq.n	80039cc <UART_Receive_IT+0x74>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10a      	bne.n	80039da <UART_Receive_IT+0x82>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d106      	bne.n	80039da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d6:	701a      	strb	r2, [r3, #0]
 80039d8:	e008      	b.n	80039ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	4619      	mov	r1, r3
 8003a04:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d15d      	bne.n	8003ac6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0220 	bic.w	r2, r2, #32
 8003a18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68da      	ldr	r2, [r3, #12]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	695a      	ldr	r2, [r3, #20]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0201 	bic.w	r2, r2, #1
 8003a38:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d135      	bne.n	8003abc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	e853 3f00 	ldrex	r3, [r3]
 8003a64:	613b      	str	r3, [r7, #16]
   return(result);
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f023 0310 	bic.w	r3, r3, #16
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	330c      	adds	r3, #12
 8003a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a76:	623a      	str	r2, [r7, #32]
 8003a78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	69f9      	ldr	r1, [r7, #28]
 8003a7c:	6a3a      	ldr	r2, [r7, #32]
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e5      	bne.n	8003a56 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2b10      	cmp	r3, #16
 8003a96:	d10a      	bne.n	8003aae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7ff fe0b 	bl	80036d0 <HAL_UARTEx_RxEventCallback>
 8003aba:	e002      	b.n	8003ac2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7ff fdf3 	bl	80036a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	e002      	b.n	8003acc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	e000      	b.n	8003acc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003aca:	2302      	movs	r3, #2
  }
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3730      	adds	r7, #48	; 0x30
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ad8:	b0c0      	sub	sp, #256	; 0x100
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af0:	68d9      	ldr	r1, [r3, #12]
 8003af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	ea40 0301 	orr.w	r3, r0, r1
 8003afc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b2c:	f021 010c 	bic.w	r1, r1, #12
 8003b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b3a:	430b      	orrs	r3, r1
 8003b3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b4e:	6999      	ldr	r1, [r3, #24]
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	ea40 0301 	orr.w	r3, r0, r1
 8003b5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	4b8f      	ldr	r3, [pc, #572]	; (8003da0 <UART_SetConfig+0x2cc>)
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d005      	beq.n	8003b74 <UART_SetConfig+0xa0>
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	4b8d      	ldr	r3, [pc, #564]	; (8003da4 <UART_SetConfig+0x2d0>)
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d104      	bne.n	8003b7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b74:	f7fe fa54 	bl	8002020 <HAL_RCC_GetPCLK2Freq>
 8003b78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b7c:	e003      	b.n	8003b86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b7e:	f7fe fa3b 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 8003b82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b90:	f040 810c 	bne.w	8003dac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ba2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ba6:	4622      	mov	r2, r4
 8003ba8:	462b      	mov	r3, r5
 8003baa:	1891      	adds	r1, r2, r2
 8003bac:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bae:	415b      	adcs	r3, r3
 8003bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	eb12 0801 	adds.w	r8, r2, r1
 8003bbc:	4629      	mov	r1, r5
 8003bbe:	eb43 0901 	adc.w	r9, r3, r1
 8003bc2:	f04f 0200 	mov.w	r2, #0
 8003bc6:	f04f 0300 	mov.w	r3, #0
 8003bca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bd6:	4690      	mov	r8, r2
 8003bd8:	4699      	mov	r9, r3
 8003bda:	4623      	mov	r3, r4
 8003bdc:	eb18 0303 	adds.w	r3, r8, r3
 8003be0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003be4:	462b      	mov	r3, r5
 8003be6:	eb49 0303 	adc.w	r3, r9, r3
 8003bea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003bfa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003bfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c02:	460b      	mov	r3, r1
 8003c04:	18db      	adds	r3, r3, r3
 8003c06:	653b      	str	r3, [r7, #80]	; 0x50
 8003c08:	4613      	mov	r3, r2
 8003c0a:	eb42 0303 	adc.w	r3, r2, r3
 8003c0e:	657b      	str	r3, [r7, #84]	; 0x54
 8003c10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c18:	f7fc fb3a 	bl	8000290 <__aeabi_uldivmod>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4b61      	ldr	r3, [pc, #388]	; (8003da8 <UART_SetConfig+0x2d4>)
 8003c22:	fba3 2302 	umull	r2, r3, r3, r2
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	011c      	lsls	r4, r3, #4
 8003c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c3c:	4642      	mov	r2, r8
 8003c3e:	464b      	mov	r3, r9
 8003c40:	1891      	adds	r1, r2, r2
 8003c42:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c44:	415b      	adcs	r3, r3
 8003c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c4c:	4641      	mov	r1, r8
 8003c4e:	eb12 0a01 	adds.w	sl, r2, r1
 8003c52:	4649      	mov	r1, r9
 8003c54:	eb43 0b01 	adc.w	fp, r3, r1
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	f04f 0300 	mov.w	r3, #0
 8003c60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c6c:	4692      	mov	sl, r2
 8003c6e:	469b      	mov	fp, r3
 8003c70:	4643      	mov	r3, r8
 8003c72:	eb1a 0303 	adds.w	r3, sl, r3
 8003c76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	eb4b 0303 	adc.w	r3, fp, r3
 8003c80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	18db      	adds	r3, r3, r3
 8003c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	eb42 0303 	adc.w	r3, r2, r3
 8003ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ca6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003caa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003cae:	f7fc faef 	bl	8000290 <__aeabi_uldivmod>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4611      	mov	r1, r2
 8003cb8:	4b3b      	ldr	r3, [pc, #236]	; (8003da8 <UART_SetConfig+0x2d4>)
 8003cba:	fba3 2301 	umull	r2, r3, r3, r1
 8003cbe:	095b      	lsrs	r3, r3, #5
 8003cc0:	2264      	movs	r2, #100	; 0x64
 8003cc2:	fb02 f303 	mul.w	r3, r2, r3
 8003cc6:	1acb      	subs	r3, r1, r3
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cce:	4b36      	ldr	r3, [pc, #216]	; (8003da8 <UART_SetConfig+0x2d4>)
 8003cd0:	fba3 2302 	umull	r2, r3, r3, r2
 8003cd4:	095b      	lsrs	r3, r3, #5
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cdc:	441c      	add	r4, r3
 8003cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ce8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003cec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003cf0:	4642      	mov	r2, r8
 8003cf2:	464b      	mov	r3, r9
 8003cf4:	1891      	adds	r1, r2, r2
 8003cf6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cf8:	415b      	adcs	r3, r3
 8003cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d00:	4641      	mov	r1, r8
 8003d02:	1851      	adds	r1, r2, r1
 8003d04:	6339      	str	r1, [r7, #48]	; 0x30
 8003d06:	4649      	mov	r1, r9
 8003d08:	414b      	adcs	r3, r1
 8003d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d18:	4659      	mov	r1, fp
 8003d1a:	00cb      	lsls	r3, r1, #3
 8003d1c:	4651      	mov	r1, sl
 8003d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d22:	4651      	mov	r1, sl
 8003d24:	00ca      	lsls	r2, r1, #3
 8003d26:	4610      	mov	r0, r2
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	4642      	mov	r2, r8
 8003d2e:	189b      	adds	r3, r3, r2
 8003d30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d34:	464b      	mov	r3, r9
 8003d36:	460a      	mov	r2, r1
 8003d38:	eb42 0303 	adc.w	r3, r2, r3
 8003d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d54:	460b      	mov	r3, r1
 8003d56:	18db      	adds	r3, r3, r3
 8003d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	eb42 0303 	adc.w	r3, r2, r3
 8003d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d6a:	f7fc fa91 	bl	8000290 <__aeabi_uldivmod>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <UART_SetConfig+0x2d4>)
 8003d74:	fba3 1302 	umull	r1, r3, r3, r2
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	2164      	movs	r1, #100	; 0x64
 8003d7c:	fb01 f303 	mul.w	r3, r1, r3
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	3332      	adds	r3, #50	; 0x32
 8003d86:	4a08      	ldr	r2, [pc, #32]	; (8003da8 <UART_SetConfig+0x2d4>)
 8003d88:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8c:	095b      	lsrs	r3, r3, #5
 8003d8e:	f003 0207 	and.w	r2, r3, #7
 8003d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4422      	add	r2, r4
 8003d9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d9c:	e106      	b.n	8003fac <UART_SetConfig+0x4d8>
 8003d9e:	bf00      	nop
 8003da0:	40011000 	.word	0x40011000
 8003da4:	40011400 	.word	0x40011400
 8003da8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003db0:	2200      	movs	r2, #0
 8003db2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003db6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003dba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003dbe:	4642      	mov	r2, r8
 8003dc0:	464b      	mov	r3, r9
 8003dc2:	1891      	adds	r1, r2, r2
 8003dc4:	6239      	str	r1, [r7, #32]
 8003dc6:	415b      	adcs	r3, r3
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dce:	4641      	mov	r1, r8
 8003dd0:	1854      	adds	r4, r2, r1
 8003dd2:	4649      	mov	r1, r9
 8003dd4:	eb43 0501 	adc.w	r5, r3, r1
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	00eb      	lsls	r3, r5, #3
 8003de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003de6:	00e2      	lsls	r2, r4, #3
 8003de8:	4614      	mov	r4, r2
 8003dea:	461d      	mov	r5, r3
 8003dec:	4643      	mov	r3, r8
 8003dee:	18e3      	adds	r3, r4, r3
 8003df0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003df4:	464b      	mov	r3, r9
 8003df6:	eb45 0303 	adc.w	r3, r5, r3
 8003dfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	008b      	lsls	r3, r1, #2
 8003e1e:	4621      	mov	r1, r4
 8003e20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e24:	4621      	mov	r1, r4
 8003e26:	008a      	lsls	r2, r1, #2
 8003e28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e2c:	f7fc fa30 	bl	8000290 <__aeabi_uldivmod>
 8003e30:	4602      	mov	r2, r0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4b60      	ldr	r3, [pc, #384]	; (8003fb8 <UART_SetConfig+0x4e4>)
 8003e36:	fba3 2302 	umull	r2, r3, r3, r2
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	011c      	lsls	r4, r3, #4
 8003e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e50:	4642      	mov	r2, r8
 8003e52:	464b      	mov	r3, r9
 8003e54:	1891      	adds	r1, r2, r2
 8003e56:	61b9      	str	r1, [r7, #24]
 8003e58:	415b      	adcs	r3, r3
 8003e5a:	61fb      	str	r3, [r7, #28]
 8003e5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e60:	4641      	mov	r1, r8
 8003e62:	1851      	adds	r1, r2, r1
 8003e64:	6139      	str	r1, [r7, #16]
 8003e66:	4649      	mov	r1, r9
 8003e68:	414b      	adcs	r3, r1
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e78:	4659      	mov	r1, fp
 8003e7a:	00cb      	lsls	r3, r1, #3
 8003e7c:	4651      	mov	r1, sl
 8003e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e82:	4651      	mov	r1, sl
 8003e84:	00ca      	lsls	r2, r1, #3
 8003e86:	4610      	mov	r0, r2
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	4642      	mov	r2, r8
 8003e8e:	189b      	adds	r3, r3, r2
 8003e90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e94:	464b      	mov	r3, r9
 8003e96:	460a      	mov	r2, r1
 8003e98:	eb42 0303 	adc.w	r3, r2, r3
 8003e9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003eaa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	f04f 0300 	mov.w	r3, #0
 8003eb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003eb8:	4649      	mov	r1, r9
 8003eba:	008b      	lsls	r3, r1, #2
 8003ebc:	4641      	mov	r1, r8
 8003ebe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ec2:	4641      	mov	r1, r8
 8003ec4:	008a      	lsls	r2, r1, #2
 8003ec6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003eca:	f7fc f9e1 	bl	8000290 <__aeabi_uldivmod>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4b38      	ldr	r3, [pc, #224]	; (8003fb8 <UART_SetConfig+0x4e4>)
 8003ed6:	fba3 2301 	umull	r2, r3, r3, r1
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	2264      	movs	r2, #100	; 0x64
 8003ede:	fb02 f303 	mul.w	r3, r2, r3
 8003ee2:	1acb      	subs	r3, r1, r3
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	3332      	adds	r3, #50	; 0x32
 8003ee8:	4a33      	ldr	r2, [pc, #204]	; (8003fb8 <UART_SetConfig+0x4e4>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ef4:	441c      	add	r4, r3
 8003ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003efa:	2200      	movs	r2, #0
 8003efc:	673b      	str	r3, [r7, #112]	; 0x70
 8003efe:	677a      	str	r2, [r7, #116]	; 0x74
 8003f00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f04:	4642      	mov	r2, r8
 8003f06:	464b      	mov	r3, r9
 8003f08:	1891      	adds	r1, r2, r2
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	415b      	adcs	r3, r3
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f14:	4641      	mov	r1, r8
 8003f16:	1851      	adds	r1, r2, r1
 8003f18:	6039      	str	r1, [r7, #0]
 8003f1a:	4649      	mov	r1, r9
 8003f1c:	414b      	adcs	r3, r1
 8003f1e:	607b      	str	r3, [r7, #4]
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	f04f 0300 	mov.w	r3, #0
 8003f28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f2c:	4659      	mov	r1, fp
 8003f2e:	00cb      	lsls	r3, r1, #3
 8003f30:	4651      	mov	r1, sl
 8003f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f36:	4651      	mov	r1, sl
 8003f38:	00ca      	lsls	r2, r1, #3
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4642      	mov	r2, r8
 8003f42:	189b      	adds	r3, r3, r2
 8003f44:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f46:	464b      	mov	r3, r9
 8003f48:	460a      	mov	r2, r1
 8003f4a:	eb42 0303 	adc.w	r3, r2, r3
 8003f4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	663b      	str	r3, [r7, #96]	; 0x60
 8003f5a:	667a      	str	r2, [r7, #100]	; 0x64
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f68:	4649      	mov	r1, r9
 8003f6a:	008b      	lsls	r3, r1, #2
 8003f6c:	4641      	mov	r1, r8
 8003f6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f72:	4641      	mov	r1, r8
 8003f74:	008a      	lsls	r2, r1, #2
 8003f76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f7a:	f7fc f989 	bl	8000290 <__aeabi_uldivmod>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4b0d      	ldr	r3, [pc, #52]	; (8003fb8 <UART_SetConfig+0x4e4>)
 8003f84:	fba3 1302 	umull	r1, r3, r3, r2
 8003f88:	095b      	lsrs	r3, r3, #5
 8003f8a:	2164      	movs	r1, #100	; 0x64
 8003f8c:	fb01 f303 	mul.w	r3, r1, r3
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	3332      	adds	r3, #50	; 0x32
 8003f96:	4a08      	ldr	r2, [pc, #32]	; (8003fb8 <UART_SetConfig+0x4e4>)
 8003f98:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9c:	095b      	lsrs	r3, r3, #5
 8003f9e:	f003 020f 	and.w	r2, r3, #15
 8003fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4422      	add	r2, r4
 8003faa:	609a      	str	r2, [r3, #8]
}
 8003fac:	bf00      	nop
 8003fae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fb8:	51eb851f 	.word	0x51eb851f

08003fbc <malloc>:
 8003fbc:	4b02      	ldr	r3, [pc, #8]	; (8003fc8 <malloc+0xc>)
 8003fbe:	4601      	mov	r1, r0
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	f000 b82b 	b.w	800401c <_malloc_r>
 8003fc6:	bf00      	nop
 8003fc8:	20000060 	.word	0x20000060

08003fcc <free>:
 8003fcc:	4b02      	ldr	r3, [pc, #8]	; (8003fd8 <free+0xc>)
 8003fce:	4601      	mov	r1, r0
 8003fd0:	6818      	ldr	r0, [r3, #0]
 8003fd2:	f000 b913 	b.w	80041fc <_free_r>
 8003fd6:	bf00      	nop
 8003fd8:	20000060 	.word	0x20000060

08003fdc <sbrk_aligned>:
 8003fdc:	b570      	push	{r4, r5, r6, lr}
 8003fde:	4e0e      	ldr	r6, [pc, #56]	; (8004018 <sbrk_aligned+0x3c>)
 8003fe0:	460c      	mov	r4, r1
 8003fe2:	6831      	ldr	r1, [r6, #0]
 8003fe4:	4605      	mov	r5, r0
 8003fe6:	b911      	cbnz	r1, 8003fee <sbrk_aligned+0x12>
 8003fe8:	f000 f8cc 	bl	8004184 <_sbrk_r>
 8003fec:	6030      	str	r0, [r6, #0]
 8003fee:	4621      	mov	r1, r4
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	f000 f8c7 	bl	8004184 <_sbrk_r>
 8003ff6:	1c43      	adds	r3, r0, #1
 8003ff8:	d00a      	beq.n	8004010 <sbrk_aligned+0x34>
 8003ffa:	1cc4      	adds	r4, r0, #3
 8003ffc:	f024 0403 	bic.w	r4, r4, #3
 8004000:	42a0      	cmp	r0, r4
 8004002:	d007      	beq.n	8004014 <sbrk_aligned+0x38>
 8004004:	1a21      	subs	r1, r4, r0
 8004006:	4628      	mov	r0, r5
 8004008:	f000 f8bc 	bl	8004184 <_sbrk_r>
 800400c:	3001      	adds	r0, #1
 800400e:	d101      	bne.n	8004014 <sbrk_aligned+0x38>
 8004010:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004014:	4620      	mov	r0, r4
 8004016:	bd70      	pop	{r4, r5, r6, pc}
 8004018:	200001b4 	.word	0x200001b4

0800401c <_malloc_r>:
 800401c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004020:	1ccd      	adds	r5, r1, #3
 8004022:	f025 0503 	bic.w	r5, r5, #3
 8004026:	3508      	adds	r5, #8
 8004028:	2d0c      	cmp	r5, #12
 800402a:	bf38      	it	cc
 800402c:	250c      	movcc	r5, #12
 800402e:	2d00      	cmp	r5, #0
 8004030:	4607      	mov	r7, r0
 8004032:	db01      	blt.n	8004038 <_malloc_r+0x1c>
 8004034:	42a9      	cmp	r1, r5
 8004036:	d905      	bls.n	8004044 <_malloc_r+0x28>
 8004038:	230c      	movs	r3, #12
 800403a:	603b      	str	r3, [r7, #0]
 800403c:	2600      	movs	r6, #0
 800403e:	4630      	mov	r0, r6
 8004040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004044:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004118 <_malloc_r+0xfc>
 8004048:	f000 f868 	bl	800411c <__malloc_lock>
 800404c:	f8d8 3000 	ldr.w	r3, [r8]
 8004050:	461c      	mov	r4, r3
 8004052:	bb5c      	cbnz	r4, 80040ac <_malloc_r+0x90>
 8004054:	4629      	mov	r1, r5
 8004056:	4638      	mov	r0, r7
 8004058:	f7ff ffc0 	bl	8003fdc <sbrk_aligned>
 800405c:	1c43      	adds	r3, r0, #1
 800405e:	4604      	mov	r4, r0
 8004060:	d155      	bne.n	800410e <_malloc_r+0xf2>
 8004062:	f8d8 4000 	ldr.w	r4, [r8]
 8004066:	4626      	mov	r6, r4
 8004068:	2e00      	cmp	r6, #0
 800406a:	d145      	bne.n	80040f8 <_malloc_r+0xdc>
 800406c:	2c00      	cmp	r4, #0
 800406e:	d048      	beq.n	8004102 <_malloc_r+0xe6>
 8004070:	6823      	ldr	r3, [r4, #0]
 8004072:	4631      	mov	r1, r6
 8004074:	4638      	mov	r0, r7
 8004076:	eb04 0903 	add.w	r9, r4, r3
 800407a:	f000 f883 	bl	8004184 <_sbrk_r>
 800407e:	4581      	cmp	r9, r0
 8004080:	d13f      	bne.n	8004102 <_malloc_r+0xe6>
 8004082:	6821      	ldr	r1, [r4, #0]
 8004084:	1a6d      	subs	r5, r5, r1
 8004086:	4629      	mov	r1, r5
 8004088:	4638      	mov	r0, r7
 800408a:	f7ff ffa7 	bl	8003fdc <sbrk_aligned>
 800408e:	3001      	adds	r0, #1
 8004090:	d037      	beq.n	8004102 <_malloc_r+0xe6>
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	442b      	add	r3, r5
 8004096:	6023      	str	r3, [r4, #0]
 8004098:	f8d8 3000 	ldr.w	r3, [r8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d038      	beq.n	8004112 <_malloc_r+0xf6>
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	42a2      	cmp	r2, r4
 80040a4:	d12b      	bne.n	80040fe <_malloc_r+0xe2>
 80040a6:	2200      	movs	r2, #0
 80040a8:	605a      	str	r2, [r3, #4]
 80040aa:	e00f      	b.n	80040cc <_malloc_r+0xb0>
 80040ac:	6822      	ldr	r2, [r4, #0]
 80040ae:	1b52      	subs	r2, r2, r5
 80040b0:	d41f      	bmi.n	80040f2 <_malloc_r+0xd6>
 80040b2:	2a0b      	cmp	r2, #11
 80040b4:	d917      	bls.n	80040e6 <_malloc_r+0xca>
 80040b6:	1961      	adds	r1, r4, r5
 80040b8:	42a3      	cmp	r3, r4
 80040ba:	6025      	str	r5, [r4, #0]
 80040bc:	bf18      	it	ne
 80040be:	6059      	strne	r1, [r3, #4]
 80040c0:	6863      	ldr	r3, [r4, #4]
 80040c2:	bf08      	it	eq
 80040c4:	f8c8 1000 	streq.w	r1, [r8]
 80040c8:	5162      	str	r2, [r4, r5]
 80040ca:	604b      	str	r3, [r1, #4]
 80040cc:	4638      	mov	r0, r7
 80040ce:	f104 060b 	add.w	r6, r4, #11
 80040d2:	f000 f829 	bl	8004128 <__malloc_unlock>
 80040d6:	f026 0607 	bic.w	r6, r6, #7
 80040da:	1d23      	adds	r3, r4, #4
 80040dc:	1af2      	subs	r2, r6, r3
 80040de:	d0ae      	beq.n	800403e <_malloc_r+0x22>
 80040e0:	1b9b      	subs	r3, r3, r6
 80040e2:	50a3      	str	r3, [r4, r2]
 80040e4:	e7ab      	b.n	800403e <_malloc_r+0x22>
 80040e6:	42a3      	cmp	r3, r4
 80040e8:	6862      	ldr	r2, [r4, #4]
 80040ea:	d1dd      	bne.n	80040a8 <_malloc_r+0x8c>
 80040ec:	f8c8 2000 	str.w	r2, [r8]
 80040f0:	e7ec      	b.n	80040cc <_malloc_r+0xb0>
 80040f2:	4623      	mov	r3, r4
 80040f4:	6864      	ldr	r4, [r4, #4]
 80040f6:	e7ac      	b.n	8004052 <_malloc_r+0x36>
 80040f8:	4634      	mov	r4, r6
 80040fa:	6876      	ldr	r6, [r6, #4]
 80040fc:	e7b4      	b.n	8004068 <_malloc_r+0x4c>
 80040fe:	4613      	mov	r3, r2
 8004100:	e7cc      	b.n	800409c <_malloc_r+0x80>
 8004102:	230c      	movs	r3, #12
 8004104:	603b      	str	r3, [r7, #0]
 8004106:	4638      	mov	r0, r7
 8004108:	f000 f80e 	bl	8004128 <__malloc_unlock>
 800410c:	e797      	b.n	800403e <_malloc_r+0x22>
 800410e:	6025      	str	r5, [r4, #0]
 8004110:	e7dc      	b.n	80040cc <_malloc_r+0xb0>
 8004112:	605b      	str	r3, [r3, #4]
 8004114:	deff      	udf	#255	; 0xff
 8004116:	bf00      	nop
 8004118:	200001b0 	.word	0x200001b0

0800411c <__malloc_lock>:
 800411c:	4801      	ldr	r0, [pc, #4]	; (8004124 <__malloc_lock+0x8>)
 800411e:	f000 b86b 	b.w	80041f8 <__retarget_lock_acquire_recursive>
 8004122:	bf00      	nop
 8004124:	200002f0 	.word	0x200002f0

08004128 <__malloc_unlock>:
 8004128:	4801      	ldr	r0, [pc, #4]	; (8004130 <__malloc_unlock+0x8>)
 800412a:	f000 b866 	b.w	80041fa <__retarget_lock_release_recursive>
 800412e:	bf00      	nop
 8004130:	200002f0 	.word	0x200002f0

08004134 <siprintf>:
 8004134:	b40e      	push	{r1, r2, r3}
 8004136:	b500      	push	{lr}
 8004138:	b09c      	sub	sp, #112	; 0x70
 800413a:	ab1d      	add	r3, sp, #116	; 0x74
 800413c:	9002      	str	r0, [sp, #8]
 800413e:	9006      	str	r0, [sp, #24]
 8004140:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004144:	4809      	ldr	r0, [pc, #36]	; (800416c <siprintf+0x38>)
 8004146:	9107      	str	r1, [sp, #28]
 8004148:	9104      	str	r1, [sp, #16]
 800414a:	4909      	ldr	r1, [pc, #36]	; (8004170 <siprintf+0x3c>)
 800414c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004150:	9105      	str	r1, [sp, #20]
 8004152:	6800      	ldr	r0, [r0, #0]
 8004154:	9301      	str	r3, [sp, #4]
 8004156:	a902      	add	r1, sp, #8
 8004158:	f000 f8f6 	bl	8004348 <_svfiprintf_r>
 800415c:	9b02      	ldr	r3, [sp, #8]
 800415e:	2200      	movs	r2, #0
 8004160:	701a      	strb	r2, [r3, #0]
 8004162:	b01c      	add	sp, #112	; 0x70
 8004164:	f85d eb04 	ldr.w	lr, [sp], #4
 8004168:	b003      	add	sp, #12
 800416a:	4770      	bx	lr
 800416c:	20000060 	.word	0x20000060
 8004170:	ffff0208 	.word	0xffff0208

08004174 <memset>:
 8004174:	4402      	add	r2, r0
 8004176:	4603      	mov	r3, r0
 8004178:	4293      	cmp	r3, r2
 800417a:	d100      	bne.n	800417e <memset+0xa>
 800417c:	4770      	bx	lr
 800417e:	f803 1b01 	strb.w	r1, [r3], #1
 8004182:	e7f9      	b.n	8004178 <memset+0x4>

08004184 <_sbrk_r>:
 8004184:	b538      	push	{r3, r4, r5, lr}
 8004186:	4d06      	ldr	r5, [pc, #24]	; (80041a0 <_sbrk_r+0x1c>)
 8004188:	2300      	movs	r3, #0
 800418a:	4604      	mov	r4, r0
 800418c:	4608      	mov	r0, r1
 800418e:	602b      	str	r3, [r5, #0]
 8004190:	f7fc fe46 	bl	8000e20 <_sbrk>
 8004194:	1c43      	adds	r3, r0, #1
 8004196:	d102      	bne.n	800419e <_sbrk_r+0x1a>
 8004198:	682b      	ldr	r3, [r5, #0]
 800419a:	b103      	cbz	r3, 800419e <_sbrk_r+0x1a>
 800419c:	6023      	str	r3, [r4, #0]
 800419e:	bd38      	pop	{r3, r4, r5, pc}
 80041a0:	200002f4 	.word	0x200002f4

080041a4 <__errno>:
 80041a4:	4b01      	ldr	r3, [pc, #4]	; (80041ac <__errno+0x8>)
 80041a6:	6818      	ldr	r0, [r3, #0]
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	20000060 	.word	0x20000060

080041b0 <__libc_init_array>:
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	4d0d      	ldr	r5, [pc, #52]	; (80041e8 <__libc_init_array+0x38>)
 80041b4:	4c0d      	ldr	r4, [pc, #52]	; (80041ec <__libc_init_array+0x3c>)
 80041b6:	1b64      	subs	r4, r4, r5
 80041b8:	10a4      	asrs	r4, r4, #2
 80041ba:	2600      	movs	r6, #0
 80041bc:	42a6      	cmp	r6, r4
 80041be:	d109      	bne.n	80041d4 <__libc_init_array+0x24>
 80041c0:	4d0b      	ldr	r5, [pc, #44]	; (80041f0 <__libc_init_array+0x40>)
 80041c2:	4c0c      	ldr	r4, [pc, #48]	; (80041f4 <__libc_init_array+0x44>)
 80041c4:	f000 fbae 	bl	8004924 <_init>
 80041c8:	1b64      	subs	r4, r4, r5
 80041ca:	10a4      	asrs	r4, r4, #2
 80041cc:	2600      	movs	r6, #0
 80041ce:	42a6      	cmp	r6, r4
 80041d0:	d105      	bne.n	80041de <__libc_init_array+0x2e>
 80041d2:	bd70      	pop	{r4, r5, r6, pc}
 80041d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d8:	4798      	blx	r3
 80041da:	3601      	adds	r6, #1
 80041dc:	e7ee      	b.n	80041bc <__libc_init_array+0xc>
 80041de:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e2:	4798      	blx	r3
 80041e4:	3601      	adds	r6, #1
 80041e6:	e7f2      	b.n	80041ce <__libc_init_array+0x1e>
 80041e8:	080049c4 	.word	0x080049c4
 80041ec:	080049c4 	.word	0x080049c4
 80041f0:	080049c4 	.word	0x080049c4
 80041f4:	080049c8 	.word	0x080049c8

080041f8 <__retarget_lock_acquire_recursive>:
 80041f8:	4770      	bx	lr

080041fa <__retarget_lock_release_recursive>:
 80041fa:	4770      	bx	lr

080041fc <_free_r>:
 80041fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041fe:	2900      	cmp	r1, #0
 8004200:	d044      	beq.n	800428c <_free_r+0x90>
 8004202:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004206:	9001      	str	r0, [sp, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	f1a1 0404 	sub.w	r4, r1, #4
 800420e:	bfb8      	it	lt
 8004210:	18e4      	addlt	r4, r4, r3
 8004212:	f7ff ff83 	bl	800411c <__malloc_lock>
 8004216:	4a1e      	ldr	r2, [pc, #120]	; (8004290 <_free_r+0x94>)
 8004218:	9801      	ldr	r0, [sp, #4]
 800421a:	6813      	ldr	r3, [r2, #0]
 800421c:	b933      	cbnz	r3, 800422c <_free_r+0x30>
 800421e:	6063      	str	r3, [r4, #4]
 8004220:	6014      	str	r4, [r2, #0]
 8004222:	b003      	add	sp, #12
 8004224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004228:	f7ff bf7e 	b.w	8004128 <__malloc_unlock>
 800422c:	42a3      	cmp	r3, r4
 800422e:	d908      	bls.n	8004242 <_free_r+0x46>
 8004230:	6825      	ldr	r5, [r4, #0]
 8004232:	1961      	adds	r1, r4, r5
 8004234:	428b      	cmp	r3, r1
 8004236:	bf01      	itttt	eq
 8004238:	6819      	ldreq	r1, [r3, #0]
 800423a:	685b      	ldreq	r3, [r3, #4]
 800423c:	1949      	addeq	r1, r1, r5
 800423e:	6021      	streq	r1, [r4, #0]
 8004240:	e7ed      	b.n	800421e <_free_r+0x22>
 8004242:	461a      	mov	r2, r3
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	b10b      	cbz	r3, 800424c <_free_r+0x50>
 8004248:	42a3      	cmp	r3, r4
 800424a:	d9fa      	bls.n	8004242 <_free_r+0x46>
 800424c:	6811      	ldr	r1, [r2, #0]
 800424e:	1855      	adds	r5, r2, r1
 8004250:	42a5      	cmp	r5, r4
 8004252:	d10b      	bne.n	800426c <_free_r+0x70>
 8004254:	6824      	ldr	r4, [r4, #0]
 8004256:	4421      	add	r1, r4
 8004258:	1854      	adds	r4, r2, r1
 800425a:	42a3      	cmp	r3, r4
 800425c:	6011      	str	r1, [r2, #0]
 800425e:	d1e0      	bne.n	8004222 <_free_r+0x26>
 8004260:	681c      	ldr	r4, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	6053      	str	r3, [r2, #4]
 8004266:	440c      	add	r4, r1
 8004268:	6014      	str	r4, [r2, #0]
 800426a:	e7da      	b.n	8004222 <_free_r+0x26>
 800426c:	d902      	bls.n	8004274 <_free_r+0x78>
 800426e:	230c      	movs	r3, #12
 8004270:	6003      	str	r3, [r0, #0]
 8004272:	e7d6      	b.n	8004222 <_free_r+0x26>
 8004274:	6825      	ldr	r5, [r4, #0]
 8004276:	1961      	adds	r1, r4, r5
 8004278:	428b      	cmp	r3, r1
 800427a:	bf04      	itt	eq
 800427c:	6819      	ldreq	r1, [r3, #0]
 800427e:	685b      	ldreq	r3, [r3, #4]
 8004280:	6063      	str	r3, [r4, #4]
 8004282:	bf04      	itt	eq
 8004284:	1949      	addeq	r1, r1, r5
 8004286:	6021      	streq	r1, [r4, #0]
 8004288:	6054      	str	r4, [r2, #4]
 800428a:	e7ca      	b.n	8004222 <_free_r+0x26>
 800428c:	b003      	add	sp, #12
 800428e:	bd30      	pop	{r4, r5, pc}
 8004290:	200001b0 	.word	0x200001b0

08004294 <__ssputs_r>:
 8004294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004298:	688e      	ldr	r6, [r1, #8]
 800429a:	461f      	mov	r7, r3
 800429c:	42be      	cmp	r6, r7
 800429e:	680b      	ldr	r3, [r1, #0]
 80042a0:	4682      	mov	sl, r0
 80042a2:	460c      	mov	r4, r1
 80042a4:	4690      	mov	r8, r2
 80042a6:	d82c      	bhi.n	8004302 <__ssputs_r+0x6e>
 80042a8:	898a      	ldrh	r2, [r1, #12]
 80042aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042ae:	d026      	beq.n	80042fe <__ssputs_r+0x6a>
 80042b0:	6965      	ldr	r5, [r4, #20]
 80042b2:	6909      	ldr	r1, [r1, #16]
 80042b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042b8:	eba3 0901 	sub.w	r9, r3, r1
 80042bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042c0:	1c7b      	adds	r3, r7, #1
 80042c2:	444b      	add	r3, r9
 80042c4:	106d      	asrs	r5, r5, #1
 80042c6:	429d      	cmp	r5, r3
 80042c8:	bf38      	it	cc
 80042ca:	461d      	movcc	r5, r3
 80042cc:	0553      	lsls	r3, r2, #21
 80042ce:	d527      	bpl.n	8004320 <__ssputs_r+0x8c>
 80042d0:	4629      	mov	r1, r5
 80042d2:	f7ff fea3 	bl	800401c <_malloc_r>
 80042d6:	4606      	mov	r6, r0
 80042d8:	b360      	cbz	r0, 8004334 <__ssputs_r+0xa0>
 80042da:	6921      	ldr	r1, [r4, #16]
 80042dc:	464a      	mov	r2, r9
 80042de:	f000 fb0a 	bl	80048f6 <memcpy>
 80042e2:	89a3      	ldrh	r3, [r4, #12]
 80042e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ec:	81a3      	strh	r3, [r4, #12]
 80042ee:	6126      	str	r6, [r4, #16]
 80042f0:	6165      	str	r5, [r4, #20]
 80042f2:	444e      	add	r6, r9
 80042f4:	eba5 0509 	sub.w	r5, r5, r9
 80042f8:	6026      	str	r6, [r4, #0]
 80042fa:	60a5      	str	r5, [r4, #8]
 80042fc:	463e      	mov	r6, r7
 80042fe:	42be      	cmp	r6, r7
 8004300:	d900      	bls.n	8004304 <__ssputs_r+0x70>
 8004302:	463e      	mov	r6, r7
 8004304:	6820      	ldr	r0, [r4, #0]
 8004306:	4632      	mov	r2, r6
 8004308:	4641      	mov	r1, r8
 800430a:	f000 fada 	bl	80048c2 <memmove>
 800430e:	68a3      	ldr	r3, [r4, #8]
 8004310:	1b9b      	subs	r3, r3, r6
 8004312:	60a3      	str	r3, [r4, #8]
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	4433      	add	r3, r6
 8004318:	6023      	str	r3, [r4, #0]
 800431a:	2000      	movs	r0, #0
 800431c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004320:	462a      	mov	r2, r5
 8004322:	f000 fa9f 	bl	8004864 <_realloc_r>
 8004326:	4606      	mov	r6, r0
 8004328:	2800      	cmp	r0, #0
 800432a:	d1e0      	bne.n	80042ee <__ssputs_r+0x5a>
 800432c:	6921      	ldr	r1, [r4, #16]
 800432e:	4650      	mov	r0, sl
 8004330:	f7ff ff64 	bl	80041fc <_free_r>
 8004334:	230c      	movs	r3, #12
 8004336:	f8ca 3000 	str.w	r3, [sl]
 800433a:	89a3      	ldrh	r3, [r4, #12]
 800433c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004340:	81a3      	strh	r3, [r4, #12]
 8004342:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004346:	e7e9      	b.n	800431c <__ssputs_r+0x88>

08004348 <_svfiprintf_r>:
 8004348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800434c:	4698      	mov	r8, r3
 800434e:	898b      	ldrh	r3, [r1, #12]
 8004350:	061b      	lsls	r3, r3, #24
 8004352:	b09d      	sub	sp, #116	; 0x74
 8004354:	4607      	mov	r7, r0
 8004356:	460d      	mov	r5, r1
 8004358:	4614      	mov	r4, r2
 800435a:	d50e      	bpl.n	800437a <_svfiprintf_r+0x32>
 800435c:	690b      	ldr	r3, [r1, #16]
 800435e:	b963      	cbnz	r3, 800437a <_svfiprintf_r+0x32>
 8004360:	2140      	movs	r1, #64	; 0x40
 8004362:	f7ff fe5b 	bl	800401c <_malloc_r>
 8004366:	6028      	str	r0, [r5, #0]
 8004368:	6128      	str	r0, [r5, #16]
 800436a:	b920      	cbnz	r0, 8004376 <_svfiprintf_r+0x2e>
 800436c:	230c      	movs	r3, #12
 800436e:	603b      	str	r3, [r7, #0]
 8004370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004374:	e0d0      	b.n	8004518 <_svfiprintf_r+0x1d0>
 8004376:	2340      	movs	r3, #64	; 0x40
 8004378:	616b      	str	r3, [r5, #20]
 800437a:	2300      	movs	r3, #0
 800437c:	9309      	str	r3, [sp, #36]	; 0x24
 800437e:	2320      	movs	r3, #32
 8004380:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004384:	f8cd 800c 	str.w	r8, [sp, #12]
 8004388:	2330      	movs	r3, #48	; 0x30
 800438a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004530 <_svfiprintf_r+0x1e8>
 800438e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004392:	f04f 0901 	mov.w	r9, #1
 8004396:	4623      	mov	r3, r4
 8004398:	469a      	mov	sl, r3
 800439a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800439e:	b10a      	cbz	r2, 80043a4 <_svfiprintf_r+0x5c>
 80043a0:	2a25      	cmp	r2, #37	; 0x25
 80043a2:	d1f9      	bne.n	8004398 <_svfiprintf_r+0x50>
 80043a4:	ebba 0b04 	subs.w	fp, sl, r4
 80043a8:	d00b      	beq.n	80043c2 <_svfiprintf_r+0x7a>
 80043aa:	465b      	mov	r3, fp
 80043ac:	4622      	mov	r2, r4
 80043ae:	4629      	mov	r1, r5
 80043b0:	4638      	mov	r0, r7
 80043b2:	f7ff ff6f 	bl	8004294 <__ssputs_r>
 80043b6:	3001      	adds	r0, #1
 80043b8:	f000 80a9 	beq.w	800450e <_svfiprintf_r+0x1c6>
 80043bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043be:	445a      	add	r2, fp
 80043c0:	9209      	str	r2, [sp, #36]	; 0x24
 80043c2:	f89a 3000 	ldrb.w	r3, [sl]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 80a1 	beq.w	800450e <_svfiprintf_r+0x1c6>
 80043cc:	2300      	movs	r3, #0
 80043ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043d6:	f10a 0a01 	add.w	sl, sl, #1
 80043da:	9304      	str	r3, [sp, #16]
 80043dc:	9307      	str	r3, [sp, #28]
 80043de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043e2:	931a      	str	r3, [sp, #104]	; 0x68
 80043e4:	4654      	mov	r4, sl
 80043e6:	2205      	movs	r2, #5
 80043e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043ec:	4850      	ldr	r0, [pc, #320]	; (8004530 <_svfiprintf_r+0x1e8>)
 80043ee:	f7fb feff 	bl	80001f0 <memchr>
 80043f2:	9a04      	ldr	r2, [sp, #16]
 80043f4:	b9d8      	cbnz	r0, 800442e <_svfiprintf_r+0xe6>
 80043f6:	06d0      	lsls	r0, r2, #27
 80043f8:	bf44      	itt	mi
 80043fa:	2320      	movmi	r3, #32
 80043fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004400:	0711      	lsls	r1, r2, #28
 8004402:	bf44      	itt	mi
 8004404:	232b      	movmi	r3, #43	; 0x2b
 8004406:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800440a:	f89a 3000 	ldrb.w	r3, [sl]
 800440e:	2b2a      	cmp	r3, #42	; 0x2a
 8004410:	d015      	beq.n	800443e <_svfiprintf_r+0xf6>
 8004412:	9a07      	ldr	r2, [sp, #28]
 8004414:	4654      	mov	r4, sl
 8004416:	2000      	movs	r0, #0
 8004418:	f04f 0c0a 	mov.w	ip, #10
 800441c:	4621      	mov	r1, r4
 800441e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004422:	3b30      	subs	r3, #48	; 0x30
 8004424:	2b09      	cmp	r3, #9
 8004426:	d94d      	bls.n	80044c4 <_svfiprintf_r+0x17c>
 8004428:	b1b0      	cbz	r0, 8004458 <_svfiprintf_r+0x110>
 800442a:	9207      	str	r2, [sp, #28]
 800442c:	e014      	b.n	8004458 <_svfiprintf_r+0x110>
 800442e:	eba0 0308 	sub.w	r3, r0, r8
 8004432:	fa09 f303 	lsl.w	r3, r9, r3
 8004436:	4313      	orrs	r3, r2
 8004438:	9304      	str	r3, [sp, #16]
 800443a:	46a2      	mov	sl, r4
 800443c:	e7d2      	b.n	80043e4 <_svfiprintf_r+0x9c>
 800443e:	9b03      	ldr	r3, [sp, #12]
 8004440:	1d19      	adds	r1, r3, #4
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	9103      	str	r1, [sp, #12]
 8004446:	2b00      	cmp	r3, #0
 8004448:	bfbb      	ittet	lt
 800444a:	425b      	neglt	r3, r3
 800444c:	f042 0202 	orrlt.w	r2, r2, #2
 8004450:	9307      	strge	r3, [sp, #28]
 8004452:	9307      	strlt	r3, [sp, #28]
 8004454:	bfb8      	it	lt
 8004456:	9204      	strlt	r2, [sp, #16]
 8004458:	7823      	ldrb	r3, [r4, #0]
 800445a:	2b2e      	cmp	r3, #46	; 0x2e
 800445c:	d10c      	bne.n	8004478 <_svfiprintf_r+0x130>
 800445e:	7863      	ldrb	r3, [r4, #1]
 8004460:	2b2a      	cmp	r3, #42	; 0x2a
 8004462:	d134      	bne.n	80044ce <_svfiprintf_r+0x186>
 8004464:	9b03      	ldr	r3, [sp, #12]
 8004466:	1d1a      	adds	r2, r3, #4
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	9203      	str	r2, [sp, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	bfb8      	it	lt
 8004470:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004474:	3402      	adds	r4, #2
 8004476:	9305      	str	r3, [sp, #20]
 8004478:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004540 <_svfiprintf_r+0x1f8>
 800447c:	7821      	ldrb	r1, [r4, #0]
 800447e:	2203      	movs	r2, #3
 8004480:	4650      	mov	r0, sl
 8004482:	f7fb feb5 	bl	80001f0 <memchr>
 8004486:	b138      	cbz	r0, 8004498 <_svfiprintf_r+0x150>
 8004488:	9b04      	ldr	r3, [sp, #16]
 800448a:	eba0 000a 	sub.w	r0, r0, sl
 800448e:	2240      	movs	r2, #64	; 0x40
 8004490:	4082      	lsls	r2, r0
 8004492:	4313      	orrs	r3, r2
 8004494:	3401      	adds	r4, #1
 8004496:	9304      	str	r3, [sp, #16]
 8004498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800449c:	4825      	ldr	r0, [pc, #148]	; (8004534 <_svfiprintf_r+0x1ec>)
 800449e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044a2:	2206      	movs	r2, #6
 80044a4:	f7fb fea4 	bl	80001f0 <memchr>
 80044a8:	2800      	cmp	r0, #0
 80044aa:	d038      	beq.n	800451e <_svfiprintf_r+0x1d6>
 80044ac:	4b22      	ldr	r3, [pc, #136]	; (8004538 <_svfiprintf_r+0x1f0>)
 80044ae:	bb1b      	cbnz	r3, 80044f8 <_svfiprintf_r+0x1b0>
 80044b0:	9b03      	ldr	r3, [sp, #12]
 80044b2:	3307      	adds	r3, #7
 80044b4:	f023 0307 	bic.w	r3, r3, #7
 80044b8:	3308      	adds	r3, #8
 80044ba:	9303      	str	r3, [sp, #12]
 80044bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044be:	4433      	add	r3, r6
 80044c0:	9309      	str	r3, [sp, #36]	; 0x24
 80044c2:	e768      	b.n	8004396 <_svfiprintf_r+0x4e>
 80044c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80044c8:	460c      	mov	r4, r1
 80044ca:	2001      	movs	r0, #1
 80044cc:	e7a6      	b.n	800441c <_svfiprintf_r+0xd4>
 80044ce:	2300      	movs	r3, #0
 80044d0:	3401      	adds	r4, #1
 80044d2:	9305      	str	r3, [sp, #20]
 80044d4:	4619      	mov	r1, r3
 80044d6:	f04f 0c0a 	mov.w	ip, #10
 80044da:	4620      	mov	r0, r4
 80044dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044e0:	3a30      	subs	r2, #48	; 0x30
 80044e2:	2a09      	cmp	r2, #9
 80044e4:	d903      	bls.n	80044ee <_svfiprintf_r+0x1a6>
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0c6      	beq.n	8004478 <_svfiprintf_r+0x130>
 80044ea:	9105      	str	r1, [sp, #20]
 80044ec:	e7c4      	b.n	8004478 <_svfiprintf_r+0x130>
 80044ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80044f2:	4604      	mov	r4, r0
 80044f4:	2301      	movs	r3, #1
 80044f6:	e7f0      	b.n	80044da <_svfiprintf_r+0x192>
 80044f8:	ab03      	add	r3, sp, #12
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	462a      	mov	r2, r5
 80044fe:	4b0f      	ldr	r3, [pc, #60]	; (800453c <_svfiprintf_r+0x1f4>)
 8004500:	a904      	add	r1, sp, #16
 8004502:	4638      	mov	r0, r7
 8004504:	f3af 8000 	nop.w
 8004508:	1c42      	adds	r2, r0, #1
 800450a:	4606      	mov	r6, r0
 800450c:	d1d6      	bne.n	80044bc <_svfiprintf_r+0x174>
 800450e:	89ab      	ldrh	r3, [r5, #12]
 8004510:	065b      	lsls	r3, r3, #25
 8004512:	f53f af2d 	bmi.w	8004370 <_svfiprintf_r+0x28>
 8004516:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004518:	b01d      	add	sp, #116	; 0x74
 800451a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800451e:	ab03      	add	r3, sp, #12
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	462a      	mov	r2, r5
 8004524:	4b05      	ldr	r3, [pc, #20]	; (800453c <_svfiprintf_r+0x1f4>)
 8004526:	a904      	add	r1, sp, #16
 8004528:	4638      	mov	r0, r7
 800452a:	f000 f879 	bl	8004620 <_printf_i>
 800452e:	e7eb      	b.n	8004508 <_svfiprintf_r+0x1c0>
 8004530:	08004988 	.word	0x08004988
 8004534:	08004992 	.word	0x08004992
 8004538:	00000000 	.word	0x00000000
 800453c:	08004295 	.word	0x08004295
 8004540:	0800498e 	.word	0x0800498e

08004544 <_printf_common>:
 8004544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004548:	4616      	mov	r6, r2
 800454a:	4699      	mov	r9, r3
 800454c:	688a      	ldr	r2, [r1, #8]
 800454e:	690b      	ldr	r3, [r1, #16]
 8004550:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004554:	4293      	cmp	r3, r2
 8004556:	bfb8      	it	lt
 8004558:	4613      	movlt	r3, r2
 800455a:	6033      	str	r3, [r6, #0]
 800455c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004560:	4607      	mov	r7, r0
 8004562:	460c      	mov	r4, r1
 8004564:	b10a      	cbz	r2, 800456a <_printf_common+0x26>
 8004566:	3301      	adds	r3, #1
 8004568:	6033      	str	r3, [r6, #0]
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	0699      	lsls	r1, r3, #26
 800456e:	bf42      	ittt	mi
 8004570:	6833      	ldrmi	r3, [r6, #0]
 8004572:	3302      	addmi	r3, #2
 8004574:	6033      	strmi	r3, [r6, #0]
 8004576:	6825      	ldr	r5, [r4, #0]
 8004578:	f015 0506 	ands.w	r5, r5, #6
 800457c:	d106      	bne.n	800458c <_printf_common+0x48>
 800457e:	f104 0a19 	add.w	sl, r4, #25
 8004582:	68e3      	ldr	r3, [r4, #12]
 8004584:	6832      	ldr	r2, [r6, #0]
 8004586:	1a9b      	subs	r3, r3, r2
 8004588:	42ab      	cmp	r3, r5
 800458a:	dc26      	bgt.n	80045da <_printf_common+0x96>
 800458c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004590:	1e13      	subs	r3, r2, #0
 8004592:	6822      	ldr	r2, [r4, #0]
 8004594:	bf18      	it	ne
 8004596:	2301      	movne	r3, #1
 8004598:	0692      	lsls	r2, r2, #26
 800459a:	d42b      	bmi.n	80045f4 <_printf_common+0xb0>
 800459c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045a0:	4649      	mov	r1, r9
 80045a2:	4638      	mov	r0, r7
 80045a4:	47c0      	blx	r8
 80045a6:	3001      	adds	r0, #1
 80045a8:	d01e      	beq.n	80045e8 <_printf_common+0xa4>
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	6922      	ldr	r2, [r4, #16]
 80045ae:	f003 0306 	and.w	r3, r3, #6
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	bf02      	ittt	eq
 80045b6:	68e5      	ldreq	r5, [r4, #12]
 80045b8:	6833      	ldreq	r3, [r6, #0]
 80045ba:	1aed      	subeq	r5, r5, r3
 80045bc:	68a3      	ldr	r3, [r4, #8]
 80045be:	bf0c      	ite	eq
 80045c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045c4:	2500      	movne	r5, #0
 80045c6:	4293      	cmp	r3, r2
 80045c8:	bfc4      	itt	gt
 80045ca:	1a9b      	subgt	r3, r3, r2
 80045cc:	18ed      	addgt	r5, r5, r3
 80045ce:	2600      	movs	r6, #0
 80045d0:	341a      	adds	r4, #26
 80045d2:	42b5      	cmp	r5, r6
 80045d4:	d11a      	bne.n	800460c <_printf_common+0xc8>
 80045d6:	2000      	movs	r0, #0
 80045d8:	e008      	b.n	80045ec <_printf_common+0xa8>
 80045da:	2301      	movs	r3, #1
 80045dc:	4652      	mov	r2, sl
 80045de:	4649      	mov	r1, r9
 80045e0:	4638      	mov	r0, r7
 80045e2:	47c0      	blx	r8
 80045e4:	3001      	adds	r0, #1
 80045e6:	d103      	bne.n	80045f0 <_printf_common+0xac>
 80045e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045f0:	3501      	adds	r5, #1
 80045f2:	e7c6      	b.n	8004582 <_printf_common+0x3e>
 80045f4:	18e1      	adds	r1, r4, r3
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	2030      	movs	r0, #48	; 0x30
 80045fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045fe:	4422      	add	r2, r4
 8004600:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004604:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004608:	3302      	adds	r3, #2
 800460a:	e7c7      	b.n	800459c <_printf_common+0x58>
 800460c:	2301      	movs	r3, #1
 800460e:	4622      	mov	r2, r4
 8004610:	4649      	mov	r1, r9
 8004612:	4638      	mov	r0, r7
 8004614:	47c0      	blx	r8
 8004616:	3001      	adds	r0, #1
 8004618:	d0e6      	beq.n	80045e8 <_printf_common+0xa4>
 800461a:	3601      	adds	r6, #1
 800461c:	e7d9      	b.n	80045d2 <_printf_common+0x8e>
	...

08004620 <_printf_i>:
 8004620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004624:	7e0f      	ldrb	r7, [r1, #24]
 8004626:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004628:	2f78      	cmp	r7, #120	; 0x78
 800462a:	4691      	mov	r9, r2
 800462c:	4680      	mov	r8, r0
 800462e:	460c      	mov	r4, r1
 8004630:	469a      	mov	sl, r3
 8004632:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004636:	d807      	bhi.n	8004648 <_printf_i+0x28>
 8004638:	2f62      	cmp	r7, #98	; 0x62
 800463a:	d80a      	bhi.n	8004652 <_printf_i+0x32>
 800463c:	2f00      	cmp	r7, #0
 800463e:	f000 80d4 	beq.w	80047ea <_printf_i+0x1ca>
 8004642:	2f58      	cmp	r7, #88	; 0x58
 8004644:	f000 80c0 	beq.w	80047c8 <_printf_i+0x1a8>
 8004648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800464c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004650:	e03a      	b.n	80046c8 <_printf_i+0xa8>
 8004652:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004656:	2b15      	cmp	r3, #21
 8004658:	d8f6      	bhi.n	8004648 <_printf_i+0x28>
 800465a:	a101      	add	r1, pc, #4	; (adr r1, 8004660 <_printf_i+0x40>)
 800465c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004660:	080046b9 	.word	0x080046b9
 8004664:	080046cd 	.word	0x080046cd
 8004668:	08004649 	.word	0x08004649
 800466c:	08004649 	.word	0x08004649
 8004670:	08004649 	.word	0x08004649
 8004674:	08004649 	.word	0x08004649
 8004678:	080046cd 	.word	0x080046cd
 800467c:	08004649 	.word	0x08004649
 8004680:	08004649 	.word	0x08004649
 8004684:	08004649 	.word	0x08004649
 8004688:	08004649 	.word	0x08004649
 800468c:	080047d1 	.word	0x080047d1
 8004690:	080046f9 	.word	0x080046f9
 8004694:	0800478b 	.word	0x0800478b
 8004698:	08004649 	.word	0x08004649
 800469c:	08004649 	.word	0x08004649
 80046a0:	080047f3 	.word	0x080047f3
 80046a4:	08004649 	.word	0x08004649
 80046a8:	080046f9 	.word	0x080046f9
 80046ac:	08004649 	.word	0x08004649
 80046b0:	08004649 	.word	0x08004649
 80046b4:	08004793 	.word	0x08004793
 80046b8:	682b      	ldr	r3, [r5, #0]
 80046ba:	1d1a      	adds	r2, r3, #4
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	602a      	str	r2, [r5, #0]
 80046c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046c8:	2301      	movs	r3, #1
 80046ca:	e09f      	b.n	800480c <_printf_i+0x1ec>
 80046cc:	6820      	ldr	r0, [r4, #0]
 80046ce:	682b      	ldr	r3, [r5, #0]
 80046d0:	0607      	lsls	r7, r0, #24
 80046d2:	f103 0104 	add.w	r1, r3, #4
 80046d6:	6029      	str	r1, [r5, #0]
 80046d8:	d501      	bpl.n	80046de <_printf_i+0xbe>
 80046da:	681e      	ldr	r6, [r3, #0]
 80046dc:	e003      	b.n	80046e6 <_printf_i+0xc6>
 80046de:	0646      	lsls	r6, r0, #25
 80046e0:	d5fb      	bpl.n	80046da <_printf_i+0xba>
 80046e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80046e6:	2e00      	cmp	r6, #0
 80046e8:	da03      	bge.n	80046f2 <_printf_i+0xd2>
 80046ea:	232d      	movs	r3, #45	; 0x2d
 80046ec:	4276      	negs	r6, r6
 80046ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046f2:	485a      	ldr	r0, [pc, #360]	; (800485c <_printf_i+0x23c>)
 80046f4:	230a      	movs	r3, #10
 80046f6:	e012      	b.n	800471e <_printf_i+0xfe>
 80046f8:	682b      	ldr	r3, [r5, #0]
 80046fa:	6820      	ldr	r0, [r4, #0]
 80046fc:	1d19      	adds	r1, r3, #4
 80046fe:	6029      	str	r1, [r5, #0]
 8004700:	0605      	lsls	r5, r0, #24
 8004702:	d501      	bpl.n	8004708 <_printf_i+0xe8>
 8004704:	681e      	ldr	r6, [r3, #0]
 8004706:	e002      	b.n	800470e <_printf_i+0xee>
 8004708:	0641      	lsls	r1, r0, #25
 800470a:	d5fb      	bpl.n	8004704 <_printf_i+0xe4>
 800470c:	881e      	ldrh	r6, [r3, #0]
 800470e:	4853      	ldr	r0, [pc, #332]	; (800485c <_printf_i+0x23c>)
 8004710:	2f6f      	cmp	r7, #111	; 0x6f
 8004712:	bf0c      	ite	eq
 8004714:	2308      	moveq	r3, #8
 8004716:	230a      	movne	r3, #10
 8004718:	2100      	movs	r1, #0
 800471a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800471e:	6865      	ldr	r5, [r4, #4]
 8004720:	60a5      	str	r5, [r4, #8]
 8004722:	2d00      	cmp	r5, #0
 8004724:	bfa2      	ittt	ge
 8004726:	6821      	ldrge	r1, [r4, #0]
 8004728:	f021 0104 	bicge.w	r1, r1, #4
 800472c:	6021      	strge	r1, [r4, #0]
 800472e:	b90e      	cbnz	r6, 8004734 <_printf_i+0x114>
 8004730:	2d00      	cmp	r5, #0
 8004732:	d04b      	beq.n	80047cc <_printf_i+0x1ac>
 8004734:	4615      	mov	r5, r2
 8004736:	fbb6 f1f3 	udiv	r1, r6, r3
 800473a:	fb03 6711 	mls	r7, r3, r1, r6
 800473e:	5dc7      	ldrb	r7, [r0, r7]
 8004740:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004744:	4637      	mov	r7, r6
 8004746:	42bb      	cmp	r3, r7
 8004748:	460e      	mov	r6, r1
 800474a:	d9f4      	bls.n	8004736 <_printf_i+0x116>
 800474c:	2b08      	cmp	r3, #8
 800474e:	d10b      	bne.n	8004768 <_printf_i+0x148>
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	07de      	lsls	r6, r3, #31
 8004754:	d508      	bpl.n	8004768 <_printf_i+0x148>
 8004756:	6923      	ldr	r3, [r4, #16]
 8004758:	6861      	ldr	r1, [r4, #4]
 800475a:	4299      	cmp	r1, r3
 800475c:	bfde      	ittt	le
 800475e:	2330      	movle	r3, #48	; 0x30
 8004760:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004764:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004768:	1b52      	subs	r2, r2, r5
 800476a:	6122      	str	r2, [r4, #16]
 800476c:	f8cd a000 	str.w	sl, [sp]
 8004770:	464b      	mov	r3, r9
 8004772:	aa03      	add	r2, sp, #12
 8004774:	4621      	mov	r1, r4
 8004776:	4640      	mov	r0, r8
 8004778:	f7ff fee4 	bl	8004544 <_printf_common>
 800477c:	3001      	adds	r0, #1
 800477e:	d14a      	bne.n	8004816 <_printf_i+0x1f6>
 8004780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004784:	b004      	add	sp, #16
 8004786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	f043 0320 	orr.w	r3, r3, #32
 8004790:	6023      	str	r3, [r4, #0]
 8004792:	4833      	ldr	r0, [pc, #204]	; (8004860 <_printf_i+0x240>)
 8004794:	2778      	movs	r7, #120	; 0x78
 8004796:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	6829      	ldr	r1, [r5, #0]
 800479e:	061f      	lsls	r7, r3, #24
 80047a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80047a4:	d402      	bmi.n	80047ac <_printf_i+0x18c>
 80047a6:	065f      	lsls	r7, r3, #25
 80047a8:	bf48      	it	mi
 80047aa:	b2b6      	uxthmi	r6, r6
 80047ac:	07df      	lsls	r7, r3, #31
 80047ae:	bf48      	it	mi
 80047b0:	f043 0320 	orrmi.w	r3, r3, #32
 80047b4:	6029      	str	r1, [r5, #0]
 80047b6:	bf48      	it	mi
 80047b8:	6023      	strmi	r3, [r4, #0]
 80047ba:	b91e      	cbnz	r6, 80047c4 <_printf_i+0x1a4>
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	f023 0320 	bic.w	r3, r3, #32
 80047c2:	6023      	str	r3, [r4, #0]
 80047c4:	2310      	movs	r3, #16
 80047c6:	e7a7      	b.n	8004718 <_printf_i+0xf8>
 80047c8:	4824      	ldr	r0, [pc, #144]	; (800485c <_printf_i+0x23c>)
 80047ca:	e7e4      	b.n	8004796 <_printf_i+0x176>
 80047cc:	4615      	mov	r5, r2
 80047ce:	e7bd      	b.n	800474c <_printf_i+0x12c>
 80047d0:	682b      	ldr	r3, [r5, #0]
 80047d2:	6826      	ldr	r6, [r4, #0]
 80047d4:	6961      	ldr	r1, [r4, #20]
 80047d6:	1d18      	adds	r0, r3, #4
 80047d8:	6028      	str	r0, [r5, #0]
 80047da:	0635      	lsls	r5, r6, #24
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	d501      	bpl.n	80047e4 <_printf_i+0x1c4>
 80047e0:	6019      	str	r1, [r3, #0]
 80047e2:	e002      	b.n	80047ea <_printf_i+0x1ca>
 80047e4:	0670      	lsls	r0, r6, #25
 80047e6:	d5fb      	bpl.n	80047e0 <_printf_i+0x1c0>
 80047e8:	8019      	strh	r1, [r3, #0]
 80047ea:	2300      	movs	r3, #0
 80047ec:	6123      	str	r3, [r4, #16]
 80047ee:	4615      	mov	r5, r2
 80047f0:	e7bc      	b.n	800476c <_printf_i+0x14c>
 80047f2:	682b      	ldr	r3, [r5, #0]
 80047f4:	1d1a      	adds	r2, r3, #4
 80047f6:	602a      	str	r2, [r5, #0]
 80047f8:	681d      	ldr	r5, [r3, #0]
 80047fa:	6862      	ldr	r2, [r4, #4]
 80047fc:	2100      	movs	r1, #0
 80047fe:	4628      	mov	r0, r5
 8004800:	f7fb fcf6 	bl	80001f0 <memchr>
 8004804:	b108      	cbz	r0, 800480a <_printf_i+0x1ea>
 8004806:	1b40      	subs	r0, r0, r5
 8004808:	6060      	str	r0, [r4, #4]
 800480a:	6863      	ldr	r3, [r4, #4]
 800480c:	6123      	str	r3, [r4, #16]
 800480e:	2300      	movs	r3, #0
 8004810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004814:	e7aa      	b.n	800476c <_printf_i+0x14c>
 8004816:	6923      	ldr	r3, [r4, #16]
 8004818:	462a      	mov	r2, r5
 800481a:	4649      	mov	r1, r9
 800481c:	4640      	mov	r0, r8
 800481e:	47d0      	blx	sl
 8004820:	3001      	adds	r0, #1
 8004822:	d0ad      	beq.n	8004780 <_printf_i+0x160>
 8004824:	6823      	ldr	r3, [r4, #0]
 8004826:	079b      	lsls	r3, r3, #30
 8004828:	d413      	bmi.n	8004852 <_printf_i+0x232>
 800482a:	68e0      	ldr	r0, [r4, #12]
 800482c:	9b03      	ldr	r3, [sp, #12]
 800482e:	4298      	cmp	r0, r3
 8004830:	bfb8      	it	lt
 8004832:	4618      	movlt	r0, r3
 8004834:	e7a6      	b.n	8004784 <_printf_i+0x164>
 8004836:	2301      	movs	r3, #1
 8004838:	4632      	mov	r2, r6
 800483a:	4649      	mov	r1, r9
 800483c:	4640      	mov	r0, r8
 800483e:	47d0      	blx	sl
 8004840:	3001      	adds	r0, #1
 8004842:	d09d      	beq.n	8004780 <_printf_i+0x160>
 8004844:	3501      	adds	r5, #1
 8004846:	68e3      	ldr	r3, [r4, #12]
 8004848:	9903      	ldr	r1, [sp, #12]
 800484a:	1a5b      	subs	r3, r3, r1
 800484c:	42ab      	cmp	r3, r5
 800484e:	dcf2      	bgt.n	8004836 <_printf_i+0x216>
 8004850:	e7eb      	b.n	800482a <_printf_i+0x20a>
 8004852:	2500      	movs	r5, #0
 8004854:	f104 0619 	add.w	r6, r4, #25
 8004858:	e7f5      	b.n	8004846 <_printf_i+0x226>
 800485a:	bf00      	nop
 800485c:	08004999 	.word	0x08004999
 8004860:	080049aa 	.word	0x080049aa

08004864 <_realloc_r>:
 8004864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004868:	4680      	mov	r8, r0
 800486a:	4614      	mov	r4, r2
 800486c:	460e      	mov	r6, r1
 800486e:	b921      	cbnz	r1, 800487a <_realloc_r+0x16>
 8004870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004874:	4611      	mov	r1, r2
 8004876:	f7ff bbd1 	b.w	800401c <_malloc_r>
 800487a:	b92a      	cbnz	r2, 8004888 <_realloc_r+0x24>
 800487c:	f7ff fcbe 	bl	80041fc <_free_r>
 8004880:	4625      	mov	r5, r4
 8004882:	4628      	mov	r0, r5
 8004884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004888:	f000 f843 	bl	8004912 <_malloc_usable_size_r>
 800488c:	4284      	cmp	r4, r0
 800488e:	4607      	mov	r7, r0
 8004890:	d802      	bhi.n	8004898 <_realloc_r+0x34>
 8004892:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004896:	d812      	bhi.n	80048be <_realloc_r+0x5a>
 8004898:	4621      	mov	r1, r4
 800489a:	4640      	mov	r0, r8
 800489c:	f7ff fbbe 	bl	800401c <_malloc_r>
 80048a0:	4605      	mov	r5, r0
 80048a2:	2800      	cmp	r0, #0
 80048a4:	d0ed      	beq.n	8004882 <_realloc_r+0x1e>
 80048a6:	42bc      	cmp	r4, r7
 80048a8:	4622      	mov	r2, r4
 80048aa:	4631      	mov	r1, r6
 80048ac:	bf28      	it	cs
 80048ae:	463a      	movcs	r2, r7
 80048b0:	f000 f821 	bl	80048f6 <memcpy>
 80048b4:	4631      	mov	r1, r6
 80048b6:	4640      	mov	r0, r8
 80048b8:	f7ff fca0 	bl	80041fc <_free_r>
 80048bc:	e7e1      	b.n	8004882 <_realloc_r+0x1e>
 80048be:	4635      	mov	r5, r6
 80048c0:	e7df      	b.n	8004882 <_realloc_r+0x1e>

080048c2 <memmove>:
 80048c2:	4288      	cmp	r0, r1
 80048c4:	b510      	push	{r4, lr}
 80048c6:	eb01 0402 	add.w	r4, r1, r2
 80048ca:	d902      	bls.n	80048d2 <memmove+0x10>
 80048cc:	4284      	cmp	r4, r0
 80048ce:	4623      	mov	r3, r4
 80048d0:	d807      	bhi.n	80048e2 <memmove+0x20>
 80048d2:	1e43      	subs	r3, r0, #1
 80048d4:	42a1      	cmp	r1, r4
 80048d6:	d008      	beq.n	80048ea <memmove+0x28>
 80048d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048e0:	e7f8      	b.n	80048d4 <memmove+0x12>
 80048e2:	4402      	add	r2, r0
 80048e4:	4601      	mov	r1, r0
 80048e6:	428a      	cmp	r2, r1
 80048e8:	d100      	bne.n	80048ec <memmove+0x2a>
 80048ea:	bd10      	pop	{r4, pc}
 80048ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048f4:	e7f7      	b.n	80048e6 <memmove+0x24>

080048f6 <memcpy>:
 80048f6:	440a      	add	r2, r1
 80048f8:	4291      	cmp	r1, r2
 80048fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80048fe:	d100      	bne.n	8004902 <memcpy+0xc>
 8004900:	4770      	bx	lr
 8004902:	b510      	push	{r4, lr}
 8004904:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004908:	f803 4f01 	strb.w	r4, [r3, #1]!
 800490c:	4291      	cmp	r1, r2
 800490e:	d1f9      	bne.n	8004904 <memcpy+0xe>
 8004910:	bd10      	pop	{r4, pc}

08004912 <_malloc_usable_size_r>:
 8004912:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004916:	1f18      	subs	r0, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	bfbc      	itt	lt
 800491c:	580b      	ldrlt	r3, [r1, r0]
 800491e:	18c0      	addlt	r0, r0, r3
 8004920:	4770      	bx	lr
	...

08004924 <_init>:
 8004924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004926:	bf00      	nop
 8004928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492a:	bc08      	pop	{r3}
 800492c:	469e      	mov	lr, r3
 800492e:	4770      	bx	lr

08004930 <_fini>:
 8004930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004932:	bf00      	nop
 8004934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004936:	bc08      	pop	{r3}
 8004938:	469e      	mov	lr, r3
 800493a:	4770      	bx	lr
