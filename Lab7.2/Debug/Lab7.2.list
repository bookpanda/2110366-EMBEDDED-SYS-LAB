
Lab7.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bb4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002d4c  08002d4c  00012d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d6c  08002d6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002d6c  08002d6c  00012d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d74  08002d74  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d74  08002d74  00012d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d78  08002d78  00012d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  2000000c  08002d88  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08002d88  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007f09  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000161a  00000000  00000000  00027f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006c8  00000000  00000000  000295a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000052f  00000000  00000000  00029c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014a27  00000000  00000000  0002a19f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000083bc  00000000  00000000  0003ebc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008201e  00000000  00000000  00046f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001abc  00000000  00000000  000c8fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000caa5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002d34 	.word	0x08002d34

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002d34 	.word	0x08002d34

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int current_buffer_idx = 0;
 char buffer[2][256];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	  huart2.gState = HAL_UART_STATE_READY;
 80004dc:	4b13      	ldr	r3, [pc, #76]	; (800052c <HAL_UART_RxCpltCallback+0x58>)
 80004de:	2220      	movs	r2, #32
 80004e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	  HAL_UART_Transmit_DMA(&huart2, buffer[current_buffer_idx], 256);
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <HAL_UART_RxCpltCallback+0x5c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	021b      	lsls	r3, r3, #8
 80004ea:	4a12      	ldr	r2, [pc, #72]	; (8000534 <HAL_UART_RxCpltCallback+0x60>)
 80004ec:	4413      	add	r3, r2
 80004ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004f2:	4619      	mov	r1, r3
 80004f4:	480d      	ldr	r0, [pc, #52]	; (800052c <HAL_UART_RxCpltCallback+0x58>)
 80004f6:	f001 fe35 	bl	8002164 <HAL_UART_Transmit_DMA>
	  current_buffer_idx = !current_buffer_idx;
 80004fa:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <HAL_UART_RxCpltCallback+0x5c>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	bf0c      	ite	eq
 8000502:	2301      	moveq	r3, #1
 8000504:	2300      	movne	r3, #0
 8000506:	b2db      	uxtb	r3, r3
 8000508:	461a      	mov	r2, r3
 800050a:	4b09      	ldr	r3, [pc, #36]	; (8000530 <HAL_UART_RxCpltCallback+0x5c>)
 800050c:	601a      	str	r2, [r3, #0]
	  HAL_UART_Receive_DMA(&huart2, buffer[current_buffer_idx], 256);
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <HAL_UART_RxCpltCallback+0x5c>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	021b      	lsls	r3, r3, #8
 8000514:	4a07      	ldr	r2, [pc, #28]	; (8000534 <HAL_UART_RxCpltCallback+0x60>)
 8000516:	4413      	add	r3, r2
 8000518:	f44f 7280 	mov.w	r2, #256	; 0x100
 800051c:	4619      	mov	r1, r3
 800051e:	4803      	ldr	r0, [pc, #12]	; (800052c <HAL_UART_RxCpltCallback+0x58>)
 8000520:	f001 fe90 	bl	8002244 <HAL_UART_Receive_DMA>
  }
 8000524:	bf00      	nop
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000028 	.word	0x20000028
 8000530:	20000130 	.word	0x20000130
 8000534:	20000134 	.word	0x20000134

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 fa98 	bl	8000a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f818 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 f8d2 	bl	80006ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000548:	f000 f8a8 	bl	800069c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800054c:	f000 f87c 	bl	8000648 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */



  HAL_UART_Receive_DMA(&huart2, buffer[current_buffer_idx], 256);
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <main+0x30>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	021b      	lsls	r3, r3, #8
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <main+0x34>)
 8000558:	4413      	add	r3, r2
 800055a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800055e:	4619      	mov	r1, r3
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <main+0x38>)
 8000562:	f001 fe6f 	bl	8002244 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000566:	e7fe      	b.n	8000566 <main+0x2e>
 8000568:	20000130 	.word	0x20000130
 800056c:	20000134 	.word	0x20000134
 8000570:	20000028 	.word	0x20000028

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2230      	movs	r2, #48	; 0x30
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f002 fbaa 	bl	8002cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	4b28      	ldr	r3, [pc, #160]	; (8000640 <SystemClock_Config+0xcc>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	4a27      	ldr	r2, [pc, #156]	; (8000640 <SystemClock_Config+0xcc>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	; 0x40
 80005a8:	4b25      	ldr	r3, [pc, #148]	; (8000640 <SystemClock_Config+0xcc>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b22      	ldr	r3, [pc, #136]	; (8000644 <SystemClock_Config+0xd0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a21      	ldr	r2, [pc, #132]	; (8000644 <SystemClock_Config+0xd0>)
 80005be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <SystemClock_Config+0xd0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d0:	2302      	movs	r3, #2
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d8:	2310      	movs	r3, #16
 80005da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005dc:	2302      	movs	r3, #2
 80005de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e0:	2300      	movs	r3, #0
 80005e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005e4:	2310      	movs	r3, #16
 80005e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ee:	2304      	movs	r3, #4
 80005f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005f2:	2304      	movs	r3, #4
 80005f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 f8ca 	bl	8001794 <HAL_RCC_OscConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000606:	f000 f8df 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	230f      	movs	r3, #15
 800060c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060e:	2302      	movs	r3, #2
 8000610:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2102      	movs	r1, #2
 8000626:	4618      	mov	r0, r3
 8000628:	f001 fb2c 	bl	8001c84 <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000632:	f000 f8c9 	bl	80007c8 <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3750      	adds	r7, #80	; 0x50
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 800064e:	4a12      	ldr	r2, [pc, #72]	; (8000698 <MX_USART2_UART_Init+0x50>)
 8000650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 8000654:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 800066e:	220c      	movs	r2, #12
 8000670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_USART2_UART_Init+0x4c>)
 8000680:	f001 fd20 	bl	80020c4 <HAL_UART_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800068a:	f000 f89d 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000028 	.word	0x20000028
 8000698:	40004400 	.word	0x40004400

0800069c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <MX_DMA_Init+0x4c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a0f      	ldr	r2, [pc, #60]	; (80006e8 <MX_DMA_Init+0x4c>)
 80006ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <MX_DMA_Init+0x4c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	2010      	movs	r0, #16
 80006c4:	f000 fb21 	bl	8000d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006c8:	2010      	movs	r0, #16
 80006ca:	f000 fb3a 	bl	8000d42 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	2011      	movs	r0, #17
 80006d4:	f000 fb19 	bl	8000d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80006d8:	2011      	movs	r0, #17
 80006da:	f000 fb32 	bl	8000d42 <HAL_NVIC_EnableIRQ>

}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	4b2d      	ldr	r3, [pc, #180]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a2c      	ldr	r2, [pc, #176]	; (80007bc <MX_GPIO_Init+0xd0>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	4b26      	ldr	r3, [pc, #152]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a25      	ldr	r2, [pc, #148]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b23      	ldr	r3, [pc, #140]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a1e      	ldr	r2, [pc, #120]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <MX_GPIO_Init+0xd0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a17      	ldr	r2, [pc, #92]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_GPIO_Init+0xd0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2120      	movs	r1, #32
 8000776:	4812      	ldr	r0, [pc, #72]	; (80007c0 <MX_GPIO_Init+0xd4>)
 8000778:	f000 fff2 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800077c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000782:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	4619      	mov	r1, r3
 8000792:	480c      	ldr	r0, [pc, #48]	; (80007c4 <MX_GPIO_Init+0xd8>)
 8000794:	f000 fe60 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000798:	2320      	movs	r3, #32
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079c:	2301      	movs	r3, #1
 800079e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	4619      	mov	r1, r3
 80007ae:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_GPIO_Init+0xd4>)
 80007b0:	f000 fe52 	bl	8001458 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b4:	bf00      	nop
 80007b6:	3728      	adds	r7, #40	; 0x28
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020000 	.word	0x40020000
 80007c4:	40020800 	.word	0x40020800

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <Error_Handler+0x8>
	...

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <HAL_MspInit+0x4c>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	4a0f      	ldr	r2, [pc, #60]	; (8000820 <HAL_MspInit+0x4c>)
 80007e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <HAL_MspInit+0x4c>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <HAL_MspInit+0x4c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <HAL_MspInit+0x4c>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000804:	6413      	str	r3, [r2, #64]	; 0x40
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_MspInit+0x4c>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000812:	2007      	movs	r0, #7
 8000814:	f000 fa6e 	bl	8000cf4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000818:	bf00      	nop
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40023800 	.word	0x40023800

08000824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a47      	ldr	r2, [pc, #284]	; (8000960 <HAL_UART_MspInit+0x13c>)
 8000842:	4293      	cmp	r3, r2
 8000844:	f040 8088 	bne.w	8000958 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000848:	2300      	movs	r3, #0
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	4b45      	ldr	r3, [pc, #276]	; (8000964 <HAL_UART_MspInit+0x140>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	4a44      	ldr	r2, [pc, #272]	; (8000964 <HAL_UART_MspInit+0x140>)
 8000852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000856:	6413      	str	r3, [r2, #64]	; 0x40
 8000858:	4b42      	ldr	r3, [pc, #264]	; (8000964 <HAL_UART_MspInit+0x140>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	4b3e      	ldr	r3, [pc, #248]	; (8000964 <HAL_UART_MspInit+0x140>)
 800086a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086c:	4a3d      	ldr	r2, [pc, #244]	; (8000964 <HAL_UART_MspInit+0x140>)
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	6313      	str	r3, [r2, #48]	; 0x30
 8000874:	4b3b      	ldr	r3, [pc, #236]	; (8000964 <HAL_UART_MspInit+0x140>)
 8000876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000880:	230c      	movs	r3, #12
 8000882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000890:	2307      	movs	r3, #7
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	4833      	ldr	r0, [pc, #204]	; (8000968 <HAL_UART_MspInit+0x144>)
 800089c:	f000 fddc 	bl	8001458 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80008a0:	4b32      	ldr	r3, [pc, #200]	; (800096c <HAL_UART_MspInit+0x148>)
 80008a2:	4a33      	ldr	r2, [pc, #204]	; (8000970 <HAL_UART_MspInit+0x14c>)
 80008a4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80008a6:	4b31      	ldr	r3, [pc, #196]	; (800096c <HAL_UART_MspInit+0x148>)
 80008a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008ac:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008ae:	4b2f      	ldr	r3, [pc, #188]	; (800096c <HAL_UART_MspInit+0x148>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008b4:	4b2d      	ldr	r3, [pc, #180]	; (800096c <HAL_UART_MspInit+0x148>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008ba:	4b2c      	ldr	r3, [pc, #176]	; (800096c <HAL_UART_MspInit+0x148>)
 80008bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008c0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008c2:	4b2a      	ldr	r3, [pc, #168]	; (800096c <HAL_UART_MspInit+0x148>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008c8:	4b28      	ldr	r3, [pc, #160]	; (800096c <HAL_UART_MspInit+0x148>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80008ce:	4b27      	ldr	r3, [pc, #156]	; (800096c <HAL_UART_MspInit+0x148>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008d4:	4b25      	ldr	r3, [pc, #148]	; (800096c <HAL_UART_MspInit+0x148>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008da:	4b24      	ldr	r3, [pc, #144]	; (800096c <HAL_UART_MspInit+0x148>)
 80008dc:	2200      	movs	r2, #0
 80008de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80008e0:	4822      	ldr	r0, [pc, #136]	; (800096c <HAL_UART_MspInit+0x148>)
 80008e2:	f000 fa49 	bl	8000d78 <HAL_DMA_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80008ec:	f7ff ff6c 	bl	80007c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a1e      	ldr	r2, [pc, #120]	; (800096c <HAL_UART_MspInit+0x148>)
 80008f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80008f6:	4a1d      	ldr	r2, [pc, #116]	; (800096c <HAL_UART_MspInit+0x148>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80008fc:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <HAL_UART_MspInit+0x150>)
 80008fe:	4a1e      	ldr	r2, [pc, #120]	; (8000978 <HAL_UART_MspInit+0x154>)
 8000900:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000902:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <HAL_UART_MspInit+0x150>)
 8000904:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000908:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <HAL_UART_MspInit+0x150>)
 800090c:	2240      	movs	r2, #64	; 0x40
 800090e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <HAL_UART_MspInit+0x150>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <HAL_UART_MspInit+0x150>)
 8000918:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800091c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <HAL_UART_MspInit+0x150>)
 8000920:	2200      	movs	r2, #0
 8000922:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <HAL_UART_MspInit+0x150>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800092a:	4b12      	ldr	r3, [pc, #72]	; (8000974 <HAL_UART_MspInit+0x150>)
 800092c:	2200      	movs	r2, #0
 800092e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000930:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_UART_MspInit+0x150>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_UART_MspInit+0x150>)
 8000938:	2200      	movs	r2, #0
 800093a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800093c:	480d      	ldr	r0, [pc, #52]	; (8000974 <HAL_UART_MspInit+0x150>)
 800093e:	f000 fa1b 	bl	8000d78 <HAL_DMA_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8000948:	f7ff ff3e 	bl	80007c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a09      	ldr	r2, [pc, #36]	; (8000974 <HAL_UART_MspInit+0x150>)
 8000950:	639a      	str	r2, [r3, #56]	; 0x38
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_UART_MspInit+0x150>)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000958:	bf00      	nop
 800095a:	3728      	adds	r7, #40	; 0x28
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40004400 	.word	0x40004400
 8000964:	40023800 	.word	0x40023800
 8000968:	40020000 	.word	0x40020000
 800096c:	20000070 	.word	0x20000070
 8000970:	40026088 	.word	0x40026088
 8000974:	200000d0 	.word	0x200000d0
 8000978:	400260a0 	.word	0x400260a0

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000980:	e7fe      	b.n	8000980 <NMI_Handler+0x4>

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <MemManage_Handler+0x4>

0800098e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <UsageFault_Handler+0x4>

0800099a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c8:	f000 f8a4 	bl	8000b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <DMA1_Stream5_IRQHandler+0x10>)
 80009d6:	f000 fad5 	bl	8000f84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000070 	.word	0x20000070

080009e4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <DMA1_Stream6_IRQHandler+0x10>)
 80009ea:	f000 facb 	bl	8000f84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200000d0 	.word	0x200000d0

080009f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <SystemInit+0x20>)
 80009fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a02:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <SystemInit+0x20>)
 8000a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a20:	f7ff ffea 	bl	80009f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a24:	480c      	ldr	r0, [pc, #48]	; (8000a58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a26:	490d      	ldr	r1, [pc, #52]	; (8000a5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a28:	4a0d      	ldr	r2, [pc, #52]	; (8000a60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a2c:	e002      	b.n	8000a34 <LoopCopyDataInit>

08000a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a32:	3304      	adds	r3, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a38:	d3f9      	bcc.n	8000a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a3c:	4c0a      	ldr	r4, [pc, #40]	; (8000a68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a40:	e001      	b.n	8000a46 <LoopFillZerobss>

08000a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a44:	3204      	adds	r2, #4

08000a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a48:	d3fb      	bcc.n	8000a42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a4a:	f002 f94f 	bl	8002cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a4e:	f7ff fd73 	bl	8000538 <main>
  bx  lr    
 8000a52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a60:	08002d7c 	.word	0x08002d7c
  ldr r2, =_sbss
 8000a64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a68:	20000338 	.word	0x20000338

08000a6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC_IRQHandler>
	...

08000a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_Init+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <HAL_Init+0x40>)
 8000a7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <HAL_Init+0x40>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <HAL_Init+0x40>)
 8000a86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_Init+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <HAL_Init+0x40>)
 8000a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f000 f92b 	bl	8000cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f000 f808 	bl	8000ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa4:	f7ff fe96 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023c00 	.word	0x40023c00

08000ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_InitTick+0x54>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_InitTick+0x58>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f943 	bl	8000d5e <HAL_SYSTICK_Config>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00e      	b.n	8000b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b0f      	cmp	r3, #15
 8000ae6:	d80a      	bhi.n	8000afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000af0:	f000 f90b 	bl	8000d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af4:	4a06      	ldr	r2, [pc, #24]	; (8000b10 <HAL_InitTick+0x5c>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	e000      	b.n	8000b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	20000004 	.word	0x20000004

08000b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_IncTick+0x20>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_IncTick+0x24>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <HAL_IncTick+0x24>)
 8000b26:	6013      	str	r3, [r2, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000334 	.word	0x20000334

08000b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <HAL_GetTick+0x14>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20000334 	.word	0x20000334

08000b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b70:	4013      	ands	r3, r2
 8000b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b86:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	60d3      	str	r3, [r2, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	f003 0307 	and.w	r3, r3, #7
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db0b      	blt.n	8000be2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f003 021f 	and.w	r2, r3, #31
 8000bd0:	4907      	ldr	r1, [pc, #28]	; (8000bf0 <__NVIC_EnableIRQ+0x38>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	2001      	movs	r0, #1
 8000bda:	fa00 f202 	lsl.w	r2, r0, r2
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	db0a      	blt.n	8000c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	490c      	ldr	r1, [pc, #48]	; (8000c40 <__NVIC_SetPriority+0x4c>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	0112      	lsls	r2, r2, #4
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	440b      	add	r3, r1
 8000c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c1c:	e00a      	b.n	8000c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4908      	ldr	r1, [pc, #32]	; (8000c44 <__NVIC_SetPriority+0x50>)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	0112      	lsls	r2, r2, #4
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	440b      	add	r3, r1
 8000c32:	761a      	strb	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f1c3 0307 	rsb	r3, r3, #7
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	bf28      	it	cs
 8000c66:	2304      	movcs	r3, #4
 8000c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d902      	bls.n	8000c78 <NVIC_EncodePriority+0x30>
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3b03      	subs	r3, #3
 8000c76:	e000      	b.n	8000c7a <NVIC_EncodePriority+0x32>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43da      	mvns	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	43d9      	mvns	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	4313      	orrs	r3, r2
         );
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3724      	adds	r7, #36	; 0x24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
	...

08000cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc0:	d301      	bcc.n	8000cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00f      	b.n	8000ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <SysTick_Config+0x40>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cce:	210f      	movs	r1, #15
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cd4:	f7ff ff8e 	bl	8000bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <SysTick_Config+0x40>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cde:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <SysTick_Config+0x40>)
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	e000e010 	.word	0xe000e010

08000cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff29 	bl	8000b54 <__NVIC_SetPriorityGrouping>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d1c:	f7ff ff3e 	bl	8000b9c <__NVIC_GetPriorityGrouping>
 8000d20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	6978      	ldr	r0, [r7, #20]
 8000d28:	f7ff ff8e 	bl	8000c48 <NVIC_EncodePriority>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff5d 	bl	8000bf4 <__NVIC_SetPriority>
}
 8000d3a:	bf00      	nop
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff31 	bl	8000bb8 <__NVIC_EnableIRQ>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ffa2 	bl	8000cb0 <SysTick_Config>
 8000d6c:	4603      	mov	r3, r0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000d84:	f7ff feda 	bl	8000b3c <HAL_GetTick>
 8000d88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d101      	bne.n	8000d94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e099      	b.n	8000ec8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2202      	movs	r2, #2
 8000d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f022 0201 	bic.w	r2, r2, #1
 8000db2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000db4:	e00f      	b.n	8000dd6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000db6:	f7ff fec1 	bl	8000b3c <HAL_GetTick>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	2b05      	cmp	r3, #5
 8000dc2:	d908      	bls.n	8000dd6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2203      	movs	r2, #3
 8000dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e078      	b.n	8000ec8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1e8      	bne.n	8000db6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	4b38      	ldr	r3, [pc, #224]	; (8000ed0 <HAL_DMA_Init+0x158>)
 8000df0:	4013      	ands	r3, r2
 8000df2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a1b      	ldr	r3, [r3, #32]
 8000e20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2c:	2b04      	cmp	r3, #4
 8000e2e:	d107      	bne.n	8000e40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	697a      	ldr	r2, [r7, #20]
 8000e46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	f023 0307 	bic.w	r3, r3, #7
 8000e56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	d117      	bne.n	8000e9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00e      	beq.n	8000e9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f000 fa6f 	bl	8001360 <DMA_CheckFifoParam>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d008      	beq.n	8000e9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2240      	movs	r2, #64	; 0x40
 8000e8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2201      	movs	r2, #1
 8000e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000e96:	2301      	movs	r3, #1
 8000e98:	e016      	b.n	8000ec8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 fa26 	bl	80012f4 <DMA_CalcBaseAndBitshift>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eb0:	223f      	movs	r2, #63	; 0x3f
 8000eb2:	409a      	lsls	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	f010803f 	.word	0xf010803f

08000ed4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d101      	bne.n	8000efa <HAL_DMA_Start_IT+0x26>
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	e040      	b.n	8000f7c <HAL_DMA_Start_IT+0xa8>
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2201      	movs	r2, #1
 8000efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d12f      	bne.n	8000f6e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2202      	movs	r2, #2
 8000f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f000 f9b8 	bl	8001298 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f2c:	223f      	movs	r2, #63	; 0x3f
 8000f2e:	409a      	lsls	r2, r3
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 0216 	orr.w	r2, r2, #22
 8000f42:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d007      	beq.n	8000f5c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f042 0208 	orr.w	r2, r2, #8
 8000f5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f042 0201 	orr.w	r2, r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	e005      	b.n	8000f7a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000f76:	2302      	movs	r3, #2
 8000f78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000f90:	4b8e      	ldr	r3, [pc, #568]	; (80011cc <HAL_DMA_IRQHandler+0x248>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a8e      	ldr	r2, [pc, #568]	; (80011d0 <HAL_DMA_IRQHandler+0x24c>)
 8000f96:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9a:	0a9b      	lsrs	r3, r3, #10
 8000f9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fae:	2208      	movs	r2, #8
 8000fb0:	409a      	lsls	r2, r3
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d01a      	beq.n	8000ff0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 0304 	and.w	r3, r3, #4
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d013      	beq.n	8000ff0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f022 0204 	bic.w	r2, r2, #4
 8000fd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fdc:	2208      	movs	r2, #8
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fe8:	f043 0201 	orr.w	r2, r3, #1
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	409a      	lsls	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d012      	beq.n	8001026 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00b      	beq.n	8001026 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001012:	2201      	movs	r2, #1
 8001014:	409a      	lsls	r2, r3
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800101e:	f043 0202 	orr.w	r2, r3, #2
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800102a:	2204      	movs	r2, #4
 800102c:	409a      	lsls	r2, r3
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4013      	ands	r3, r2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d012      	beq.n	800105c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d00b      	beq.n	800105c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001048:	2204      	movs	r2, #4
 800104a:	409a      	lsls	r2, r3
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001054:	f043 0204 	orr.w	r2, r3, #4
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001060:	2210      	movs	r2, #16
 8001062:	409a      	lsls	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4013      	ands	r3, r2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d043      	beq.n	80010f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0308 	and.w	r3, r3, #8
 8001076:	2b00      	cmp	r3, #0
 8001078:	d03c      	beq.n	80010f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800107e:	2210      	movs	r2, #16
 8001080:	409a      	lsls	r2, r3
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d018      	beq.n	80010c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d108      	bne.n	80010b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d024      	beq.n	80010f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	4798      	blx	r3
 80010b2:	e01f      	b.n	80010f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d01b      	beq.n	80010f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	4798      	blx	r3
 80010c4:	e016      	b.n	80010f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d107      	bne.n	80010e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 0208 	bic.w	r2, r2, #8
 80010e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f8:	2220      	movs	r2, #32
 80010fa:	409a      	lsls	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4013      	ands	r3, r2
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 808f 	beq.w	8001224 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0310 	and.w	r3, r3, #16
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 8087 	beq.w	8001224 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800111a:	2220      	movs	r2, #32
 800111c:	409a      	lsls	r2, r3
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b05      	cmp	r3, #5
 800112c:	d136      	bne.n	800119c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f022 0216 	bic.w	r2, r2, #22
 800113c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	695a      	ldr	r2, [r3, #20]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800114c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	2b00      	cmp	r3, #0
 8001154:	d103      	bne.n	800115e <HAL_DMA_IRQHandler+0x1da>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800115a:	2b00      	cmp	r3, #0
 800115c:	d007      	beq.n	800116e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 0208 	bic.w	r2, r2, #8
 800116c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001172:	223f      	movs	r2, #63	; 0x3f
 8001174:	409a      	lsls	r2, r3
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800118e:	2b00      	cmp	r3, #0
 8001190:	d07e      	beq.n	8001290 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	4798      	blx	r3
        }
        return;
 800119a:	e079      	b.n	8001290 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d01d      	beq.n	80011e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d10d      	bne.n	80011d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d031      	beq.n	8001224 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	4798      	blx	r3
 80011c8:	e02c      	b.n	8001224 <HAL_DMA_IRQHandler+0x2a0>
 80011ca:	bf00      	nop
 80011cc:	20000000 	.word	0x20000000
 80011d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d023      	beq.n	8001224 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	4798      	blx	r3
 80011e4:	e01e      	b.n	8001224 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10f      	bne.n	8001214 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0210 	bic.w	r2, r2, #16
 8001202:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001228:	2b00      	cmp	r3, #0
 800122a:	d032      	beq.n	8001292 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b00      	cmp	r3, #0
 8001236:	d022      	beq.n	800127e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2205      	movs	r2, #5
 800123c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0201 	bic.w	r2, r2, #1
 800124e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	3301      	adds	r3, #1
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	429a      	cmp	r2, r3
 800125a:	d307      	bcc.n	800126c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f2      	bne.n	8001250 <HAL_DMA_IRQHandler+0x2cc>
 800126a:	e000      	b.n	800126e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800126c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2201      	movs	r2, #1
 8001272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	2b00      	cmp	r3, #0
 8001284:	d005      	beq.n	8001292 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	4798      	blx	r3
 800128e:	e000      	b.n	8001292 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001290:	bf00      	nop
    }
  }
}
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
 80012a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2b40      	cmp	r3, #64	; 0x40
 80012c4:	d108      	bne.n	80012d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80012d6:	e007      	b.n	80012e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	60da      	str	r2, [r3, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	3b10      	subs	r3, #16
 8001304:	4a14      	ldr	r2, [pc, #80]	; (8001358 <DMA_CalcBaseAndBitshift+0x64>)
 8001306:	fba2 2303 	umull	r2, r3, r2, r3
 800130a:	091b      	lsrs	r3, r3, #4
 800130c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800130e:	4a13      	ldr	r2, [pc, #76]	; (800135c <DMA_CalcBaseAndBitshift+0x68>)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4413      	add	r3, r2
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	461a      	mov	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2b03      	cmp	r3, #3
 8001320:	d909      	bls.n	8001336 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800132a:	f023 0303 	bic.w	r3, r3, #3
 800132e:	1d1a      	adds	r2, r3, #4
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	659a      	str	r2, [r3, #88]	; 0x58
 8001334:	e007      	b.n	8001346 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800133e:	f023 0303 	bic.w	r3, r3, #3
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800134a:	4618      	mov	r0, r3
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	aaaaaaab 	.word	0xaaaaaaab
 800135c:	08002d64 	.word	0x08002d64

08001360 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001370:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d11f      	bne.n	80013ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	2b03      	cmp	r3, #3
 800137e:	d856      	bhi.n	800142e <DMA_CheckFifoParam+0xce>
 8001380:	a201      	add	r2, pc, #4	; (adr r2, 8001388 <DMA_CheckFifoParam+0x28>)
 8001382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001386:	bf00      	nop
 8001388:	08001399 	.word	0x08001399
 800138c:	080013ab 	.word	0x080013ab
 8001390:	08001399 	.word	0x08001399
 8001394:	0800142f 	.word	0x0800142f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d046      	beq.n	8001432 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013a8:	e043      	b.n	8001432 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80013b2:	d140      	bne.n	8001436 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013b8:	e03d      	b.n	8001436 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013c2:	d121      	bne.n	8001408 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	d837      	bhi.n	800143a <DMA_CheckFifoParam+0xda>
 80013ca:	a201      	add	r2, pc, #4	; (adr r2, 80013d0 <DMA_CheckFifoParam+0x70>)
 80013cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d0:	080013e1 	.word	0x080013e1
 80013d4:	080013e7 	.word	0x080013e7
 80013d8:	080013e1 	.word	0x080013e1
 80013dc:	080013f9 	.word	0x080013f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	73fb      	strb	r3, [r7, #15]
      break;
 80013e4:	e030      	b.n	8001448 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d025      	beq.n	800143e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013f6:	e022      	b.n	800143e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001400:	d11f      	bne.n	8001442 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001406:	e01c      	b.n	8001442 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d903      	bls.n	8001416 <DMA_CheckFifoParam+0xb6>
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	2b03      	cmp	r3, #3
 8001412:	d003      	beq.n	800141c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001414:	e018      	b.n	8001448 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	73fb      	strb	r3, [r7, #15]
      break;
 800141a:	e015      	b.n	8001448 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001420:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00e      	beq.n	8001446 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
      break;
 800142c:	e00b      	b.n	8001446 <DMA_CheckFifoParam+0xe6>
      break;
 800142e:	bf00      	nop
 8001430:	e00a      	b.n	8001448 <DMA_CheckFifoParam+0xe8>
      break;
 8001432:	bf00      	nop
 8001434:	e008      	b.n	8001448 <DMA_CheckFifoParam+0xe8>
      break;
 8001436:	bf00      	nop
 8001438:	e006      	b.n	8001448 <DMA_CheckFifoParam+0xe8>
      break;
 800143a:	bf00      	nop
 800143c:	e004      	b.n	8001448 <DMA_CheckFifoParam+0xe8>
      break;
 800143e:	bf00      	nop
 8001440:	e002      	b.n	8001448 <DMA_CheckFifoParam+0xe8>
      break;   
 8001442:	bf00      	nop
 8001444:	e000      	b.n	8001448 <DMA_CheckFifoParam+0xe8>
      break;
 8001446:	bf00      	nop
    }
  } 
  
  return status; 
 8001448:	7bfb      	ldrb	r3, [r7, #15]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop

08001458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001458:	b480      	push	{r7}
 800145a:	b089      	sub	sp, #36	; 0x24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
 8001472:	e159      	b.n	8001728 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001474:	2201      	movs	r2, #1
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	429a      	cmp	r2, r3
 800148e:	f040 8148 	bne.w	8001722 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b01      	cmp	r3, #1
 800149c:	d005      	beq.n	80014aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d130      	bne.n	800150c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	2203      	movs	r2, #3
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014e0:	2201      	movs	r2, #1
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	091b      	lsrs	r3, r3, #4
 80014f6:	f003 0201 	and.w	r2, r3, #1
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b03      	cmp	r3, #3
 8001516:	d017      	beq.n	8001548 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0303 	and.w	r3, r3, #3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d123      	bne.n	800159c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	08da      	lsrs	r2, r3, #3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3208      	adds	r2, #8
 800155c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001560:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	220f      	movs	r2, #15
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	691a      	ldr	r2, [r3, #16]
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	08da      	lsrs	r2, r3, #3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3208      	adds	r2, #8
 8001596:	69b9      	ldr	r1, [r7, #24]
 8001598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	2203      	movs	r2, #3
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0203 	and.w	r2, r3, #3
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 80a2 	beq.w	8001722 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	4b57      	ldr	r3, [pc, #348]	; (8001740 <HAL_GPIO_Init+0x2e8>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	4a56      	ldr	r2, [pc, #344]	; (8001740 <HAL_GPIO_Init+0x2e8>)
 80015e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ec:	6453      	str	r3, [r2, #68]	; 0x44
 80015ee:	4b54      	ldr	r3, [pc, #336]	; (8001740 <HAL_GPIO_Init+0x2e8>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015fa:	4a52      	ldr	r2, [pc, #328]	; (8001744 <HAL_GPIO_Init+0x2ec>)
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	089b      	lsrs	r3, r3, #2
 8001600:	3302      	adds	r3, #2
 8001602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	220f      	movs	r2, #15
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a49      	ldr	r2, [pc, #292]	; (8001748 <HAL_GPIO_Init+0x2f0>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d019      	beq.n	800165a <HAL_GPIO_Init+0x202>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a48      	ldr	r2, [pc, #288]	; (800174c <HAL_GPIO_Init+0x2f4>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d013      	beq.n	8001656 <HAL_GPIO_Init+0x1fe>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a47      	ldr	r2, [pc, #284]	; (8001750 <HAL_GPIO_Init+0x2f8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d00d      	beq.n	8001652 <HAL_GPIO_Init+0x1fa>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a46      	ldr	r2, [pc, #280]	; (8001754 <HAL_GPIO_Init+0x2fc>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d007      	beq.n	800164e <HAL_GPIO_Init+0x1f6>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a45      	ldr	r2, [pc, #276]	; (8001758 <HAL_GPIO_Init+0x300>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d101      	bne.n	800164a <HAL_GPIO_Init+0x1f2>
 8001646:	2304      	movs	r3, #4
 8001648:	e008      	b.n	800165c <HAL_GPIO_Init+0x204>
 800164a:	2307      	movs	r3, #7
 800164c:	e006      	b.n	800165c <HAL_GPIO_Init+0x204>
 800164e:	2303      	movs	r3, #3
 8001650:	e004      	b.n	800165c <HAL_GPIO_Init+0x204>
 8001652:	2302      	movs	r3, #2
 8001654:	e002      	b.n	800165c <HAL_GPIO_Init+0x204>
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <HAL_GPIO_Init+0x204>
 800165a:	2300      	movs	r3, #0
 800165c:	69fa      	ldr	r2, [r7, #28]
 800165e:	f002 0203 	and.w	r2, r2, #3
 8001662:	0092      	lsls	r2, r2, #2
 8001664:	4093      	lsls	r3, r2
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800166c:	4935      	ldr	r1, [pc, #212]	; (8001744 <HAL_GPIO_Init+0x2ec>)
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	089b      	lsrs	r3, r3, #2
 8001672:	3302      	adds	r3, #2
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800167a:	4b38      	ldr	r3, [pc, #224]	; (800175c <HAL_GPIO_Init+0x304>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	43db      	mvns	r3, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800169e:	4a2f      	ldr	r2, [pc, #188]	; (800175c <HAL_GPIO_Init+0x304>)
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016a4:	4b2d      	ldr	r3, [pc, #180]	; (800175c <HAL_GPIO_Init+0x304>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016c8:	4a24      	ldr	r2, [pc, #144]	; (800175c <HAL_GPIO_Init+0x304>)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ce:	4b23      	ldr	r3, [pc, #140]	; (800175c <HAL_GPIO_Init+0x304>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4013      	ands	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016f2:	4a1a      	ldr	r2, [pc, #104]	; (800175c <HAL_GPIO_Init+0x304>)
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <HAL_GPIO_Init+0x304>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800171c:	4a0f      	ldr	r2, [pc, #60]	; (800175c <HAL_GPIO_Init+0x304>)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3301      	adds	r3, #1
 8001726:	61fb      	str	r3, [r7, #28]
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	2b0f      	cmp	r3, #15
 800172c:	f67f aea2 	bls.w	8001474 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	3724      	adds	r7, #36	; 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800
 8001744:	40013800 	.word	0x40013800
 8001748:	40020000 	.word	0x40020000
 800174c:	40020400 	.word	0x40020400
 8001750:	40020800 	.word	0x40020800
 8001754:	40020c00 	.word	0x40020c00
 8001758:	40021000 	.word	0x40021000
 800175c:	40013c00 	.word	0x40013c00

08001760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
 800176c:	4613      	mov	r3, r2
 800176e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001770:	787b      	ldrb	r3, [r7, #1]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001776:	887a      	ldrh	r2, [r7, #2]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800177c:	e003      	b.n	8001786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800177e:	887b      	ldrh	r3, [r7, #2]
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	619a      	str	r2, [r3, #24]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e267      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d075      	beq.n	800189e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017b2:	4b88      	ldr	r3, [pc, #544]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 030c 	and.w	r3, r3, #12
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d00c      	beq.n	80017d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017be:	4b85      	ldr	r3, [pc, #532]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017c6:	2b08      	cmp	r3, #8
 80017c8:	d112      	bne.n	80017f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ca:	4b82      	ldr	r3, [pc, #520]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017d6:	d10b      	bne.n	80017f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d8:	4b7e      	ldr	r3, [pc, #504]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d05b      	beq.n	800189c <HAL_RCC_OscConfig+0x108>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d157      	bne.n	800189c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e242      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f8:	d106      	bne.n	8001808 <HAL_RCC_OscConfig+0x74>
 80017fa:	4b76      	ldr	r3, [pc, #472]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a75      	ldr	r2, [pc, #468]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e01d      	b.n	8001844 <HAL_RCC_OscConfig+0xb0>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001810:	d10c      	bne.n	800182c <HAL_RCC_OscConfig+0x98>
 8001812:	4b70      	ldr	r3, [pc, #448]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a6f      	ldr	r2, [pc, #444]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4b6d      	ldr	r3, [pc, #436]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a6c      	ldr	r2, [pc, #432]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e00b      	b.n	8001844 <HAL_RCC_OscConfig+0xb0>
 800182c:	4b69      	ldr	r3, [pc, #420]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a68      	ldr	r2, [pc, #416]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b66      	ldr	r3, [pc, #408]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a65      	ldr	r2, [pc, #404]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 800183e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d013      	beq.n	8001874 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184c:	f7ff f976 	bl	8000b3c <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001854:	f7ff f972 	bl	8000b3c <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b64      	cmp	r3, #100	; 0x64
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e207      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001866:	4b5b      	ldr	r3, [pc, #364]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0xc0>
 8001872:	e014      	b.n	800189e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001874:	f7ff f962 	bl	8000b3c <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800187c:	f7ff f95e 	bl	8000b3c <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b64      	cmp	r3, #100	; 0x64
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e1f3      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188e:	4b51      	ldr	r3, [pc, #324]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0xe8>
 800189a:	e000      	b.n	800189e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d063      	beq.n	8001972 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018aa:	4b4a      	ldr	r3, [pc, #296]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00b      	beq.n	80018ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018b6:	4b47      	ldr	r3, [pc, #284]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018be:	2b08      	cmp	r3, #8
 80018c0:	d11c      	bne.n	80018fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018c2:	4b44      	ldr	r3, [pc, #272]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d116      	bne.n	80018fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ce:	4b41      	ldr	r3, [pc, #260]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d005      	beq.n	80018e6 <HAL_RCC_OscConfig+0x152>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d001      	beq.n	80018e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e1c7      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e6:	4b3b      	ldr	r3, [pc, #236]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	4937      	ldr	r1, [pc, #220]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fa:	e03a      	b.n	8001972 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d020      	beq.n	8001946 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001904:	4b34      	ldr	r3, [pc, #208]	; (80019d8 <HAL_RCC_OscConfig+0x244>)
 8001906:	2201      	movs	r2, #1
 8001908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190a:	f7ff f917 	bl	8000b3c <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001912:	f7ff f913 	bl	8000b3c <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e1a8      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001924:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001930:	4b28      	ldr	r3, [pc, #160]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4925      	ldr	r1, [pc, #148]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001940:	4313      	orrs	r3, r2
 8001942:	600b      	str	r3, [r1, #0]
 8001944:	e015      	b.n	8001972 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001946:	4b24      	ldr	r3, [pc, #144]	; (80019d8 <HAL_RCC_OscConfig+0x244>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194c:	f7ff f8f6 	bl	8000b3c <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001954:	f7ff f8f2 	bl	8000b3c <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e187      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001966:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d036      	beq.n	80019ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d016      	beq.n	80019b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_RCC_OscConfig+0x248>)
 8001988:	2201      	movs	r2, #1
 800198a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198c:	f7ff f8d6 	bl	8000b3c <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001994:	f7ff f8d2 	bl	8000b3c <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e167      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_RCC_OscConfig+0x240>)
 80019a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0x200>
 80019b2:	e01b      	b.n	80019ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <HAL_RCC_OscConfig+0x248>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ba:	f7ff f8bf 	bl	8000b3c <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c0:	e00e      	b.n	80019e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c2:	f7ff f8bb 	bl	8000b3c <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d907      	bls.n	80019e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e150      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
 80019d4:	40023800 	.word	0x40023800
 80019d8:	42470000 	.word	0x42470000
 80019dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e0:	4b88      	ldr	r3, [pc, #544]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 80019e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1ea      	bne.n	80019c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 8097 	beq.w	8001b28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019fe:	4b81      	ldr	r3, [pc, #516]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10f      	bne.n	8001a2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	4b7d      	ldr	r3, [pc, #500]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	4a7c      	ldr	r2, [pc, #496]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a18:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1a:	4b7a      	ldr	r3, [pc, #488]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a26:	2301      	movs	r3, #1
 8001a28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2a:	4b77      	ldr	r3, [pc, #476]	; (8001c08 <HAL_RCC_OscConfig+0x474>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d118      	bne.n	8001a68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a36:	4b74      	ldr	r3, [pc, #464]	; (8001c08 <HAL_RCC_OscConfig+0x474>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a73      	ldr	r2, [pc, #460]	; (8001c08 <HAL_RCC_OscConfig+0x474>)
 8001a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a42:	f7ff f87b 	bl	8000b3c <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a4a:	f7ff f877 	bl	8000b3c <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e10c      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5c:	4b6a      	ldr	r3, [pc, #424]	; (8001c08 <HAL_RCC_OscConfig+0x474>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d106      	bne.n	8001a7e <HAL_RCC_OscConfig+0x2ea>
 8001a70:	4b64      	ldr	r3, [pc, #400]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a74:	4a63      	ldr	r2, [pc, #396]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a7c:	e01c      	b.n	8001ab8 <HAL_RCC_OscConfig+0x324>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b05      	cmp	r3, #5
 8001a84:	d10c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x30c>
 8001a86:	4b5f      	ldr	r3, [pc, #380]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8a:	4a5e      	ldr	r2, [pc, #376]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	6713      	str	r3, [r2, #112]	; 0x70
 8001a92:	4b5c      	ldr	r3, [pc, #368]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a96:	4a5b      	ldr	r2, [pc, #364]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a9e:	e00b      	b.n	8001ab8 <HAL_RCC_OscConfig+0x324>
 8001aa0:	4b58      	ldr	r3, [pc, #352]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa4:	4a57      	ldr	r2, [pc, #348]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001aa6:	f023 0301 	bic.w	r3, r3, #1
 8001aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8001aac:	4b55      	ldr	r3, [pc, #340]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab0:	4a54      	ldr	r2, [pc, #336]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001ab2:	f023 0304 	bic.w	r3, r3, #4
 8001ab6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d015      	beq.n	8001aec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac0:	f7ff f83c 	bl	8000b3c <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac6:	e00a      	b.n	8001ade <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac8:	f7ff f838 	bl	8000b3c <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e0cb      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ade:	4b49      	ldr	r3, [pc, #292]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0ee      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x334>
 8001aea:	e014      	b.n	8001b16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aec:	f7ff f826 	bl	8000b3c <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af2:	e00a      	b.n	8001b0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af4:	f7ff f822 	bl	8000b3c <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e0b5      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0a:	4b3e      	ldr	r3, [pc, #248]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1ee      	bne.n	8001af4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b16:	7dfb      	ldrb	r3, [r7, #23]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d105      	bne.n	8001b28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b1c:	4b39      	ldr	r3, [pc, #228]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	4a38      	ldr	r2, [pc, #224]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80a1 	beq.w	8001c74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b32:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 030c 	and.w	r3, r3, #12
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	d05c      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d141      	bne.n	8001bca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b46:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <HAL_RCC_OscConfig+0x478>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7fe fff6 	bl	8000b3c <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b54:	f7fe fff2 	bl	8000b3c <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e087      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b66:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69da      	ldr	r2, [r3, #28]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	019b      	lsls	r3, r3, #6
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	085b      	lsrs	r3, r3, #1
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	041b      	lsls	r3, r3, #16
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	061b      	lsls	r3, r3, #24
 8001b96:	491b      	ldr	r1, [pc, #108]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <HAL_RCC_OscConfig+0x478>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba2:	f7fe ffcb 	bl	8000b3c <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001baa:	f7fe ffc7 	bl	8000b3c <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e05c      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x416>
 8001bc8:	e054      	b.n	8001c74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <HAL_RCC_OscConfig+0x478>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7fe ffb4 	bl	8000b3c <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd8:	f7fe ffb0 	bl	8000b3c <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e045      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_RCC_OscConfig+0x470>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x444>
 8001bf6:	e03d      	b.n	8001c74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d107      	bne.n	8001c10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e038      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40007000 	.word	0x40007000
 8001c0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <HAL_RCC_OscConfig+0x4ec>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d028      	beq.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d121      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d11a      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c40:	4013      	ands	r3, r2
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d111      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c56:	085b      	lsrs	r3, r3, #1
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d107      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d001      	beq.n	8001c74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800

08001c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0cc      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c98:	4b68      	ldr	r3, [pc, #416]	; (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d90c      	bls.n	8001cc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca6:	4b65      	ldr	r3, [pc, #404]	; (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cae:	4b63      	ldr	r3, [pc, #396]	; (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0b8      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d020      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cd8:	4b59      	ldr	r3, [pc, #356]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	4a58      	ldr	r2, [pc, #352]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ce2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cf0:	4b53      	ldr	r3, [pc, #332]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	4a52      	ldr	r2, [pc, #328]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cfc:	4b50      	ldr	r3, [pc, #320]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	494d      	ldr	r1, [pc, #308]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d044      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d107      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	4b47      	ldr	r3, [pc, #284]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d119      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e07f      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d003      	beq.n	8001d42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d107      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d42:	4b3f      	ldr	r3, [pc, #252]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d109      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e06f      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d52:	4b3b      	ldr	r3, [pc, #236]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e067      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d62:	4b37      	ldr	r3, [pc, #220]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f023 0203 	bic.w	r2, r3, #3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	4934      	ldr	r1, [pc, #208]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d74:	f7fe fee2 	bl	8000b3c <HAL_GetTick>
 8001d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7a:	e00a      	b.n	8001d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d7c:	f7fe fede 	bl	8000b3c <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e04f      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d92:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 020c 	and.w	r2, r3, #12
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d1eb      	bne.n	8001d7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da4:	4b25      	ldr	r3, [pc, #148]	; (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d20c      	bcs.n	8001dcc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	4b22      	ldr	r3, [pc, #136]	; (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <HAL_RCC_ClockConfig+0x1b8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e032      	b.n	8001e32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d008      	beq.n	8001dea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	4916      	ldr	r1, [pc, #88]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d009      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001df6:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	490e      	ldr	r1, [pc, #56]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e0a:	f000 f821 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	490a      	ldr	r1, [pc, #40]	; (8001e44 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1c:	5ccb      	ldrb	r3, [r1, r3]
 8001e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e22:	4a09      	ldr	r2, [pc, #36]	; (8001e48 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <HAL_RCC_ClockConfig+0x1c8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe fe42 	bl	8000ab4 <HAL_InitTick>

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023c00 	.word	0x40023c00
 8001e40:	40023800 	.word	0x40023800
 8001e44:	08002d4c 	.word	0x08002d4c
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	20000004 	.word	0x20000004

08001e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e54:	b094      	sub	sp, #80	; 0x50
 8001e56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	647b      	str	r3, [r7, #68]	; 0x44
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e60:	2300      	movs	r3, #0
 8001e62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e68:	4b79      	ldr	r3, [pc, #484]	; (8002050 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 030c 	and.w	r3, r3, #12
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d00d      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0x40>
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	f200 80e1 	bhi.w	800203c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <HAL_RCC_GetSysClockFreq+0x34>
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d003      	beq.n	8001e8a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e82:	e0db      	b.n	800203c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e84:	4b73      	ldr	r3, [pc, #460]	; (8002054 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e86:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e88:	e0db      	b.n	8002042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e8a:	4b73      	ldr	r3, [pc, #460]	; (8002058 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e8e:	e0d8      	b.n	8002042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e90:	4b6f      	ldr	r3, [pc, #444]	; (8002050 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e98:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e9a:	4b6d      	ldr	r3, [pc, #436]	; (8002050 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d063      	beq.n	8001f6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ea6:	4b6a      	ldr	r3, [pc, #424]	; (8002050 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	099b      	lsrs	r3, r3, #6
 8001eac:	2200      	movs	r2, #0
 8001eae:	63bb      	str	r3, [r7, #56]	; 0x38
 8001eb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eb8:	633b      	str	r3, [r7, #48]	; 0x30
 8001eba:	2300      	movs	r3, #0
 8001ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8001ebe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ec2:	4622      	mov	r2, r4
 8001ec4:	462b      	mov	r3, r5
 8001ec6:	f04f 0000 	mov.w	r0, #0
 8001eca:	f04f 0100 	mov.w	r1, #0
 8001ece:	0159      	lsls	r1, r3, #5
 8001ed0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ed4:	0150      	lsls	r0, r2, #5
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4621      	mov	r1, r4
 8001edc:	1a51      	subs	r1, r2, r1
 8001ede:	6139      	str	r1, [r7, #16]
 8001ee0:	4629      	mov	r1, r5
 8001ee2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	f04f 0300 	mov.w	r3, #0
 8001ef0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ef4:	4659      	mov	r1, fp
 8001ef6:	018b      	lsls	r3, r1, #6
 8001ef8:	4651      	mov	r1, sl
 8001efa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001efe:	4651      	mov	r1, sl
 8001f00:	018a      	lsls	r2, r1, #6
 8001f02:	4651      	mov	r1, sl
 8001f04:	ebb2 0801 	subs.w	r8, r2, r1
 8001f08:	4659      	mov	r1, fp
 8001f0a:	eb63 0901 	sbc.w	r9, r3, r1
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f22:	4690      	mov	r8, r2
 8001f24:	4699      	mov	r9, r3
 8001f26:	4623      	mov	r3, r4
 8001f28:	eb18 0303 	adds.w	r3, r8, r3
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	462b      	mov	r3, r5
 8001f30:	eb49 0303 	adc.w	r3, r9, r3
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	f04f 0300 	mov.w	r3, #0
 8001f3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f42:	4629      	mov	r1, r5
 8001f44:	024b      	lsls	r3, r1, #9
 8001f46:	4621      	mov	r1, r4
 8001f48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f4c:	4621      	mov	r1, r4
 8001f4e:	024a      	lsls	r2, r1, #9
 8001f50:	4610      	mov	r0, r2
 8001f52:	4619      	mov	r1, r3
 8001f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f56:	2200      	movs	r2, #0
 8001f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f60:	f7fe f93a 	bl	80001d8 <__aeabi_uldivmod>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4613      	mov	r3, r2
 8001f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f6c:	e058      	b.n	8002020 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f6e:	4b38      	ldr	r3, [pc, #224]	; (8002050 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	099b      	lsrs	r3, r3, #6
 8001f74:	2200      	movs	r2, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	4611      	mov	r1, r2
 8001f7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f7e:	623b      	str	r3, [r7, #32]
 8001f80:	2300      	movs	r3, #0
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
 8001f84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f88:	4642      	mov	r2, r8
 8001f8a:	464b      	mov	r3, r9
 8001f8c:	f04f 0000 	mov.w	r0, #0
 8001f90:	f04f 0100 	mov.w	r1, #0
 8001f94:	0159      	lsls	r1, r3, #5
 8001f96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f9a:	0150      	lsls	r0, r2, #5
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4641      	mov	r1, r8
 8001fa2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001fa6:	4649      	mov	r1, r9
 8001fa8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001fb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001fbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001fc0:	ebb2 040a 	subs.w	r4, r2, sl
 8001fc4:	eb63 050b 	sbc.w	r5, r3, fp
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	f04f 0300 	mov.w	r3, #0
 8001fd0:	00eb      	lsls	r3, r5, #3
 8001fd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fd6:	00e2      	lsls	r2, r4, #3
 8001fd8:	4614      	mov	r4, r2
 8001fda:	461d      	mov	r5, r3
 8001fdc:	4643      	mov	r3, r8
 8001fde:	18e3      	adds	r3, r4, r3
 8001fe0:	603b      	str	r3, [r7, #0]
 8001fe2:	464b      	mov	r3, r9
 8001fe4:	eb45 0303 	adc.w	r3, r5, r3
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ff6:	4629      	mov	r1, r5
 8001ff8:	028b      	lsls	r3, r1, #10
 8001ffa:	4621      	mov	r1, r4
 8001ffc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002000:	4621      	mov	r1, r4
 8002002:	028a      	lsls	r2, r1, #10
 8002004:	4610      	mov	r0, r2
 8002006:	4619      	mov	r1, r3
 8002008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800200a:	2200      	movs	r2, #0
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	61fa      	str	r2, [r7, #28]
 8002010:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002014:	f7fe f8e0 	bl	80001d8 <__aeabi_uldivmod>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4613      	mov	r3, r2
 800201e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <HAL_RCC_GetSysClockFreq+0x200>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	0c1b      	lsrs	r3, r3, #16
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	3301      	adds	r3, #1
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002030:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002034:	fbb2 f3f3 	udiv	r3, r2, r3
 8002038:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800203a:	e002      	b.n	8002042 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_RCC_GetSysClockFreq+0x204>)
 800203e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002044:	4618      	mov	r0, r3
 8002046:	3750      	adds	r7, #80	; 0x50
 8002048:	46bd      	mov	sp, r7
 800204a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800
 8002054:	00f42400 	.word	0x00f42400
 8002058:	007a1200 	.word	0x007a1200

0800205c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <HAL_RCC_GetHCLKFreq+0x14>)
 8002062:	681b      	ldr	r3, [r3, #0]
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20000000 	.word	0x20000000

08002074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002078:	f7ff fff0 	bl	800205c <HAL_RCC_GetHCLKFreq>
 800207c:	4602      	mov	r2, r0
 800207e:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	0a9b      	lsrs	r3, r3, #10
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	4903      	ldr	r1, [pc, #12]	; (8002098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800208a:	5ccb      	ldrb	r3, [r1, r3]
 800208c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002090:	4618      	mov	r0, r3
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40023800 	.word	0x40023800
 8002098:	08002d5c 	.word	0x08002d5c

0800209c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020a0:	f7ff ffdc 	bl	800205c <HAL_RCC_GetHCLKFreq>
 80020a4:	4602      	mov	r2, r0
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	0b5b      	lsrs	r3, r3, #13
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	4903      	ldr	r1, [pc, #12]	; (80020c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020b2:	5ccb      	ldrb	r3, [r1, r3]
 80020b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40023800 	.word	0x40023800
 80020c0:	08002d5c 	.word	0x08002d5c

080020c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e042      	b.n	800215c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d106      	bne.n	80020f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7fe fb9a 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2224      	movs	r2, #36	; 0x24
 80020f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002106:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 fb73 	bl	80027f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800211c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800212c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800213c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2220      	movs	r2, #32
 8002150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08c      	sub	sp, #48	; 0x30
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	4613      	mov	r3, r2
 8002170:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b20      	cmp	r3, #32
 800217c:	d156      	bne.n	800222c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <HAL_UART_Transmit_DMA+0x26>
 8002184:	88fb      	ldrh	r3, [r7, #6]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e04f      	b.n	800222e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	88fa      	ldrh	r2, [r7, #6]
 8002198:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	88fa      	ldrh	r2, [r7, #6]
 800219e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2221      	movs	r2, #33	; 0x21
 80021aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b2:	4a21      	ldr	r2, [pc, #132]	; (8002238 <HAL_UART_Transmit_DMA+0xd4>)
 80021b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ba:	4a20      	ldr	r2, [pc, #128]	; (800223c <HAL_UART_Transmit_DMA+0xd8>)
 80021bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c2:	4a1f      	ldr	r2, [pc, #124]	; (8002240 <HAL_UART_Transmit_DMA+0xdc>)
 80021c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ca:	2200      	movs	r2, #0
 80021cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80021ce:	f107 0308 	add.w	r3, r7, #8
 80021d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80021d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021da:	6819      	ldr	r1, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	3304      	adds	r3, #4
 80021e2:	461a      	mov	r2, r3
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	f7fe fe75 	bl	8000ed4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021f2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	3314      	adds	r3, #20
 80021fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	e853 3f00 	ldrex	r3, [r3]
 8002202:	617b      	str	r3, [r7, #20]
   return(result);
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	3314      	adds	r3, #20
 8002212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002214:	627a      	str	r2, [r7, #36]	; 0x24
 8002216:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002218:	6a39      	ldr	r1, [r7, #32]
 800221a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800221c:	e841 2300 	strex	r3, r2, [r1]
 8002220:	61fb      	str	r3, [r7, #28]
   return(result);
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1e5      	bne.n	80021f4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	e000      	b.n	800222e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800222c:	2302      	movs	r3, #2
  }
}
 800222e:	4618      	mov	r0, r3
 8002230:	3730      	adds	r7, #48	; 0x30
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	080022f7 	.word	0x080022f7
 800223c:	08002391 	.word	0x08002391
 8002240:	08002515 	.word	0x08002515

08002244 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	4613      	mov	r3, r2
 8002250:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b20      	cmp	r3, #32
 800225c:	d112      	bne.n	8002284 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <HAL_UART_Receive_DMA+0x26>
 8002264:	88fb      	ldrh	r3, [r7, #6]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e00b      	b.n	8002286 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	461a      	mov	r2, r3
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f994 	bl	80025a8 <UART_Start_Receive_DMA>
 8002280:	4603      	mov	r3, r0
 8002282:	e000      	b.n	8002286 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002284:	2302      	movs	r3, #2
  }
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	460b      	mov	r3, r1
 80022e8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b090      	sub	sp, #64	; 0x40
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002302:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d137      	bne.n	8002382 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002314:	2200      	movs	r2, #0
 8002316:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	3314      	adds	r3, #20
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	e853 3f00 	ldrex	r3, [r3]
 8002326:	623b      	str	r3, [r7, #32]
   return(result);
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800232e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	3314      	adds	r3, #20
 8002336:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002338:	633a      	str	r2, [r7, #48]	; 0x30
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800233c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800233e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002340:	e841 2300 	strex	r3, r2, [r1]
 8002344:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1e5      	bne.n	8002318 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800234c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	330c      	adds	r3, #12
 8002352:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	e853 3f00 	ldrex	r3, [r3]
 800235a:	60fb      	str	r3, [r7, #12]
   return(result);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002362:	637b      	str	r3, [r7, #52]	; 0x34
 8002364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	330c      	adds	r3, #12
 800236a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800236c:	61fa      	str	r2, [r7, #28]
 800236e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002370:	69b9      	ldr	r1, [r7, #24]
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	e841 2300 	strex	r3, r2, [r1]
 8002378:	617b      	str	r3, [r7, #20]
   return(result);
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1e5      	bne.n	800234c <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002380:	e002      	b.n	8002388 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002382:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002384:	f7ff ff83 	bl	800228e <HAL_UART_TxCpltCallback>
}
 8002388:	bf00      	nop
 800238a:	3740      	adds	r7, #64	; 0x40
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f7ff ff7f 	bl	80022a2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80023a4:	bf00      	nop
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b09c      	sub	sp, #112	; 0x70
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d172      	bne.n	80024ae <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80023c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023ca:	2200      	movs	r2, #0
 80023cc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	330c      	adds	r3, #12
 80023d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023d8:	e853 3f00 	ldrex	r3, [r3]
 80023dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80023de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80023e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	330c      	adds	r3, #12
 80023ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80023ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80023f0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80023f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023f6:	e841 2300 	strex	r3, r2, [r1]
 80023fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80023fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1e5      	bne.n	80023ce <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	3314      	adds	r3, #20
 8002408:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800240a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240c:	e853 3f00 	ldrex	r3, [r3]
 8002410:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	667b      	str	r3, [r7, #100]	; 0x64
 800241a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	3314      	adds	r3, #20
 8002420:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002422:	647a      	str	r2, [r7, #68]	; 0x44
 8002424:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002426:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002428:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800242a:	e841 2300 	strex	r3, r2, [r1]
 800242e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1e5      	bne.n	8002402 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	3314      	adds	r3, #20
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	e853 3f00 	ldrex	r3, [r3]
 8002444:	623b      	str	r3, [r7, #32]
   return(result);
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800244c:	663b      	str	r3, [r7, #96]	; 0x60
 800244e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	3314      	adds	r3, #20
 8002454:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002456:	633a      	str	r2, [r7, #48]	; 0x30
 8002458:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800245a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800245c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800245e:	e841 2300 	strex	r3, r2, [r1]
 8002462:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1e5      	bne.n	8002436 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800246a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800246c:	2220      	movs	r2, #32
 800246e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	2b01      	cmp	r3, #1
 8002478:	d119      	bne.n	80024ae <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800247a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	330c      	adds	r3, #12
 8002480:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	e853 3f00 	ldrex	r3, [r3]
 8002488:	60fb      	str	r3, [r7, #12]
   return(result);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f023 0310 	bic.w	r3, r3, #16
 8002490:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	330c      	adds	r3, #12
 8002498:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800249a:	61fa      	str	r2, [r7, #28]
 800249c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800249e:	69b9      	ldr	r1, [r7, #24]
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	e841 2300 	strex	r3, r2, [r1]
 80024a6:	617b      	str	r3, [r7, #20]
   return(result);
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1e5      	bne.n	800247a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b0:	2200      	movs	r2, #0
 80024b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d106      	bne.n	80024ca <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80024bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024c0:	4619      	mov	r1, r3
 80024c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80024c4:	f7ff ff0b 	bl	80022de <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80024c8:	e002      	b.n	80024d0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80024ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80024cc:	f7fe f802 	bl	80004d4 <HAL_UART_RxCpltCallback>
}
 80024d0:	bf00      	nop
 80024d2:	3770      	adds	r7, #112	; 0x70
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2201      	movs	r2, #1
 80024ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d108      	bne.n	8002506 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024f8:	085b      	lsrs	r3, r3, #1
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	4619      	mov	r1, r3
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f7ff feed 	bl	80022de <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002504:	e002      	b.n	800250c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f7ff fed5 	bl	80022b6 <HAL_UART_RxHalfCpltCallback>
}
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800251c:	2300      	movs	r3, #0
 800251e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002524:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002530:	2b80      	cmp	r3, #128	; 0x80
 8002532:	bf0c      	ite	eq
 8002534:	2301      	moveq	r3, #1
 8002536:	2300      	movne	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b21      	cmp	r3, #33	; 0x21
 8002546:	d108      	bne.n	800255a <UART_DMAError+0x46>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2200      	movs	r2, #0
 8002552:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002554:	68b8      	ldr	r0, [r7, #8]
 8002556:	f000 f8c1 	bl	80026dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002564:	2b40      	cmp	r3, #64	; 0x40
 8002566:	bf0c      	ite	eq
 8002568:	2301      	moveq	r3, #1
 800256a:	2300      	movne	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b22      	cmp	r3, #34	; 0x22
 800257a:	d108      	bne.n	800258e <UART_DMAError+0x7a>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2200      	movs	r2, #0
 8002586:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002588:	68b8      	ldr	r0, [r7, #8]
 800258a:	f000 f8cf 	bl	800272c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	f043 0210 	orr.w	r2, r3, #16
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800259a:	68b8      	ldr	r0, [r7, #8]
 800259c:	f7ff fe95 	bl	80022ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025a0:	bf00      	nop
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b098      	sub	sp, #96	; 0x60
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	4613      	mov	r3, r2
 80025b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	88fa      	ldrh	r2, [r7, #6]
 80025c0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2222      	movs	r2, #34	; 0x22
 80025cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d4:	4a3e      	ldr	r2, [pc, #248]	; (80026d0 <UART_Start_Receive_DMA+0x128>)
 80025d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025dc:	4a3d      	ldr	r2, [pc, #244]	; (80026d4 <UART_Start_Receive_DMA+0x12c>)
 80025de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e4:	4a3c      	ldr	r2, [pc, #240]	; (80026d8 <UART_Start_Receive_DMA+0x130>)
 80025e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ec:	2200      	movs	r2, #0
 80025ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80025f0:	f107 0308 	add.w	r3, r7, #8
 80025f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	3304      	adds	r3, #4
 8002600:	4619      	mov	r1, r3
 8002602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	f7fe fc64 	bl	8000ed4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800260c:	2300      	movs	r3, #0
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d019      	beq.n	800265e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	330c      	adds	r3, #12
 8002630:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002634:	e853 3f00 	ldrex	r3, [r3]
 8002638:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800263a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800263c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002640:	65bb      	str	r3, [r7, #88]	; 0x58
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	330c      	adds	r3, #12
 8002648:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800264a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800264c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002650:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002652:	e841 2300 	strex	r3, r2, [r1]
 8002656:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1e5      	bne.n	800262a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	3314      	adds	r3, #20
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002668:	e853 3f00 	ldrex	r3, [r3]
 800266c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	657b      	str	r3, [r7, #84]	; 0x54
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	3314      	adds	r3, #20
 800267c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800267e:	63ba      	str	r2, [r7, #56]	; 0x38
 8002680:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002682:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002686:	e841 2300 	strex	r3, r2, [r1]
 800268a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800268c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1e5      	bne.n	800265e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	3314      	adds	r3, #20
 8002698:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	e853 3f00 	ldrex	r3, [r3]
 80026a0:	617b      	str	r3, [r7, #20]
   return(result);
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026a8:	653b      	str	r3, [r7, #80]	; 0x50
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	3314      	adds	r3, #20
 80026b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80026b2:	627a      	str	r2, [r7, #36]	; 0x24
 80026b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b6:	6a39      	ldr	r1, [r7, #32]
 80026b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ba:	e841 2300 	strex	r3, r2, [r1]
 80026be:	61fb      	str	r3, [r7, #28]
   return(result);
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1e5      	bne.n	8002692 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3760      	adds	r7, #96	; 0x60
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	080023ad 	.word	0x080023ad
 80026d4:	080024d9 	.word	0x080024d9
 80026d8:	08002515 	.word	0x08002515

080026dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80026dc:	b480      	push	{r7}
 80026de:	b089      	sub	sp, #36	; 0x24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	330c      	adds	r3, #12
 80026ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	e853 3f00 	ldrex	r3, [r3]
 80026f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80026fa:	61fb      	str	r3, [r7, #28]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	330c      	adds	r3, #12
 8002702:	69fa      	ldr	r2, [r7, #28]
 8002704:	61ba      	str	r2, [r7, #24]
 8002706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002708:	6979      	ldr	r1, [r7, #20]
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	e841 2300 	strex	r3, r2, [r1]
 8002710:	613b      	str	r3, [r7, #16]
   return(result);
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1e5      	bne.n	80026e4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2220      	movs	r2, #32
 800271c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8002720:	bf00      	nop
 8002722:	3724      	adds	r7, #36	; 0x24
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800272c:	b480      	push	{r7}
 800272e:	b095      	sub	sp, #84	; 0x54
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	330c      	adds	r3, #12
 800273a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273e:	e853 3f00 	ldrex	r3, [r3]
 8002742:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002746:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800274a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	330c      	adds	r3, #12
 8002752:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002754:	643a      	str	r2, [r7, #64]	; 0x40
 8002756:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002758:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800275a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800275c:	e841 2300 	strex	r3, r2, [r1]
 8002760:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1e5      	bne.n	8002734 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	3314      	adds	r3, #20
 800276e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	e853 3f00 	ldrex	r3, [r3]
 8002776:	61fb      	str	r3, [r7, #28]
   return(result);
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f023 0301 	bic.w	r3, r3, #1
 800277e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	3314      	adds	r3, #20
 8002786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002788:	62fa      	str	r2, [r7, #44]	; 0x2c
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800278e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002790:	e841 2300 	strex	r3, r2, [r1]
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1e5      	bne.n	8002768 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d119      	bne.n	80027d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	330c      	adds	r3, #12
 80027aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	e853 3f00 	ldrex	r3, [r3]
 80027b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f023 0310 	bic.w	r3, r3, #16
 80027ba:	647b      	str	r3, [r7, #68]	; 0x44
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	330c      	adds	r3, #12
 80027c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027c4:	61ba      	str	r2, [r7, #24]
 80027c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c8:	6979      	ldr	r1, [r7, #20]
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	e841 2300 	strex	r3, r2, [r1]
 80027d0:	613b      	str	r3, [r7, #16]
   return(result);
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1e5      	bne.n	80027a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80027e6:	bf00      	nop
 80027e8:	3754      	adds	r7, #84	; 0x54
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
	...

080027f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027f8:	b0c0      	sub	sp, #256	; 0x100
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800280c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002810:	68d9      	ldr	r1, [r3, #12]
 8002812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	ea40 0301 	orr.w	r3, r0, r1
 800281c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800281e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	431a      	orrs	r2, r3
 800282c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	431a      	orrs	r2, r3
 8002834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	4313      	orrs	r3, r2
 800283c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800284c:	f021 010c 	bic.w	r1, r1, #12
 8002850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800285a:	430b      	orrs	r3, r1
 800285c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800285e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800286a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800286e:	6999      	ldr	r1, [r3, #24]
 8002870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	ea40 0301 	orr.w	r3, r0, r1
 800287a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800287c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	4b8f      	ldr	r3, [pc, #572]	; (8002ac0 <UART_SetConfig+0x2cc>)
 8002884:	429a      	cmp	r2, r3
 8002886:	d005      	beq.n	8002894 <UART_SetConfig+0xa0>
 8002888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	4b8d      	ldr	r3, [pc, #564]	; (8002ac4 <UART_SetConfig+0x2d0>)
 8002890:	429a      	cmp	r2, r3
 8002892:	d104      	bne.n	800289e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002894:	f7ff fc02 	bl	800209c <HAL_RCC_GetPCLK2Freq>
 8002898:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800289c:	e003      	b.n	80028a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800289e:	f7ff fbe9 	bl	8002074 <HAL_RCC_GetPCLK1Freq>
 80028a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028b0:	f040 810c 	bne.w	8002acc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028b8:	2200      	movs	r2, #0
 80028ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80028be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80028c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80028c6:	4622      	mov	r2, r4
 80028c8:	462b      	mov	r3, r5
 80028ca:	1891      	adds	r1, r2, r2
 80028cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80028ce:	415b      	adcs	r3, r3
 80028d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028d6:	4621      	mov	r1, r4
 80028d8:	eb12 0801 	adds.w	r8, r2, r1
 80028dc:	4629      	mov	r1, r5
 80028de:	eb43 0901 	adc.w	r9, r3, r1
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028f6:	4690      	mov	r8, r2
 80028f8:	4699      	mov	r9, r3
 80028fa:	4623      	mov	r3, r4
 80028fc:	eb18 0303 	adds.w	r3, r8, r3
 8002900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002904:	462b      	mov	r3, r5
 8002906:	eb49 0303 	adc.w	r3, r9, r3
 800290a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800290e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800291a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800291e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002922:	460b      	mov	r3, r1
 8002924:	18db      	adds	r3, r3, r3
 8002926:	653b      	str	r3, [r7, #80]	; 0x50
 8002928:	4613      	mov	r3, r2
 800292a:	eb42 0303 	adc.w	r3, r2, r3
 800292e:	657b      	str	r3, [r7, #84]	; 0x54
 8002930:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002934:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002938:	f7fd fc4e 	bl	80001d8 <__aeabi_uldivmod>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4b61      	ldr	r3, [pc, #388]	; (8002ac8 <UART_SetConfig+0x2d4>)
 8002942:	fba3 2302 	umull	r2, r3, r3, r2
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	011c      	lsls	r4, r3, #4
 800294a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800294e:	2200      	movs	r2, #0
 8002950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002954:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002958:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800295c:	4642      	mov	r2, r8
 800295e:	464b      	mov	r3, r9
 8002960:	1891      	adds	r1, r2, r2
 8002962:	64b9      	str	r1, [r7, #72]	; 0x48
 8002964:	415b      	adcs	r3, r3
 8002966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002968:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800296c:	4641      	mov	r1, r8
 800296e:	eb12 0a01 	adds.w	sl, r2, r1
 8002972:	4649      	mov	r1, r9
 8002974:	eb43 0b01 	adc.w	fp, r3, r1
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002984:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002988:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800298c:	4692      	mov	sl, r2
 800298e:	469b      	mov	fp, r3
 8002990:	4643      	mov	r3, r8
 8002992:	eb1a 0303 	adds.w	r3, sl, r3
 8002996:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800299a:	464b      	mov	r3, r9
 800299c:	eb4b 0303 	adc.w	r3, fp, r3
 80029a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80029a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80029b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80029b8:	460b      	mov	r3, r1
 80029ba:	18db      	adds	r3, r3, r3
 80029bc:	643b      	str	r3, [r7, #64]	; 0x40
 80029be:	4613      	mov	r3, r2
 80029c0:	eb42 0303 	adc.w	r3, r2, r3
 80029c4:	647b      	str	r3, [r7, #68]	; 0x44
 80029c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80029ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80029ce:	f7fd fc03 	bl	80001d8 <__aeabi_uldivmod>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4611      	mov	r1, r2
 80029d8:	4b3b      	ldr	r3, [pc, #236]	; (8002ac8 <UART_SetConfig+0x2d4>)
 80029da:	fba3 2301 	umull	r2, r3, r3, r1
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	2264      	movs	r2, #100	; 0x64
 80029e2:	fb02 f303 	mul.w	r3, r2, r3
 80029e6:	1acb      	subs	r3, r1, r3
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80029ee:	4b36      	ldr	r3, [pc, #216]	; (8002ac8 <UART_SetConfig+0x2d4>)
 80029f0:	fba3 2302 	umull	r2, r3, r3, r2
 80029f4:	095b      	lsrs	r3, r3, #5
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029fc:	441c      	add	r4, r3
 80029fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a02:	2200      	movs	r2, #0
 8002a04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002a0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002a10:	4642      	mov	r2, r8
 8002a12:	464b      	mov	r3, r9
 8002a14:	1891      	adds	r1, r2, r2
 8002a16:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a18:	415b      	adcs	r3, r3
 8002a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a20:	4641      	mov	r1, r8
 8002a22:	1851      	adds	r1, r2, r1
 8002a24:	6339      	str	r1, [r7, #48]	; 0x30
 8002a26:	4649      	mov	r1, r9
 8002a28:	414b      	adcs	r3, r1
 8002a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002a38:	4659      	mov	r1, fp
 8002a3a:	00cb      	lsls	r3, r1, #3
 8002a3c:	4651      	mov	r1, sl
 8002a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a42:	4651      	mov	r1, sl
 8002a44:	00ca      	lsls	r2, r1, #3
 8002a46:	4610      	mov	r0, r2
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	4642      	mov	r2, r8
 8002a4e:	189b      	adds	r3, r3, r2
 8002a50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a54:	464b      	mov	r3, r9
 8002a56:	460a      	mov	r2, r1
 8002a58:	eb42 0303 	adc.w	r3, r2, r3
 8002a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002a74:	460b      	mov	r3, r1
 8002a76:	18db      	adds	r3, r3, r3
 8002a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	eb42 0303 	adc.w	r3, r2, r3
 8002a80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002a8a:	f7fd fba5 	bl	80001d8 <__aeabi_uldivmod>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <UART_SetConfig+0x2d4>)
 8002a94:	fba3 1302 	umull	r1, r3, r3, r2
 8002a98:	095b      	lsrs	r3, r3, #5
 8002a9a:	2164      	movs	r1, #100	; 0x64
 8002a9c:	fb01 f303 	mul.w	r3, r1, r3
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	3332      	adds	r3, #50	; 0x32
 8002aa6:	4a08      	ldr	r2, [pc, #32]	; (8002ac8 <UART_SetConfig+0x2d4>)
 8002aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aac:	095b      	lsrs	r3, r3, #5
 8002aae:	f003 0207 	and.w	r2, r3, #7
 8002ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4422      	add	r2, r4
 8002aba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002abc:	e106      	b.n	8002ccc <UART_SetConfig+0x4d8>
 8002abe:	bf00      	nop
 8002ac0:	40011000 	.word	0x40011000
 8002ac4:	40011400 	.word	0x40011400
 8002ac8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002acc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ad6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002ada:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002ade:	4642      	mov	r2, r8
 8002ae0:	464b      	mov	r3, r9
 8002ae2:	1891      	adds	r1, r2, r2
 8002ae4:	6239      	str	r1, [r7, #32]
 8002ae6:	415b      	adcs	r3, r3
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002aee:	4641      	mov	r1, r8
 8002af0:	1854      	adds	r4, r2, r1
 8002af2:	4649      	mov	r1, r9
 8002af4:	eb43 0501 	adc.w	r5, r3, r1
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	00eb      	lsls	r3, r5, #3
 8002b02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b06:	00e2      	lsls	r2, r4, #3
 8002b08:	4614      	mov	r4, r2
 8002b0a:	461d      	mov	r5, r3
 8002b0c:	4643      	mov	r3, r8
 8002b0e:	18e3      	adds	r3, r4, r3
 8002b10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b14:	464b      	mov	r3, r9
 8002b16:	eb45 0303 	adc.w	r3, r5, r3
 8002b1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b3a:	4629      	mov	r1, r5
 8002b3c:	008b      	lsls	r3, r1, #2
 8002b3e:	4621      	mov	r1, r4
 8002b40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b44:	4621      	mov	r1, r4
 8002b46:	008a      	lsls	r2, r1, #2
 8002b48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002b4c:	f7fd fb44 	bl	80001d8 <__aeabi_uldivmod>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4b60      	ldr	r3, [pc, #384]	; (8002cd8 <UART_SetConfig+0x4e4>)
 8002b56:	fba3 2302 	umull	r2, r3, r3, r2
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	011c      	lsls	r4, r3, #4
 8002b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b62:	2200      	movs	r2, #0
 8002b64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b68:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002b70:	4642      	mov	r2, r8
 8002b72:	464b      	mov	r3, r9
 8002b74:	1891      	adds	r1, r2, r2
 8002b76:	61b9      	str	r1, [r7, #24]
 8002b78:	415b      	adcs	r3, r3
 8002b7a:	61fb      	str	r3, [r7, #28]
 8002b7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b80:	4641      	mov	r1, r8
 8002b82:	1851      	adds	r1, r2, r1
 8002b84:	6139      	str	r1, [r7, #16]
 8002b86:	4649      	mov	r1, r9
 8002b88:	414b      	adcs	r3, r1
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b98:	4659      	mov	r1, fp
 8002b9a:	00cb      	lsls	r3, r1, #3
 8002b9c:	4651      	mov	r1, sl
 8002b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ba2:	4651      	mov	r1, sl
 8002ba4:	00ca      	lsls	r2, r1, #3
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	4642      	mov	r2, r8
 8002bae:	189b      	adds	r3, r3, r2
 8002bb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bb4:	464b      	mov	r3, r9
 8002bb6:	460a      	mov	r2, r1
 8002bb8:	eb42 0303 	adc.w	r3, r2, r3
 8002bbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bca:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002bd8:	4649      	mov	r1, r9
 8002bda:	008b      	lsls	r3, r1, #2
 8002bdc:	4641      	mov	r1, r8
 8002bde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002be2:	4641      	mov	r1, r8
 8002be4:	008a      	lsls	r2, r1, #2
 8002be6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002bea:	f7fd faf5 	bl	80001d8 <__aeabi_uldivmod>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4b38      	ldr	r3, [pc, #224]	; (8002cd8 <UART_SetConfig+0x4e4>)
 8002bf6:	fba3 2301 	umull	r2, r3, r3, r1
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	2264      	movs	r2, #100	; 0x64
 8002bfe:	fb02 f303 	mul.w	r3, r2, r3
 8002c02:	1acb      	subs	r3, r1, r3
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	3332      	adds	r3, #50	; 0x32
 8002c08:	4a33      	ldr	r2, [pc, #204]	; (8002cd8 <UART_SetConfig+0x4e4>)
 8002c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0e:	095b      	lsrs	r3, r3, #5
 8002c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c14:	441c      	add	r4, r3
 8002c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	673b      	str	r3, [r7, #112]	; 0x70
 8002c1e:	677a      	str	r2, [r7, #116]	; 0x74
 8002c20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c24:	4642      	mov	r2, r8
 8002c26:	464b      	mov	r3, r9
 8002c28:	1891      	adds	r1, r2, r2
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	415b      	adcs	r3, r3
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c34:	4641      	mov	r1, r8
 8002c36:	1851      	adds	r1, r2, r1
 8002c38:	6039      	str	r1, [r7, #0]
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	414b      	adcs	r3, r1
 8002c3e:	607b      	str	r3, [r7, #4]
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c4c:	4659      	mov	r1, fp
 8002c4e:	00cb      	lsls	r3, r1, #3
 8002c50:	4651      	mov	r1, sl
 8002c52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c56:	4651      	mov	r1, sl
 8002c58:	00ca      	lsls	r2, r1, #3
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4603      	mov	r3, r0
 8002c60:	4642      	mov	r2, r8
 8002c62:	189b      	adds	r3, r3, r2
 8002c64:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c66:	464b      	mov	r3, r9
 8002c68:	460a      	mov	r2, r1
 8002c6a:	eb42 0303 	adc.w	r3, r2, r3
 8002c6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	663b      	str	r3, [r7, #96]	; 0x60
 8002c7a:	667a      	str	r2, [r7, #100]	; 0x64
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002c88:	4649      	mov	r1, r9
 8002c8a:	008b      	lsls	r3, r1, #2
 8002c8c:	4641      	mov	r1, r8
 8002c8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c92:	4641      	mov	r1, r8
 8002c94:	008a      	lsls	r2, r1, #2
 8002c96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002c9a:	f7fd fa9d 	bl	80001d8 <__aeabi_uldivmod>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <UART_SetConfig+0x4e4>)
 8002ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	2164      	movs	r1, #100	; 0x64
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	3332      	adds	r3, #50	; 0x32
 8002cb6:	4a08      	ldr	r2, [pc, #32]	; (8002cd8 <UART_SetConfig+0x4e4>)
 8002cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbc:	095b      	lsrs	r3, r3, #5
 8002cbe:	f003 020f 	and.w	r2, r3, #15
 8002cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4422      	add	r2, r4
 8002cca:	609a      	str	r2, [r3, #8]
}
 8002ccc:	bf00      	nop
 8002cce:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cd8:	51eb851f 	.word	0x51eb851f

08002cdc <memset>:
 8002cdc:	4402      	add	r2, r0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d100      	bne.n	8002ce6 <memset+0xa>
 8002ce4:	4770      	bx	lr
 8002ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8002cea:	e7f9      	b.n	8002ce0 <memset+0x4>

08002cec <__libc_init_array>:
 8002cec:	b570      	push	{r4, r5, r6, lr}
 8002cee:	4d0d      	ldr	r5, [pc, #52]	; (8002d24 <__libc_init_array+0x38>)
 8002cf0:	4c0d      	ldr	r4, [pc, #52]	; (8002d28 <__libc_init_array+0x3c>)
 8002cf2:	1b64      	subs	r4, r4, r5
 8002cf4:	10a4      	asrs	r4, r4, #2
 8002cf6:	2600      	movs	r6, #0
 8002cf8:	42a6      	cmp	r6, r4
 8002cfa:	d109      	bne.n	8002d10 <__libc_init_array+0x24>
 8002cfc:	4d0b      	ldr	r5, [pc, #44]	; (8002d2c <__libc_init_array+0x40>)
 8002cfe:	4c0c      	ldr	r4, [pc, #48]	; (8002d30 <__libc_init_array+0x44>)
 8002d00:	f000 f818 	bl	8002d34 <_init>
 8002d04:	1b64      	subs	r4, r4, r5
 8002d06:	10a4      	asrs	r4, r4, #2
 8002d08:	2600      	movs	r6, #0
 8002d0a:	42a6      	cmp	r6, r4
 8002d0c:	d105      	bne.n	8002d1a <__libc_init_array+0x2e>
 8002d0e:	bd70      	pop	{r4, r5, r6, pc}
 8002d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d14:	4798      	blx	r3
 8002d16:	3601      	adds	r6, #1
 8002d18:	e7ee      	b.n	8002cf8 <__libc_init_array+0xc>
 8002d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d1e:	4798      	blx	r3
 8002d20:	3601      	adds	r6, #1
 8002d22:	e7f2      	b.n	8002d0a <__libc_init_array+0x1e>
 8002d24:	08002d74 	.word	0x08002d74
 8002d28:	08002d74 	.word	0x08002d74
 8002d2c:	08002d74 	.word	0x08002d74
 8002d30:	08002d78 	.word	0x08002d78

08002d34 <_init>:
 8002d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d36:	bf00      	nop
 8002d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d3a:	bc08      	pop	{r3}
 8002d3c:	469e      	mov	lr, r3
 8002d3e:	4770      	bx	lr

08002d40 <_fini>:
 8002d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d42:	bf00      	nop
 8002d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d46:	bc08      	pop	{r3}
 8002d48:	469e      	mov	lr, r3
 8002d4a:	4770      	bx	lr
