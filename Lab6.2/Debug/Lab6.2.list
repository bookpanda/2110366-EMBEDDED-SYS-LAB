
Lab6.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bc8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004d68  08004d68  00014d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e28  08004e28  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004e28  08004e28  00014e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e30  08004e30  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e30  08004e30  00014e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e34  08004e34  00014e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049cc  20000010  08004e48  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049dc  08004e48  000249dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f1d  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002858  00000000  00000000  00030fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  000337f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af0  00000000  00000000  00034638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000027fa  00000000  00000000  00035128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f501  00000000  00000000  00037922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f840  00000000  00000000  00046e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ad4  00000000  00000000  000d6664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000da138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004d50 	.word	0x08004d50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004d50 	.word	0x08004d50

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fa96 	bl	8000a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f854 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8e4 	bl	80006b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f8b8 	bl	8000660 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f0:	f001 fd2e 	bl	8001f50 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of led_1 */
  led_1Handle = osTimerNew(led_callback_1, osTimerPeriodic, NULL, &led_1_attributes);
 80004f4:	4b17      	ldr	r3, [pc, #92]	; (8000554 <main+0x78>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	2101      	movs	r1, #1
 80004fa:	4817      	ldr	r0, [pc, #92]	; (8000558 <main+0x7c>)
 80004fc:	f001 fe34 	bl	8002168 <osTimerNew>
 8000500:	4603      	mov	r3, r0
 8000502:	4a16      	ldr	r2, [pc, #88]	; (800055c <main+0x80>)
 8000504:	6013      	str	r3, [r2, #0]

  /* creation of led_2 */
  led_2Handle = osTimerNew(led_callback_2, osTimerPeriodic, NULL, &led_2_attributes);
 8000506:	4b16      	ldr	r3, [pc, #88]	; (8000560 <main+0x84>)
 8000508:	2200      	movs	r2, #0
 800050a:	2101      	movs	r1, #1
 800050c:	4815      	ldr	r0, [pc, #84]	; (8000564 <main+0x88>)
 800050e:	f001 fe2b 	bl	8002168 <osTimerNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a14      	ldr	r2, [pc, #80]	; (8000568 <main+0x8c>)
 8000516:	6013      	str	r3, [r2, #0]

  /* creation of led_3 */
  led_3Handle = osTimerNew(led_callback_3, osTimerPeriodic, NULL, &led_3_attributes);
 8000518:	4b14      	ldr	r3, [pc, #80]	; (800056c <main+0x90>)
 800051a:	2200      	movs	r2, #0
 800051c:	2101      	movs	r1, #1
 800051e:	4814      	ldr	r0, [pc, #80]	; (8000570 <main+0x94>)
 8000520:	f001 fe22 	bl	8002168 <osTimerNew>
 8000524:	4603      	mov	r3, r0
 8000526:	4a13      	ldr	r2, [pc, #76]	; (8000574 <main+0x98>)
 8000528:	6013      	str	r3, [r2, #0]

  /* creation of led_4 */
  led_4Handle = osTimerNew(led_callback_4, osTimerPeriodic, NULL, &led_4_attributes);
 800052a:	4b13      	ldr	r3, [pc, #76]	; (8000578 <main+0x9c>)
 800052c:	2200      	movs	r2, #0
 800052e:	2101      	movs	r1, #1
 8000530:	4812      	ldr	r0, [pc, #72]	; (800057c <main+0xa0>)
 8000532:	f001 fe19 	bl	8002168 <osTimerNew>
 8000536:	4603      	mov	r3, r0
 8000538:	4a11      	ldr	r2, [pc, #68]	; (8000580 <main+0xa4>)
 800053a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800053c:	4a11      	ldr	r2, [pc, #68]	; (8000584 <main+0xa8>)
 800053e:	2100      	movs	r1, #0
 8000540:	4811      	ldr	r0, [pc, #68]	; (8000588 <main+0xac>)
 8000542:	f001 fd4f 	bl	8001fe4 <osThreadNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a10      	ldr	r2, [pc, #64]	; (800058c <main+0xb0>)
 800054a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800054c:	f001 fd24 	bl	8001f98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000550:	e7fe      	b.n	8000550 <main+0x74>
 8000552:	bf00      	nop
 8000554:	08004dd0 	.word	0x08004dd0
 8000558:	080007e9 	.word	0x080007e9
 800055c:	20000078 	.word	0x20000078
 8000560:	08004de0 	.word	0x08004de0
 8000564:	08000805 	.word	0x08000805
 8000568:	2000007c 	.word	0x2000007c
 800056c:	08004df0 	.word	0x08004df0
 8000570:	08000821 	.word	0x08000821
 8000574:	20000080 	.word	0x20000080
 8000578:	08004e00 	.word	0x08004e00
 800057c:	0800083d 	.word	0x0800083d
 8000580:	20000084 	.word	0x20000084
 8000584:	08004dac 	.word	0x08004dac
 8000588:	08000795 	.word	0x08000795
 800058c:	20000074 	.word	0x20000074

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f004 fb9c 	bl	8004cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b27      	ldr	r3, [pc, #156]	; (8000658 <SystemClock_Config+0xc8>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a26      	ldr	r2, [pc, #152]	; (8000658 <SystemClock_Config+0xc8>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b24      	ldr	r3, [pc, #144]	; (8000658 <SystemClock_Config+0xc8>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b21      	ldr	r3, [pc, #132]	; (800065c <SystemClock_Config+0xcc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a20      	ldr	r2, [pc, #128]	; (800065c <SystemClock_Config+0xcc>)
 80005da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b1e      	ldr	r3, [pc, #120]	; (800065c <SystemClock_Config+0xcc>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ec:	2302      	movs	r3, #2
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f4:	2310      	movs	r3, #16
 80005f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f8:	2302      	movs	r3, #2
 80005fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fc:	2300      	movs	r3, #0
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000600:	2308      	movs	r3, #8
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000604:	2364      	movs	r3, #100	; 0x64
 8000606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000608:	2302      	movs	r3, #2
 800060a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800060c:	2304      	movs	r3, #4
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0320 	add.w	r3, r7, #32
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fd0b 	bl	8001030 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000620:	f000 f91c 	bl	800085c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000628:	2302      	movs	r3, #2
 800062a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000634:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2103      	movs	r1, #3
 8000640:	4618      	mov	r0, r3
 8000642:	f000 ff6d 	bl	8001520 <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800064c:	f000 f906 	bl	800085c <Error_Handler>
  }
}
 8000650:	bf00      	nop
 8000652:	3750      	adds	r7, #80	; 0x50
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000666:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <MX_USART2_UART_Init+0x50>)
 8000668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 800066c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000686:	220c      	movs	r2, #12
 8000688:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_USART2_UART_Init+0x4c>)
 8000698:	f001 f962 	bl	8001960 <HAL_UART_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006a2:	f000 f8db 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	2000002c 	.word	0x2000002c
 80006b0:	40004400 	.word	0x40004400

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <MX_GPIO_Init+0xd4>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a2d      	ldr	r2, [pc, #180]	; (8000788 <MX_GPIO_Init+0xd4>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <MX_GPIO_Init+0xd4>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	4b27      	ldr	r3, [pc, #156]	; (8000788 <MX_GPIO_Init+0xd4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a26      	ldr	r2, [pc, #152]	; (8000788 <MX_GPIO_Init+0xd4>)
 80006f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b24      	ldr	r3, [pc, #144]	; (8000788 <MX_GPIO_Init+0xd4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <MX_GPIO_Init+0xd4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a1f      	ldr	r2, [pc, #124]	; (8000788 <MX_GPIO_Init+0xd4>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <MX_GPIO_Init+0xd4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b19      	ldr	r3, [pc, #100]	; (8000788 <MX_GPIO_Init+0xd4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a18      	ldr	r2, [pc, #96]	; (8000788 <MX_GPIO_Init+0xd4>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <MX_GPIO_Init+0xd4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	f240 2123 	movw	r1, #547	; 0x223
 8000740:	4812      	ldr	r0, [pc, #72]	; (800078c <MX_GPIO_Init+0xd8>)
 8000742:	f000 fc41 	bl	8000fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800074c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	480c      	ldr	r0, [pc, #48]	; (8000790 <MX_GPIO_Init+0xdc>)
 800075e:	f000 faaf 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin|GPIO_PIN_9;
 8000762:	f240 2323 	movw	r3, #547	; 0x223
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_GPIO_Init+0xd8>)
 800077c:	f000 faa0 	bl	8000cc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000780:	bf00      	nop
 8000782:	3728      	adds	r7, #40	; 0x28
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40020000 	.word	0x40020000
 8000790:	40020800 	.word	0x40020800

08000794 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  osTimerStart(led_1Handle, 50);
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <StartDefaultTask+0x44>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2132      	movs	r1, #50	; 0x32
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fd5c 	bl	8002260 <osTimerStart>
  osTimerStart(led_2Handle, 18);
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <StartDefaultTask+0x48>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2112      	movs	r1, #18
 80007ae:	4618      	mov	r0, r3
 80007b0:	f001 fd56 	bl	8002260 <osTimerStart>
  osTimerStart(led_3Handle, 128);
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <StartDefaultTask+0x4c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 fd50 	bl	8002260 <osTimerStart>
  osTimerStart(led_4Handle, 64);
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <StartDefaultTask+0x50>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2140      	movs	r1, #64	; 0x40
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 fd4a 	bl	8002260 <osTimerStart>
  for(;;)
  {
    osDelay(1000);
 80007cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d0:	f001 fc9a 	bl	8002108 <osDelay>
 80007d4:	e7fa      	b.n	80007cc <StartDefaultTask+0x38>
 80007d6:	bf00      	nop
 80007d8:	20000078 	.word	0x20000078
 80007dc:	2000007c 	.word	0x2000007c
 80007e0:	20000080 	.word	0x20000080
 80007e4:	20000084 	.word	0x20000084

080007e8 <led_callback_1>:
  /* USER CODE END 5 */
}

/* led_callback_1 function */
void led_callback_1(void *argument)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_callback_1 */
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007f0:	2120      	movs	r1, #32
 80007f2:	4803      	ldr	r0, [pc, #12]	; (8000800 <led_callback_1+0x18>)
 80007f4:	f000 fc01 	bl	8000ffa <HAL_GPIO_TogglePin>
  /* USER CODE END led_callback_1 */
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40020000 	.word	0x40020000

08000804 <led_callback_2>:

/* led_callback_2 function */
void led_callback_2(void *argument)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_callback_2 */
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800080c:	2101      	movs	r1, #1
 800080e:	4803      	ldr	r0, [pc, #12]	; (800081c <led_callback_2+0x18>)
 8000810:	f000 fbf3 	bl	8000ffa <HAL_GPIO_TogglePin>
  /* USER CODE END led_callback_2 */
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40020000 	.word	0x40020000

08000820 <led_callback_3>:

/* led_callback_3 function */
void led_callback_3(void *argument)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_callback_3 */
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000828:	2102      	movs	r1, #2
 800082a:	4803      	ldr	r0, [pc, #12]	; (8000838 <led_callback_3+0x18>)
 800082c:	f000 fbe5 	bl	8000ffa <HAL_GPIO_TogglePin>
  /* USER CODE END led_callback_3 */
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40020000 	.word	0x40020000

0800083c <led_callback_4>:

/* led_callback_4 function */
void led_callback_4(void *argument)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_callback_4 */
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000844:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000848:	4803      	ldr	r0, [pc, #12]	; (8000858 <led_callback_4+0x1c>)
 800084a:	f000 fbd6 	bl	8000ffa <HAL_GPIO_TogglePin>
  /* USER CODE END led_callback_4 */
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40020000 	.word	0x40020000

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000864:	e7fe      	b.n	8000864 <Error_Handler+0x8>
	...

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_MspInit+0x54>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	4a11      	ldr	r2, [pc, #68]	; (80008bc <HAL_MspInit+0x54>)
 8000878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087c:	6453      	str	r3, [r2, #68]	; 0x44
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <HAL_MspInit+0x54>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <HAL_MspInit+0x54>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <HAL_MspInit+0x54>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000898:	6413      	str	r3, [r2, #64]	; 0x40
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <HAL_MspInit+0x54>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	210f      	movs	r1, #15
 80008aa:	f06f 0001 	mvn.w	r0, #1
 80008ae:	f000 f9de 	bl	8000c6e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800

080008c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a19      	ldr	r2, [pc, #100]	; (8000944 <HAL_UART_MspInit+0x84>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d12b      	bne.n	800093a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b18      	ldr	r3, [pc, #96]	; (8000948 <HAL_UART_MspInit+0x88>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a17      	ldr	r2, [pc, #92]	; (8000948 <HAL_UART_MspInit+0x88>)
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <HAL_UART_MspInit+0x88>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <HAL_UART_MspInit+0x88>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a10      	ldr	r2, [pc, #64]	; (8000948 <HAL_UART_MspInit+0x88>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_UART_MspInit+0x88>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800091a:	230c      	movs	r3, #12
 800091c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000926:	2303      	movs	r3, #3
 8000928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800092a:	2307      	movs	r3, #7
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <HAL_UART_MspInit+0x8c>)
 8000936:	f000 f9c3 	bl	8000cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800093a:	bf00      	nop
 800093c:	3728      	adds	r7, #40	; 0x28
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40004400 	.word	0x40004400
 8000948:	40023800 	.word	0x40023800
 800094c:	40020000 	.word	0x40020000

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <MemManage_Handler+0x4>

08000962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <UsageFault_Handler+0x4>

0800096e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000980:	f000 f898 	bl	8000ab4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000984:	f003 f88c 	bl	8003aa0 <xTaskGetSchedulerState>
 8000988:	4603      	mov	r3, r0
 800098a:	2b01      	cmp	r3, #1
 800098c:	d001      	beq.n	8000992 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800098e:	f003 ff2b 	bl	80047e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <SystemInit+0x20>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <SystemInit+0x20>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009c0:	f7ff ffea 	bl	8000998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c4:	480c      	ldr	r0, [pc, #48]	; (80009f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009c6:	490d      	ldr	r1, [pc, #52]	; (80009fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009c8:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009cc:	e002      	b.n	80009d4 <LoopCopyDataInit>

080009ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d2:	3304      	adds	r3, #4

080009d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d8:	d3f9      	bcc.n	80009ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009dc:	4c0a      	ldr	r4, [pc, #40]	; (8000a08 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e0:	e001      	b.n	80009e6 <LoopFillZerobss>

080009e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e4:	3204      	adds	r2, #4

080009e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e8:	d3fb      	bcc.n	80009e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ea:	f004 f97f 	bl	8004cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ee:	f7ff fd75 	bl	80004dc <main>
  bx  lr    
 80009f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a00:	08004e38 	.word	0x08004e38
  ldr r2, =_sbss
 8000a04:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a08:	200049dc 	.word	0x200049dc

08000a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC_IRQHandler>
	...

08000a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_Init+0x40>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <HAL_Init+0x40>)
 8000a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a20:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <HAL_Init+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <HAL_Init+0x40>)
 8000a26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <HAL_Init+0x40>)
 8000a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 f90d 	bl	8000c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3e:	200f      	movs	r0, #15
 8000a40:	f000 f808 	bl	8000a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a44:	f7ff ff10 	bl	8000868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023c00 	.word	0x40023c00

08000a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_InitTick+0x54>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_InitTick+0x58>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f917 	bl	8000ca6 <HAL_SYSTICK_Config>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00e      	b.n	8000aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d80a      	bhi.n	8000a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a90:	f000 f8ed 	bl	8000c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <HAL_InitTick+0x5c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	20000004 	.word	0x20000004

08000ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_IncTick+0x20>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_IncTick+0x24>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <HAL_IncTick+0x24>)
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	20000088 	.word	0x20000088

08000adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <HAL_GetTick+0x14>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000088 	.word	0x20000088

08000af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b10:	4013      	ands	r3, r2
 8000b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b26:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	60d3      	str	r3, [r2, #12]
}
 8000b2c:	bf00      	nop
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <__NVIC_GetPriorityGrouping+0x18>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	0a1b      	lsrs	r3, r3, #8
 8000b46:	f003 0307 	and.w	r3, r3, #7
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	6039      	str	r1, [r7, #0]
 8000b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	db0a      	blt.n	8000b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	490c      	ldr	r1, [pc, #48]	; (8000ba4 <__NVIC_SetPriority+0x4c>)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	0112      	lsls	r2, r2, #4
 8000b78:	b2d2      	uxtb	r2, r2
 8000b7a:	440b      	add	r3, r1
 8000b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b80:	e00a      	b.n	8000b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4908      	ldr	r1, [pc, #32]	; (8000ba8 <__NVIC_SetPriority+0x50>)
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	f003 030f 	and.w	r3, r3, #15
 8000b8e:	3b04      	subs	r3, #4
 8000b90:	0112      	lsls	r2, r2, #4
 8000b92:	b2d2      	uxtb	r2, r2
 8000b94:	440b      	add	r3, r1
 8000b96:	761a      	strb	r2, [r3, #24]
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000e100 	.word	0xe000e100
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b089      	sub	sp, #36	; 0x24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	f1c3 0307 	rsb	r3, r3, #7
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	bf28      	it	cs
 8000bca:	2304      	movcs	r3, #4
 8000bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	2b06      	cmp	r3, #6
 8000bd4:	d902      	bls.n	8000bdc <NVIC_EncodePriority+0x30>
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3b03      	subs	r3, #3
 8000bda:	e000      	b.n	8000bde <NVIC_EncodePriority+0x32>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43da      	mvns	r2, r3
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	401a      	ands	r2, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfe:	43d9      	mvns	r1, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	4313      	orrs	r3, r2
         );
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3724      	adds	r7, #36	; 0x24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c24:	d301      	bcc.n	8000c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c26:	2301      	movs	r3, #1
 8000c28:	e00f      	b.n	8000c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <SysTick_Config+0x40>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c32:	210f      	movs	r1, #15
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c38:	f7ff ff8e 	bl	8000b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <SysTick_Config+0x40>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c42:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <SysTick_Config+0x40>)
 8000c44:	2207      	movs	r2, #7
 8000c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	e000e010 	.word	0xe000e010

08000c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff ff47 	bl	8000af4 <__NVIC_SetPriorityGrouping>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b086      	sub	sp, #24
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c80:	f7ff ff5c 	bl	8000b3c <__NVIC_GetPriorityGrouping>
 8000c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	68b9      	ldr	r1, [r7, #8]
 8000c8a:	6978      	ldr	r0, [r7, #20]
 8000c8c:	f7ff ff8e 	bl	8000bac <NVIC_EncodePriority>
 8000c90:	4602      	mov	r2, r0
 8000c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c96:	4611      	mov	r1, r2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff5d 	bl	8000b58 <__NVIC_SetPriority>
}
 8000c9e:	bf00      	nop
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ffb0 	bl	8000c14 <SysTick_Config>
 8000cb4:	4603      	mov	r3, r0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
 8000cda:	e159      	b.n	8000f90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cdc:	2201      	movs	r2, #1
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	f040 8148 	bne.w	8000f8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 0303 	and.w	r3, r3, #3
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d005      	beq.n	8000d12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d130      	bne.n	8000d74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4013      	ands	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	68da      	ldr	r2, [r3, #12]
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d48:	2201      	movs	r2, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	091b      	lsrs	r3, r3, #4
 8000d5e:	f003 0201 	and.w	r2, r3, #1
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	d017      	beq.n	8000db0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d123      	bne.n	8000e04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	08da      	lsrs	r2, r3, #3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3208      	adds	r2, #8
 8000dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	f003 0307 	and.w	r3, r3, #7
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	691a      	ldr	r2, [r3, #16]
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	08da      	lsrs	r2, r3, #3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3208      	adds	r2, #8
 8000dfe:	69b9      	ldr	r1, [r7, #24]
 8000e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0203 	and.w	r2, r3, #3
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 80a2 	beq.w	8000f8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b57      	ldr	r3, [pc, #348]	; (8000fa8 <HAL_GPIO_Init+0x2e8>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	4a56      	ldr	r2, [pc, #344]	; (8000fa8 <HAL_GPIO_Init+0x2e8>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e54:	6453      	str	r3, [r2, #68]	; 0x44
 8000e56:	4b54      	ldr	r3, [pc, #336]	; (8000fa8 <HAL_GPIO_Init+0x2e8>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e62:	4a52      	ldr	r2, [pc, #328]	; (8000fac <HAL_GPIO_Init+0x2ec>)
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	3302      	adds	r3, #2
 8000e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	220f      	movs	r2, #15
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a49      	ldr	r2, [pc, #292]	; (8000fb0 <HAL_GPIO_Init+0x2f0>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d019      	beq.n	8000ec2 <HAL_GPIO_Init+0x202>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a48      	ldr	r2, [pc, #288]	; (8000fb4 <HAL_GPIO_Init+0x2f4>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d013      	beq.n	8000ebe <HAL_GPIO_Init+0x1fe>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a47      	ldr	r2, [pc, #284]	; (8000fb8 <HAL_GPIO_Init+0x2f8>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d00d      	beq.n	8000eba <HAL_GPIO_Init+0x1fa>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a46      	ldr	r2, [pc, #280]	; (8000fbc <HAL_GPIO_Init+0x2fc>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d007      	beq.n	8000eb6 <HAL_GPIO_Init+0x1f6>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a45      	ldr	r2, [pc, #276]	; (8000fc0 <HAL_GPIO_Init+0x300>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d101      	bne.n	8000eb2 <HAL_GPIO_Init+0x1f2>
 8000eae:	2304      	movs	r3, #4
 8000eb0:	e008      	b.n	8000ec4 <HAL_GPIO_Init+0x204>
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	e006      	b.n	8000ec4 <HAL_GPIO_Init+0x204>
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e004      	b.n	8000ec4 <HAL_GPIO_Init+0x204>
 8000eba:	2302      	movs	r3, #2
 8000ebc:	e002      	b.n	8000ec4 <HAL_GPIO_Init+0x204>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e000      	b.n	8000ec4 <HAL_GPIO_Init+0x204>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	69fa      	ldr	r2, [r7, #28]
 8000ec6:	f002 0203 	and.w	r2, r2, #3
 8000eca:	0092      	lsls	r2, r2, #2
 8000ecc:	4093      	lsls	r3, r2
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ed4:	4935      	ldr	r1, [pc, #212]	; (8000fac <HAL_GPIO_Init+0x2ec>)
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	089b      	lsrs	r3, r3, #2
 8000eda:	3302      	adds	r3, #2
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ee2:	4b38      	ldr	r3, [pc, #224]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f06:	4a2f      	ldr	r2, [pc, #188]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f0c:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f30:	4a24      	ldr	r2, [pc, #144]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f36:	4b23      	ldr	r3, [pc, #140]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f5a:	4a1a      	ldr	r2, [pc, #104]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f60:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f84:	4a0f      	ldr	r2, [pc, #60]	; (8000fc4 <HAL_GPIO_Init+0x304>)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	61fb      	str	r3, [r7, #28]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	2b0f      	cmp	r3, #15
 8000f94:	f67f aea2 	bls.w	8000cdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	3724      	adds	r7, #36	; 0x24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40013800 	.word	0x40013800
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	40020400 	.word	0x40020400
 8000fb8:	40020800 	.word	0x40020800
 8000fbc:	40020c00 	.word	0x40020c00
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40013c00 	.word	0x40013c00

08000fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	807b      	strh	r3, [r7, #2]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fd8:	787b      	ldrb	r3, [r7, #1]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fde:	887a      	ldrh	r2, [r7, #2]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fe4:	e003      	b.n	8000fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fe6:	887b      	ldrh	r3, [r7, #2]
 8000fe8:	041a      	lsls	r2, r3, #16
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	619a      	str	r2, [r3, #24]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b085      	sub	sp, #20
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	460b      	mov	r3, r1
 8001004:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800100c:	887a      	ldrh	r2, [r7, #2]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4013      	ands	r3, r2
 8001012:	041a      	lsls	r2, r3, #16
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	43d9      	mvns	r1, r3
 8001018:	887b      	ldrh	r3, [r7, #2]
 800101a:	400b      	ands	r3, r1
 800101c:	431a      	orrs	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	619a      	str	r2, [r3, #24]
}
 8001022:	bf00      	nop
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d101      	bne.n	8001042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e267      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	2b00      	cmp	r3, #0
 800104c:	d075      	beq.n	800113a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800104e:	4b88      	ldr	r3, [pc, #544]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 030c 	and.w	r3, r3, #12
 8001056:	2b04      	cmp	r3, #4
 8001058:	d00c      	beq.n	8001074 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800105a:	4b85      	ldr	r3, [pc, #532]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001062:	2b08      	cmp	r3, #8
 8001064:	d112      	bne.n	800108c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001066:	4b82      	ldr	r3, [pc, #520]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800106e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001072:	d10b      	bne.n	800108c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001074:	4b7e      	ldr	r3, [pc, #504]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d05b      	beq.n	8001138 <HAL_RCC_OscConfig+0x108>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d157      	bne.n	8001138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e242      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001094:	d106      	bne.n	80010a4 <HAL_RCC_OscConfig+0x74>
 8001096:	4b76      	ldr	r3, [pc, #472]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a75      	ldr	r2, [pc, #468]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 800109c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	e01d      	b.n	80010e0 <HAL_RCC_OscConfig+0xb0>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010ac:	d10c      	bne.n	80010c8 <HAL_RCC_OscConfig+0x98>
 80010ae:	4b70      	ldr	r3, [pc, #448]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a6f      	ldr	r2, [pc, #444]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 80010b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	4b6d      	ldr	r3, [pc, #436]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a6c      	ldr	r2, [pc, #432]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 80010c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	e00b      	b.n	80010e0 <HAL_RCC_OscConfig+0xb0>
 80010c8:	4b69      	ldr	r3, [pc, #420]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a68      	ldr	r2, [pc, #416]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 80010ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b66      	ldr	r3, [pc, #408]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a65      	ldr	r2, [pc, #404]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 80010da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d013      	beq.n	8001110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e8:	f7ff fcf8 	bl	8000adc <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f0:	f7ff fcf4 	bl	8000adc <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b64      	cmp	r3, #100	; 0x64
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e207      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001102:	4b5b      	ldr	r3, [pc, #364]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f0      	beq.n	80010f0 <HAL_RCC_OscConfig+0xc0>
 800110e:	e014      	b.n	800113a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001110:	f7ff fce4 	bl	8000adc <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001118:	f7ff fce0 	bl	8000adc <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b64      	cmp	r3, #100	; 0x64
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e1f3      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800112a:	4b51      	ldr	r3, [pc, #324]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f0      	bne.n	8001118 <HAL_RCC_OscConfig+0xe8>
 8001136:	e000      	b.n	800113a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d063      	beq.n	800120e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001146:	4b4a      	ldr	r3, [pc, #296]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 030c 	and.w	r3, r3, #12
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00b      	beq.n	800116a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001152:	4b47      	ldr	r3, [pc, #284]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800115a:	2b08      	cmp	r3, #8
 800115c:	d11c      	bne.n	8001198 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800115e:	4b44      	ldr	r3, [pc, #272]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d116      	bne.n	8001198 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116a:	4b41      	ldr	r3, [pc, #260]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d005      	beq.n	8001182 <HAL_RCC_OscConfig+0x152>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d001      	beq.n	8001182 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e1c7      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001182:	4b3b      	ldr	r3, [pc, #236]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	4937      	ldr	r1, [pc, #220]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 8001192:	4313      	orrs	r3, r2
 8001194:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001196:	e03a      	b.n	800120e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d020      	beq.n	80011e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a0:	4b34      	ldr	r3, [pc, #208]	; (8001274 <HAL_RCC_OscConfig+0x244>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a6:	f7ff fc99 	bl	8000adc <HAL_GetTick>
 80011aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ae:	f7ff fc95 	bl	8000adc <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e1a8      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0f0      	beq.n	80011ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	4925      	ldr	r1, [pc, #148]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 80011dc:	4313      	orrs	r3, r2
 80011de:	600b      	str	r3, [r1, #0]
 80011e0:	e015      	b.n	800120e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011e2:	4b24      	ldr	r3, [pc, #144]	; (8001274 <HAL_RCC_OscConfig+0x244>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e8:	f7ff fc78 	bl	8000adc <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f0:	f7ff fc74 	bl	8000adc <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e187      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f0      	bne.n	80011f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	2b00      	cmp	r3, #0
 8001218:	d036      	beq.n	8001288 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d016      	beq.n	8001250 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <HAL_RCC_OscConfig+0x248>)
 8001224:	2201      	movs	r2, #1
 8001226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001228:	f7ff fc58 	bl	8000adc <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001230:	f7ff fc54 	bl	8000adc <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e167      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_RCC_OscConfig+0x240>)
 8001244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0x200>
 800124e:	e01b      	b.n	8001288 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <HAL_RCC_OscConfig+0x248>)
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001256:	f7ff fc41 	bl	8000adc <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800125c:	e00e      	b.n	800127c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800125e:	f7ff fc3d 	bl	8000adc <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d907      	bls.n	800127c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e150      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
 8001270:	40023800 	.word	0x40023800
 8001274:	42470000 	.word	0x42470000
 8001278:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800127c:	4b88      	ldr	r3, [pc, #544]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 800127e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1ea      	bne.n	800125e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 8097 	beq.w	80013c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800129a:	4b81      	ldr	r3, [pc, #516]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10f      	bne.n	80012c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	4b7d      	ldr	r3, [pc, #500]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	4a7c      	ldr	r2, [pc, #496]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b4:	6413      	str	r3, [r2, #64]	; 0x40
 80012b6:	4b7a      	ldr	r3, [pc, #488]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012c2:	2301      	movs	r3, #1
 80012c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c6:	4b77      	ldr	r3, [pc, #476]	; (80014a4 <HAL_RCC_OscConfig+0x474>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d118      	bne.n	8001304 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012d2:	4b74      	ldr	r3, [pc, #464]	; (80014a4 <HAL_RCC_OscConfig+0x474>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a73      	ldr	r2, [pc, #460]	; (80014a4 <HAL_RCC_OscConfig+0x474>)
 80012d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012de:	f7ff fbfd 	bl	8000adc <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012e6:	f7ff fbf9 	bl	8000adc <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e10c      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f8:	4b6a      	ldr	r3, [pc, #424]	; (80014a4 <HAL_RCC_OscConfig+0x474>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0f0      	beq.n	80012e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d106      	bne.n	800131a <HAL_RCC_OscConfig+0x2ea>
 800130c:	4b64      	ldr	r3, [pc, #400]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 800130e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001310:	4a63      	ldr	r2, [pc, #396]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6713      	str	r3, [r2, #112]	; 0x70
 8001318:	e01c      	b.n	8001354 <HAL_RCC_OscConfig+0x324>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b05      	cmp	r3, #5
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0x30c>
 8001322:	4b5f      	ldr	r3, [pc, #380]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001326:	4a5e      	ldr	r2, [pc, #376]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	6713      	str	r3, [r2, #112]	; 0x70
 800132e:	4b5c      	ldr	r3, [pc, #368]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001332:	4a5b      	ldr	r2, [pc, #364]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6713      	str	r3, [r2, #112]	; 0x70
 800133a:	e00b      	b.n	8001354 <HAL_RCC_OscConfig+0x324>
 800133c:	4b58      	ldr	r3, [pc, #352]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 800133e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001340:	4a57      	ldr	r2, [pc, #348]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001342:	f023 0301 	bic.w	r3, r3, #1
 8001346:	6713      	str	r3, [r2, #112]	; 0x70
 8001348:	4b55      	ldr	r3, [pc, #340]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 800134a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134c:	4a54      	ldr	r2, [pc, #336]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 800134e:	f023 0304 	bic.w	r3, r3, #4
 8001352:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d015      	beq.n	8001388 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800135c:	f7ff fbbe 	bl	8000adc <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001362:	e00a      	b.n	800137a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001364:	f7ff fbba 	bl	8000adc <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001372:	4293      	cmp	r3, r2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e0cb      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800137a:	4b49      	ldr	r3, [pc, #292]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 800137c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0ee      	beq.n	8001364 <HAL_RCC_OscConfig+0x334>
 8001386:	e014      	b.n	80013b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001388:	f7ff fba8 	bl	8000adc <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800138e:	e00a      	b.n	80013a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001390:	f7ff fba4 	bl	8000adc <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	f241 3288 	movw	r2, #5000	; 0x1388
 800139e:	4293      	cmp	r3, r2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e0b5      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a6:	4b3e      	ldr	r3, [pc, #248]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 80013a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1ee      	bne.n	8001390 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013b2:	7dfb      	ldrb	r3, [r7, #23]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d105      	bne.n	80013c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b8:	4b39      	ldr	r3, [pc, #228]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	4a38      	ldr	r2, [pc, #224]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 80013be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 80a1 	beq.w	8001510 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013ce:	4b34      	ldr	r3, [pc, #208]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d05c      	beq.n	8001494 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d141      	bne.n	8001466 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e2:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <HAL_RCC_OscConfig+0x478>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fb78 	bl	8000adc <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f0:	f7ff fb74 	bl	8000adc <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e087      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001402:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69da      	ldr	r2, [r3, #28]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a1b      	ldr	r3, [r3, #32]
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141c:	019b      	lsls	r3, r3, #6
 800141e:	431a      	orrs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001424:	085b      	lsrs	r3, r3, #1
 8001426:	3b01      	subs	r3, #1
 8001428:	041b      	lsls	r3, r3, #16
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001430:	061b      	lsls	r3, r3, #24
 8001432:	491b      	ldr	r1, [pc, #108]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001434:	4313      	orrs	r3, r2
 8001436:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_RCC_OscConfig+0x478>)
 800143a:	2201      	movs	r2, #1
 800143c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143e:	f7ff fb4d 	bl	8000adc <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001446:	f7ff fb49 	bl	8000adc <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e05c      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0x416>
 8001464:	e054      	b.n	8001510 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <HAL_RCC_OscConfig+0x478>)
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff fb36 	bl	8000adc <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001474:	f7ff fb32 	bl	8000adc <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e045      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x444>
 8001492:	e03d      	b.n	8001510 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d107      	bne.n	80014ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e038      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40007000 	.word	0x40007000
 80014a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <HAL_RCC_OscConfig+0x4ec>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d028      	beq.n	800150c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d121      	bne.n	800150c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d11a      	bne.n	800150c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014dc:	4013      	ands	r3, r2
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d111      	bne.n	800150c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f2:	085b      	lsrs	r3, r3, #1
 80014f4:	3b01      	subs	r3, #1
 80014f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d107      	bne.n	800150c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001506:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001508:	429a      	cmp	r2, r3
 800150a:	d001      	beq.n	8001510 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e000      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800

08001520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e0cc      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001534:	4b68      	ldr	r3, [pc, #416]	; (80016d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d90c      	bls.n	800155c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001542:	4b65      	ldr	r3, [pc, #404]	; (80016d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800154a:	4b63      	ldr	r3, [pc, #396]	; (80016d8 <HAL_RCC_ClockConfig+0x1b8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d001      	beq.n	800155c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0b8      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d020      	beq.n	80015aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001574:	4b59      	ldr	r3, [pc, #356]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	4a58      	ldr	r2, [pc, #352]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 800157a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800157e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	2b00      	cmp	r3, #0
 800158a:	d005      	beq.n	8001598 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800158c:	4b53      	ldr	r3, [pc, #332]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	4a52      	ldr	r2, [pc, #328]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001596:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001598:	4b50      	ldr	r3, [pc, #320]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	494d      	ldr	r1, [pc, #308]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d044      	beq.n	8001640 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d107      	bne.n	80015ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015be:	4b47      	ldr	r3, [pc, #284]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d119      	bne.n	80015fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e07f      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d003      	beq.n	80015de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d107      	bne.n	80015ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015de:	4b3f      	ldr	r3, [pc, #252]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d109      	bne.n	80015fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e06f      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ee:	4b3b      	ldr	r3, [pc, #236]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e067      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015fe:	4b37      	ldr	r3, [pc, #220]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f023 0203 	bic.w	r2, r3, #3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	4934      	ldr	r1, [pc, #208]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 800160c:	4313      	orrs	r3, r2
 800160e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001610:	f7ff fa64 	bl	8000adc <HAL_GetTick>
 8001614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001616:	e00a      	b.n	800162e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001618:	f7ff fa60 	bl	8000adc <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f241 3288 	movw	r2, #5000	; 0x1388
 8001626:	4293      	cmp	r3, r2
 8001628:	d901      	bls.n	800162e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e04f      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162e:	4b2b      	ldr	r3, [pc, #172]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 020c 	and.w	r2, r3, #12
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	429a      	cmp	r2, r3
 800163e:	d1eb      	bne.n	8001618 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001640:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d20c      	bcs.n	8001668 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164e:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001656:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	429a      	cmp	r2, r3
 8001662:	d001      	beq.n	8001668 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e032      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	d008      	beq.n	8001686 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	4916      	ldr	r1, [pc, #88]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	4313      	orrs	r3, r2
 8001684:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	2b00      	cmp	r3, #0
 8001690:	d009      	beq.n	80016a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	490e      	ldr	r1, [pc, #56]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016a6:	f000 f821 	bl	80016ec <HAL_RCC_GetSysClockFreq>
 80016aa:	4602      	mov	r2, r0
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	091b      	lsrs	r3, r3, #4
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	490a      	ldr	r1, [pc, #40]	; (80016e0 <HAL_RCC_ClockConfig+0x1c0>)
 80016b8:	5ccb      	ldrb	r3, [r1, r3]
 80016ba:	fa22 f303 	lsr.w	r3, r2, r3
 80016be:	4a09      	ldr	r2, [pc, #36]	; (80016e4 <HAL_RCC_ClockConfig+0x1c4>)
 80016c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_RCC_ClockConfig+0x1c8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff f9c4 	bl	8000a54 <HAL_InitTick>

  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023c00 	.word	0x40023c00
 80016dc:	40023800 	.word	0x40023800
 80016e0:	08004e10 	.word	0x08004e10
 80016e4:	20000000 	.word	0x20000000
 80016e8:	20000004 	.word	0x20000004

080016ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016f0:	b094      	sub	sp, #80	; 0x50
 80016f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	647b      	str	r3, [r7, #68]	; 0x44
 80016f8:	2300      	movs	r3, #0
 80016fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016fc:	2300      	movs	r3, #0
 80016fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001704:	4b79      	ldr	r3, [pc, #484]	; (80018ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 030c 	and.w	r3, r3, #12
 800170c:	2b08      	cmp	r3, #8
 800170e:	d00d      	beq.n	800172c <HAL_RCC_GetSysClockFreq+0x40>
 8001710:	2b08      	cmp	r3, #8
 8001712:	f200 80e1 	bhi.w	80018d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001716:	2b00      	cmp	r3, #0
 8001718:	d002      	beq.n	8001720 <HAL_RCC_GetSysClockFreq+0x34>
 800171a:	2b04      	cmp	r3, #4
 800171c:	d003      	beq.n	8001726 <HAL_RCC_GetSysClockFreq+0x3a>
 800171e:	e0db      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001720:	4b73      	ldr	r3, [pc, #460]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001722:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001724:	e0db      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001726:	4b73      	ldr	r3, [pc, #460]	; (80018f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001728:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800172a:	e0d8      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800172c:	4b6f      	ldr	r3, [pc, #444]	; (80018ec <HAL_RCC_GetSysClockFreq+0x200>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001734:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001736:	4b6d      	ldr	r3, [pc, #436]	; (80018ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d063      	beq.n	800180a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001742:	4b6a      	ldr	r3, [pc, #424]	; (80018ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	099b      	lsrs	r3, r3, #6
 8001748:	2200      	movs	r2, #0
 800174a:	63bb      	str	r3, [r7, #56]	; 0x38
 800174c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800174e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001754:	633b      	str	r3, [r7, #48]	; 0x30
 8001756:	2300      	movs	r3, #0
 8001758:	637b      	str	r3, [r7, #52]	; 0x34
 800175a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800175e:	4622      	mov	r2, r4
 8001760:	462b      	mov	r3, r5
 8001762:	f04f 0000 	mov.w	r0, #0
 8001766:	f04f 0100 	mov.w	r1, #0
 800176a:	0159      	lsls	r1, r3, #5
 800176c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001770:	0150      	lsls	r0, r2, #5
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4621      	mov	r1, r4
 8001778:	1a51      	subs	r1, r2, r1
 800177a:	6139      	str	r1, [r7, #16]
 800177c:	4629      	mov	r1, r5
 800177e:	eb63 0301 	sbc.w	r3, r3, r1
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001790:	4659      	mov	r1, fp
 8001792:	018b      	lsls	r3, r1, #6
 8001794:	4651      	mov	r1, sl
 8001796:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800179a:	4651      	mov	r1, sl
 800179c:	018a      	lsls	r2, r1, #6
 800179e:	4651      	mov	r1, sl
 80017a0:	ebb2 0801 	subs.w	r8, r2, r1
 80017a4:	4659      	mov	r1, fp
 80017a6:	eb63 0901 	sbc.w	r9, r3, r1
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017be:	4690      	mov	r8, r2
 80017c0:	4699      	mov	r9, r3
 80017c2:	4623      	mov	r3, r4
 80017c4:	eb18 0303 	adds.w	r3, r8, r3
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	462b      	mov	r3, r5
 80017cc:	eb49 0303 	adc.w	r3, r9, r3
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017de:	4629      	mov	r1, r5
 80017e0:	024b      	lsls	r3, r1, #9
 80017e2:	4621      	mov	r1, r4
 80017e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017e8:	4621      	mov	r1, r4
 80017ea:	024a      	lsls	r2, r1, #9
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017f2:	2200      	movs	r2, #0
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80017f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017fc:	f7fe fcf0 	bl	80001e0 <__aeabi_uldivmod>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4613      	mov	r3, r2
 8001806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001808:	e058      	b.n	80018bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180a:	4b38      	ldr	r3, [pc, #224]	; (80018ec <HAL_RCC_GetSysClockFreq+0x200>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	099b      	lsrs	r3, r3, #6
 8001810:	2200      	movs	r2, #0
 8001812:	4618      	mov	r0, r3
 8001814:	4611      	mov	r1, r2
 8001816:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800181a:	623b      	str	r3, [r7, #32]
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
 8001820:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001824:	4642      	mov	r2, r8
 8001826:	464b      	mov	r3, r9
 8001828:	f04f 0000 	mov.w	r0, #0
 800182c:	f04f 0100 	mov.w	r1, #0
 8001830:	0159      	lsls	r1, r3, #5
 8001832:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001836:	0150      	lsls	r0, r2, #5
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4641      	mov	r1, r8
 800183e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001842:	4649      	mov	r1, r9
 8001844:	eb63 0b01 	sbc.w	fp, r3, r1
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	f04f 0300 	mov.w	r3, #0
 8001850:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001854:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001858:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800185c:	ebb2 040a 	subs.w	r4, r2, sl
 8001860:	eb63 050b 	sbc.w	r5, r3, fp
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	00eb      	lsls	r3, r5, #3
 800186e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001872:	00e2      	lsls	r2, r4, #3
 8001874:	4614      	mov	r4, r2
 8001876:	461d      	mov	r5, r3
 8001878:	4643      	mov	r3, r8
 800187a:	18e3      	adds	r3, r4, r3
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	464b      	mov	r3, r9
 8001880:	eb45 0303 	adc.w	r3, r5, r3
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001892:	4629      	mov	r1, r5
 8001894:	028b      	lsls	r3, r1, #10
 8001896:	4621      	mov	r1, r4
 8001898:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800189c:	4621      	mov	r1, r4
 800189e:	028a      	lsls	r2, r1, #10
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018a6:	2200      	movs	r2, #0
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	61fa      	str	r2, [r7, #28]
 80018ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018b0:	f7fe fc96 	bl	80001e0 <__aeabi_uldivmod>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4613      	mov	r3, r2
 80018ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_RCC_GetSysClockFreq+0x200>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	0c1b      	lsrs	r3, r3, #16
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	3301      	adds	r3, #1
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80018cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018d6:	e002      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80018da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3750      	adds	r7, #80	; 0x50
 80018e4:	46bd      	mov	sp, r7
 80018e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	00f42400 	.word	0x00f42400
 80018f4:	007a1200 	.word	0x007a1200

080018f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <HAL_RCC_GetHCLKFreq+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000000 	.word	0x20000000

08001910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001914:	f7ff fff0 	bl	80018f8 <HAL_RCC_GetHCLKFreq>
 8001918:	4602      	mov	r2, r0
 800191a:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	0a9b      	lsrs	r3, r3, #10
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	4903      	ldr	r1, [pc, #12]	; (8001934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001926:	5ccb      	ldrb	r3, [r1, r3]
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800192c:	4618      	mov	r0, r3
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40023800 	.word	0x40023800
 8001934:	08004e20 	.word	0x08004e20

08001938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800193c:	f7ff ffdc 	bl	80018f8 <HAL_RCC_GetHCLKFreq>
 8001940:	4602      	mov	r2, r0
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	0b5b      	lsrs	r3, r3, #13
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	4903      	ldr	r1, [pc, #12]	; (800195c <HAL_RCC_GetPCLK2Freq+0x24>)
 800194e:	5ccb      	ldrb	r3, [r1, r3]
 8001950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	08004e20 	.word	0x08004e20

08001960 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e042      	b.n	80019f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d106      	bne.n	800198c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7fe ff9a 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2224      	movs	r2, #36	; 0x24
 8001990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f82b 	bl	8001a00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	695a      	ldr	r2, [r3, #20]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2220      	movs	r2, #32
 80019e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2220      	movs	r2, #32
 80019ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a04:	b0c0      	sub	sp, #256	; 0x100
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a1c:	68d9      	ldr	r1, [r3, #12]
 8001a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	ea40 0301 	orr.w	r3, r0, r1
 8001a28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	431a      	orrs	r2, r3
 8001a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001a58:	f021 010c 	bic.w	r1, r1, #12
 8001a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001a66:	430b      	orrs	r3, r1
 8001a68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a7a:	6999      	ldr	r1, [r3, #24]
 8001a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	ea40 0301 	orr.w	r3, r0, r1
 8001a86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	4b8f      	ldr	r3, [pc, #572]	; (8001ccc <UART_SetConfig+0x2cc>)
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d005      	beq.n	8001aa0 <UART_SetConfig+0xa0>
 8001a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	4b8d      	ldr	r3, [pc, #564]	; (8001cd0 <UART_SetConfig+0x2d0>)
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d104      	bne.n	8001aaa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001aa0:	f7ff ff4a 	bl	8001938 <HAL_RCC_GetPCLK2Freq>
 8001aa4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001aa8:	e003      	b.n	8001ab2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001aaa:	f7ff ff31 	bl	8001910 <HAL_RCC_GetPCLK1Freq>
 8001aae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001abc:	f040 810c 	bne.w	8001cd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001aca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001ace:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001ad2:	4622      	mov	r2, r4
 8001ad4:	462b      	mov	r3, r5
 8001ad6:	1891      	adds	r1, r2, r2
 8001ad8:	65b9      	str	r1, [r7, #88]	; 0x58
 8001ada:	415b      	adcs	r3, r3
 8001adc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ade:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	eb12 0801 	adds.w	r8, r2, r1
 8001ae8:	4629      	mov	r1, r5
 8001aea:	eb43 0901 	adc.w	r9, r3, r1
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b02:	4690      	mov	r8, r2
 8001b04:	4699      	mov	r9, r3
 8001b06:	4623      	mov	r3, r4
 8001b08:	eb18 0303 	adds.w	r3, r8, r3
 8001b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001b10:	462b      	mov	r3, r5
 8001b12:	eb49 0303 	adc.w	r3, r9, r3
 8001b16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001b26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001b2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001b2e:	460b      	mov	r3, r1
 8001b30:	18db      	adds	r3, r3, r3
 8001b32:	653b      	str	r3, [r7, #80]	; 0x50
 8001b34:	4613      	mov	r3, r2
 8001b36:	eb42 0303 	adc.w	r3, r2, r3
 8001b3a:	657b      	str	r3, [r7, #84]	; 0x54
 8001b3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001b40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001b44:	f7fe fb4c 	bl	80001e0 <__aeabi_uldivmod>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4b61      	ldr	r3, [pc, #388]	; (8001cd4 <UART_SetConfig+0x2d4>)
 8001b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	011c      	lsls	r4, r3, #4
 8001b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001b60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001b64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001b68:	4642      	mov	r2, r8
 8001b6a:	464b      	mov	r3, r9
 8001b6c:	1891      	adds	r1, r2, r2
 8001b6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8001b70:	415b      	adcs	r3, r3
 8001b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001b78:	4641      	mov	r1, r8
 8001b7a:	eb12 0a01 	adds.w	sl, r2, r1
 8001b7e:	4649      	mov	r1, r9
 8001b80:	eb43 0b01 	adc.w	fp, r3, r1
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b98:	4692      	mov	sl, r2
 8001b9a:	469b      	mov	fp, r3
 8001b9c:	4643      	mov	r3, r8
 8001b9e:	eb1a 0303 	adds.w	r3, sl, r3
 8001ba2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ba6:	464b      	mov	r3, r9
 8001ba8:	eb4b 0303 	adc.w	r3, fp, r3
 8001bac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001bbc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001bc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	18db      	adds	r3, r3, r3
 8001bc8:	643b      	str	r3, [r7, #64]	; 0x40
 8001bca:	4613      	mov	r3, r2
 8001bcc:	eb42 0303 	adc.w	r3, r2, r3
 8001bd0:	647b      	str	r3, [r7, #68]	; 0x44
 8001bd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001bd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001bda:	f7fe fb01 	bl	80001e0 <__aeabi_uldivmod>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4611      	mov	r1, r2
 8001be4:	4b3b      	ldr	r3, [pc, #236]	; (8001cd4 <UART_SetConfig+0x2d4>)
 8001be6:	fba3 2301 	umull	r2, r3, r3, r1
 8001bea:	095b      	lsrs	r3, r3, #5
 8001bec:	2264      	movs	r2, #100	; 0x64
 8001bee:	fb02 f303 	mul.w	r3, r2, r3
 8001bf2:	1acb      	subs	r3, r1, r3
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001bfa:	4b36      	ldr	r3, [pc, #216]	; (8001cd4 <UART_SetConfig+0x2d4>)
 8001bfc:	fba3 2302 	umull	r2, r3, r3, r2
 8001c00:	095b      	lsrs	r3, r3, #5
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001c08:	441c      	add	r4, r3
 8001c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001c18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001c1c:	4642      	mov	r2, r8
 8001c1e:	464b      	mov	r3, r9
 8001c20:	1891      	adds	r1, r2, r2
 8001c22:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c24:	415b      	adcs	r3, r3
 8001c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c2c:	4641      	mov	r1, r8
 8001c2e:	1851      	adds	r1, r2, r1
 8001c30:	6339      	str	r1, [r7, #48]	; 0x30
 8001c32:	4649      	mov	r1, r9
 8001c34:	414b      	adcs	r3, r1
 8001c36:	637b      	str	r3, [r7, #52]	; 0x34
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001c44:	4659      	mov	r1, fp
 8001c46:	00cb      	lsls	r3, r1, #3
 8001c48:	4651      	mov	r1, sl
 8001c4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c4e:	4651      	mov	r1, sl
 8001c50:	00ca      	lsls	r2, r1, #3
 8001c52:	4610      	mov	r0, r2
 8001c54:	4619      	mov	r1, r3
 8001c56:	4603      	mov	r3, r0
 8001c58:	4642      	mov	r2, r8
 8001c5a:	189b      	adds	r3, r3, r2
 8001c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001c60:	464b      	mov	r3, r9
 8001c62:	460a      	mov	r2, r1
 8001c64:	eb42 0303 	adc.w	r3, r2, r3
 8001c68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001c78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001c7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001c80:	460b      	mov	r3, r1
 8001c82:	18db      	adds	r3, r3, r3
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c86:	4613      	mov	r3, r2
 8001c88:	eb42 0303 	adc.w	r3, r2, r3
 8001c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001c96:	f7fe faa3 	bl	80001e0 <__aeabi_uldivmod>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <UART_SetConfig+0x2d4>)
 8001ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ca4:	095b      	lsrs	r3, r3, #5
 8001ca6:	2164      	movs	r1, #100	; 0x64
 8001ca8:	fb01 f303 	mul.w	r3, r1, r3
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	3332      	adds	r3, #50	; 0x32
 8001cb2:	4a08      	ldr	r2, [pc, #32]	; (8001cd4 <UART_SetConfig+0x2d4>)
 8001cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb8:	095b      	lsrs	r3, r3, #5
 8001cba:	f003 0207 	and.w	r2, r3, #7
 8001cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4422      	add	r2, r4
 8001cc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001cc8:	e106      	b.n	8001ed8 <UART_SetConfig+0x4d8>
 8001cca:	bf00      	nop
 8001ccc:	40011000 	.word	0x40011000
 8001cd0:	40011400 	.word	0x40011400
 8001cd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001ce2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001ce6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001cea:	4642      	mov	r2, r8
 8001cec:	464b      	mov	r3, r9
 8001cee:	1891      	adds	r1, r2, r2
 8001cf0:	6239      	str	r1, [r7, #32]
 8001cf2:	415b      	adcs	r3, r3
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cfa:	4641      	mov	r1, r8
 8001cfc:	1854      	adds	r4, r2, r1
 8001cfe:	4649      	mov	r1, r9
 8001d00:	eb43 0501 	adc.w	r5, r3, r1
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	00eb      	lsls	r3, r5, #3
 8001d0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d12:	00e2      	lsls	r2, r4, #3
 8001d14:	4614      	mov	r4, r2
 8001d16:	461d      	mov	r5, r3
 8001d18:	4643      	mov	r3, r8
 8001d1a:	18e3      	adds	r3, r4, r3
 8001d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d20:	464b      	mov	r3, r9
 8001d22:	eb45 0303 	adc.w	r3, r5, r3
 8001d26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001d46:	4629      	mov	r1, r5
 8001d48:	008b      	lsls	r3, r1, #2
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d50:	4621      	mov	r1, r4
 8001d52:	008a      	lsls	r2, r1, #2
 8001d54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001d58:	f7fe fa42 	bl	80001e0 <__aeabi_uldivmod>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4b60      	ldr	r3, [pc, #384]	; (8001ee4 <UART_SetConfig+0x4e4>)
 8001d62:	fba3 2302 	umull	r2, r3, r3, r2
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	011c      	lsls	r4, r3, #4
 8001d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001d74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001d78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001d7c:	4642      	mov	r2, r8
 8001d7e:	464b      	mov	r3, r9
 8001d80:	1891      	adds	r1, r2, r2
 8001d82:	61b9      	str	r1, [r7, #24]
 8001d84:	415b      	adcs	r3, r3
 8001d86:	61fb      	str	r3, [r7, #28]
 8001d88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d8c:	4641      	mov	r1, r8
 8001d8e:	1851      	adds	r1, r2, r1
 8001d90:	6139      	str	r1, [r7, #16]
 8001d92:	4649      	mov	r1, r9
 8001d94:	414b      	adcs	r3, r1
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001da4:	4659      	mov	r1, fp
 8001da6:	00cb      	lsls	r3, r1, #3
 8001da8:	4651      	mov	r1, sl
 8001daa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dae:	4651      	mov	r1, sl
 8001db0:	00ca      	lsls	r2, r1, #3
 8001db2:	4610      	mov	r0, r2
 8001db4:	4619      	mov	r1, r3
 8001db6:	4603      	mov	r3, r0
 8001db8:	4642      	mov	r2, r8
 8001dba:	189b      	adds	r3, r3, r2
 8001dbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001dc0:	464b      	mov	r3, r9
 8001dc2:	460a      	mov	r2, r1
 8001dc4:	eb42 0303 	adc.w	r3, r2, r3
 8001dc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001dd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001de4:	4649      	mov	r1, r9
 8001de6:	008b      	lsls	r3, r1, #2
 8001de8:	4641      	mov	r1, r8
 8001dea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001dee:	4641      	mov	r1, r8
 8001df0:	008a      	lsls	r2, r1, #2
 8001df2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001df6:	f7fe f9f3 	bl	80001e0 <__aeabi_uldivmod>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4611      	mov	r1, r2
 8001e00:	4b38      	ldr	r3, [pc, #224]	; (8001ee4 <UART_SetConfig+0x4e4>)
 8001e02:	fba3 2301 	umull	r2, r3, r3, r1
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	2264      	movs	r2, #100	; 0x64
 8001e0a:	fb02 f303 	mul.w	r3, r2, r3
 8001e0e:	1acb      	subs	r3, r1, r3
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	3332      	adds	r3, #50	; 0x32
 8001e14:	4a33      	ldr	r2, [pc, #204]	; (8001ee4 <UART_SetConfig+0x4e4>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e20:	441c      	add	r4, r3
 8001e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e26:	2200      	movs	r2, #0
 8001e28:	673b      	str	r3, [r7, #112]	; 0x70
 8001e2a:	677a      	str	r2, [r7, #116]	; 0x74
 8001e2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001e30:	4642      	mov	r2, r8
 8001e32:	464b      	mov	r3, r9
 8001e34:	1891      	adds	r1, r2, r2
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	415b      	adcs	r3, r3
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e40:	4641      	mov	r1, r8
 8001e42:	1851      	adds	r1, r2, r1
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	4649      	mov	r1, r9
 8001e48:	414b      	adcs	r3, r1
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001e58:	4659      	mov	r1, fp
 8001e5a:	00cb      	lsls	r3, r1, #3
 8001e5c:	4651      	mov	r1, sl
 8001e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e62:	4651      	mov	r1, sl
 8001e64:	00ca      	lsls	r2, r1, #3
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	4642      	mov	r2, r8
 8001e6e:	189b      	adds	r3, r3, r2
 8001e70:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e72:	464b      	mov	r3, r9
 8001e74:	460a      	mov	r2, r1
 8001e76:	eb42 0303 	adc.w	r3, r2, r3
 8001e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	663b      	str	r3, [r7, #96]	; 0x60
 8001e86:	667a      	str	r2, [r7, #100]	; 0x64
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001e94:	4649      	mov	r1, r9
 8001e96:	008b      	lsls	r3, r1, #2
 8001e98:	4641      	mov	r1, r8
 8001e9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e9e:	4641      	mov	r1, r8
 8001ea0:	008a      	lsls	r2, r1, #2
 8001ea2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001ea6:	f7fe f99b 	bl	80001e0 <__aeabi_uldivmod>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <UART_SetConfig+0x4e4>)
 8001eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8001eb4:	095b      	lsrs	r3, r3, #5
 8001eb6:	2164      	movs	r1, #100	; 0x64
 8001eb8:	fb01 f303 	mul.w	r3, r1, r3
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	3332      	adds	r3, #50	; 0x32
 8001ec2:	4a08      	ldr	r2, [pc, #32]	; (8001ee4 <UART_SetConfig+0x4e4>)
 8001ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec8:	095b      	lsrs	r3, r3, #5
 8001eca:	f003 020f 	and.w	r2, r3, #15
 8001ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4422      	add	r2, r4
 8001ed6:	609a      	str	r2, [r3, #8]
}
 8001ed8:	bf00      	nop
 8001eda:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ee4:	51eb851f 	.word	0x51eb851f

08001ee8 <__NVIC_SetPriority>:
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6039      	str	r1, [r7, #0]
 8001ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	db0a      	blt.n	8001f12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	490c      	ldr	r1, [pc, #48]	; (8001f34 <__NVIC_SetPriority+0x4c>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	0112      	lsls	r2, r2, #4
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f10:	e00a      	b.n	8001f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	4908      	ldr	r1, [pc, #32]	; (8001f38 <__NVIC_SetPriority+0x50>)
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	3b04      	subs	r3, #4
 8001f20:	0112      	lsls	r2, r2, #4
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	440b      	add	r3, r1
 8001f26:	761a      	strb	r2, [r3, #24]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000e100 	.word	0xe000e100
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001f40:	2100      	movs	r1, #0
 8001f42:	f06f 0004 	mvn.w	r0, #4
 8001f46:	f7ff ffcf 	bl	8001ee8 <__NVIC_SetPriority>
#endif
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f56:	f3ef 8305 	mrs	r3, IPSR
 8001f5a:	603b      	str	r3, [r7, #0]
  return(result);
 8001f5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001f62:	f06f 0305 	mvn.w	r3, #5
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	e00c      	b.n	8001f84 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <osKernelInitialize+0x44>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d105      	bne.n	8001f7e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <osKernelInitialize+0x44>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	607b      	str	r3, [r7, #4]
 8001f7c:	e002      	b.n	8001f84 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f84:	687b      	ldr	r3, [r7, #4]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	2000008c 	.word	0x2000008c

08001f98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f9e:	f3ef 8305 	mrs	r3, IPSR
 8001fa2:	603b      	str	r3, [r7, #0]
  return(result);
 8001fa4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001faa:	f06f 0305 	mvn.w	r3, #5
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	e010      	b.n	8001fd4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <osKernelStart+0x48>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d109      	bne.n	8001fce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001fba:	f7ff ffbf 	bl	8001f3c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001fbe:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <osKernelStart+0x48>)
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001fc4:	f001 f924 	bl	8003210 <vTaskStartScheduler>
      stat = osOK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	e002      	b.n	8001fd4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001fce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001fd4:	687b      	ldr	r3, [r7, #4]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	2000008c 	.word	0x2000008c

08001fe4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08e      	sub	sp, #56	; 0x38
 8001fe8:	af04      	add	r7, sp, #16
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ff4:	f3ef 8305 	mrs	r3, IPSR
 8001ff8:	617b      	str	r3, [r7, #20]
  return(result);
 8001ffa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d17e      	bne.n	80020fe <osThreadNew+0x11a>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d07b      	beq.n	80020fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800200a:	2318      	movs	r3, #24
 800200c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800200e:	2300      	movs	r3, #0
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002016:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d045      	beq.n	80020aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <osThreadNew+0x48>
        name = attr->name;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d008      	beq.n	8002052 <osThreadNew+0x6e>
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	2b38      	cmp	r3, #56	; 0x38
 8002044:	d805      	bhi.n	8002052 <osThreadNew+0x6e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <osThreadNew+0x72>
        return (NULL);
 8002052:	2300      	movs	r3, #0
 8002054:	e054      	b.n	8002100 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00e      	beq.n	800208c <osThreadNew+0xa8>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	2b5b      	cmp	r3, #91	; 0x5b
 8002074:	d90a      	bls.n	800208c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800207a:	2b00      	cmp	r3, #0
 800207c:	d006      	beq.n	800208c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d002      	beq.n	800208c <osThreadNew+0xa8>
        mem = 1;
 8002086:	2301      	movs	r3, #1
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	e010      	b.n	80020ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10c      	bne.n	80020ae <osThreadNew+0xca>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d108      	bne.n	80020ae <osThreadNew+0xca>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d104      	bne.n	80020ae <osThreadNew+0xca>
          mem = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61bb      	str	r3, [r7, #24]
 80020a8:	e001      	b.n	80020ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d110      	bne.n	80020d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80020bc:	9202      	str	r2, [sp, #8]
 80020be:	9301      	str	r3, [sp, #4]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	6a3a      	ldr	r2, [r7, #32]
 80020c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 feca 	bl	8002e64 <xTaskCreateStatic>
 80020d0:	4603      	mov	r3, r0
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	e013      	b.n	80020fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d110      	bne.n	80020fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80020dc:	6a3b      	ldr	r3, [r7, #32]
 80020de:	b29a      	uxth	r2, r3
 80020e0:	f107 0310 	add.w	r3, r7, #16
 80020e4:	9301      	str	r3, [sp, #4]
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 ff15 	bl	8002f1e <xTaskCreate>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d001      	beq.n	80020fe <osThreadNew+0x11a>
            hTask = NULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80020fe:	693b      	ldr	r3, [r7, #16]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3728      	adds	r7, #40	; 0x28
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002110:	f3ef 8305 	mrs	r3, IPSR
 8002114:	60bb      	str	r3, [r7, #8]
  return(result);
 8002116:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <osDelay+0x1c>
    stat = osErrorISR;
 800211c:	f06f 0305 	mvn.w	r3, #5
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	e007      	b.n	8002134 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <osDelay+0x2c>
      vTaskDelay(ticks);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f001 f83a 	bl	80031a8 <vTaskDelay>
    }
  }

  return (stat);
 8002134:	68fb      	ldr	r3, [r7, #12]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800213e:	b580      	push	{r7, lr}
 8002140:	b084      	sub	sp, #16
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f002 f972 	bl	8004430 <pvTimerGetTimerID>
 800214c:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <TimerCallback+0x22>
    callb->func (callb->arg);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	6852      	ldr	r2, [r2, #4]
 800215c:	4610      	mov	r0, r2
 800215e:	4798      	blx	r3
  }
}
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b08c      	sub	sp, #48	; 0x30
 800216c:	af02      	add	r7, sp, #8
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	607a      	str	r2, [r7, #4]
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	460b      	mov	r3, r1
 8002176:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8002178:	2300      	movs	r3, #0
 800217a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800217c:	f3ef 8305 	mrs	r3, IPSR
 8002180:	613b      	str	r3, [r7, #16]
  return(result);
 8002182:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8002184:	2b00      	cmp	r3, #0
 8002186:	d163      	bne.n	8002250 <osTimerNew+0xe8>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d060      	beq.n	8002250 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800218e:	2008      	movs	r0, #8
 8002190:	f002 fbba 	bl	8004908 <pvPortMalloc>
 8002194:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d059      	beq.n	8002250 <osTimerNew+0xe8>
      callb->func = func;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80021a8:	7afb      	ldrb	r3, [r7, #11]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d102      	bne.n	80021b4 <osTimerNew+0x4c>
        reload = pdFALSE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
 80021b2:	e001      	b.n	80021b8 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80021b4:	2301      	movs	r3, #1
 80021b6:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80021b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021bc:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d01c      	beq.n	8002202 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <osTimerNew+0x6e>
          name = attr->name;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d006      	beq.n	80021ec <osTimerNew+0x84>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	2b2b      	cmp	r3, #43	; 0x2b
 80021e4:	d902      	bls.n	80021ec <osTimerNew+0x84>
          mem = 1;
 80021e6:	2301      	movs	r3, #1
 80021e8:	61bb      	str	r3, [r7, #24]
 80021ea:	e00c      	b.n	8002206 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d108      	bne.n	8002206 <osTimerNew+0x9e>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d104      	bne.n	8002206 <osTimerNew+0x9e>
            mem = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61bb      	str	r3, [r7, #24]
 8002200:	e001      	b.n	8002206 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d10c      	bne.n	8002226 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	9301      	str	r3, [sp, #4]
 8002212:	4b12      	ldr	r3, [pc, #72]	; (800225c <osTimerNew+0xf4>)
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	69fa      	ldr	r2, [r7, #28]
 800221a:	2101      	movs	r1, #1
 800221c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800221e:	f001 fd88 	bl	8003d32 <xTimerCreateStatic>
 8002222:	6238      	str	r0, [r7, #32]
 8002224:	e00b      	b.n	800223e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d108      	bne.n	800223e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <osTimerNew+0xf4>)
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	69fa      	ldr	r2, [r7, #28]
 8002234:	2101      	movs	r1, #1
 8002236:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002238:	f001 fd5a 	bl	8003cf0 <xTimerCreate>
 800223c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d105      	bne.n	8002250 <osTimerNew+0xe8>
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <osTimerNew+0xe8>
        vPortFree (callb);
 800224a:	6978      	ldr	r0, [r7, #20]
 800224c:	f002 fc28 	bl	8004aa0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8002250:	6a3b      	ldr	r3, [r7, #32]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3728      	adds	r7, #40	; 0x28
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	0800213f 	.word	0x0800213f

08002260 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af02      	add	r7, sp, #8
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800226e:	f3ef 8305 	mrs	r3, IPSR
 8002272:	60fb      	str	r3, [r7, #12]
  return(result);
 8002274:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <osTimerStart+0x22>
    stat = osErrorISR;
 800227a:	f06f 0305 	mvn.w	r3, #5
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	e017      	b.n	80022b2 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d103      	bne.n	8002290 <osTimerStart+0x30>
    stat = osErrorParameter;
 8002288:	f06f 0303 	mvn.w	r3, #3
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	e010      	b.n	80022b2 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8002290:	2300      	movs	r3, #0
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	2300      	movs	r3, #0
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	2104      	movs	r1, #4
 800229a:	6938      	ldr	r0, [r7, #16]
 800229c:	f001 fdc2 	bl	8003e24 <xTimerGenericCommand>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d102      	bne.n	80022ac <osTimerStart+0x4c>
      stat = osOK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	e002      	b.n	80022b2 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80022ac:	f06f 0302 	mvn.w	r3, #2
 80022b0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80022b2:	697b      	ldr	r3, [r7, #20]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4a07      	ldr	r2, [pc, #28]	; (80022e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80022cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	4a06      	ldr	r2, [pc, #24]	; (80022ec <vApplicationGetIdleTaskMemory+0x30>)
 80022d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2280      	movs	r2, #128	; 0x80
 80022d8:	601a      	str	r2, [r3, #0]
}
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000090 	.word	0x20000090
 80022ec:	200000ec 	.word	0x200000ec

080022f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4a07      	ldr	r2, [pc, #28]	; (800231c <vApplicationGetTimerTaskMemory+0x2c>)
 8002300:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	4a06      	ldr	r2, [pc, #24]	; (8002320 <vApplicationGetTimerTaskMemory+0x30>)
 8002306:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800230e:	601a      	str	r2, [r3, #0]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	200002ec 	.word	0x200002ec
 8002320:	20000348 	.word	0x20000348

08002324 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f103 0208 	add.w	r2, r3, #8
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800233c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f103 0208 	add.w	r2, r3, #8
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f103 0208 	add.w	r2, r3, #8
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800237e:	b480      	push	{r7}
 8002380:	b085      	sub	sp, #20
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	601a      	str	r2, [r3, #0]
}
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023c6:	b480      	push	{r7}
 80023c8:	b085      	sub	sp, #20
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023dc:	d103      	bne.n	80023e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	e00c      	b.n	8002400 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3308      	adds	r3, #8
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	e002      	b.n	80023f4 <vListInsert+0x2e>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d2f6      	bcs.n	80023ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	601a      	str	r2, [r3, #0]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6892      	ldr	r2, [r2, #8]
 800244e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6852      	ldr	r2, [r2, #4]
 8002458:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	429a      	cmp	r2, r3
 8002462:	d103      	bne.n	800246c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	1e5a      	subs	r2, r3, #1
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10a      	bne.n	80024b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80024a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a4:	f383 8811 	msr	BASEPRI, r3
 80024a8:	f3bf 8f6f 	isb	sy
 80024ac:	f3bf 8f4f 	dsb	sy
 80024b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80024b2:	bf00      	nop
 80024b4:	e7fe      	b.n	80024b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80024b6:	f002 f905 	bl	80046c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c2:	68f9      	ldr	r1, [r7, #12]
 80024c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024c6:	fb01 f303 	mul.w	r3, r1, r3
 80024ca:	441a      	add	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e6:	3b01      	subs	r3, #1
 80024e8:	68f9      	ldr	r1, [r7, #12]
 80024ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	441a      	add	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	22ff      	movs	r2, #255	; 0xff
 80024fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	22ff      	movs	r2, #255	; 0xff
 8002502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d114      	bne.n	8002536 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01a      	beq.n	800254a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	3310      	adds	r3, #16
 8002518:	4618      	mov	r0, r3
 800251a:	f001 f903 	bl	8003724 <xTaskRemoveFromEventList>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d012      	beq.n	800254a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <xQueueGenericReset+0xcc>)
 8002526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	f3bf 8f4f 	dsb	sy
 8002530:	f3bf 8f6f 	isb	sy
 8002534:	e009      	b.n	800254a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	3310      	adds	r3, #16
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff fef2 	bl	8002324 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3324      	adds	r3, #36	; 0x24
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff feed 	bl	8002324 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800254a:	f002 f8eb 	bl	8004724 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800254e:	2301      	movs	r3, #1
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	e000ed04 	.word	0xe000ed04

0800255c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08e      	sub	sp, #56	; 0x38
 8002560:	af02      	add	r7, sp, #8
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
 8002568:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10a      	bne.n	8002586 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002574:	f383 8811 	msr	BASEPRI, r3
 8002578:	f3bf 8f6f 	isb	sy
 800257c:	f3bf 8f4f 	dsb	sy
 8002580:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002582:	bf00      	nop
 8002584:	e7fe      	b.n	8002584 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10a      	bne.n	80025a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800258c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002590:	f383 8811 	msr	BASEPRI, r3
 8002594:	f3bf 8f6f 	isb	sy
 8002598:	f3bf 8f4f 	dsb	sy
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800259e:	bf00      	nop
 80025a0:	e7fe      	b.n	80025a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <xQueueGenericCreateStatic+0x52>
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <xQueueGenericCreateStatic+0x56>
 80025ae:	2301      	movs	r3, #1
 80025b0:	e000      	b.n	80025b4 <xQueueGenericCreateStatic+0x58>
 80025b2:	2300      	movs	r3, #0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10a      	bne.n	80025ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80025b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025bc:	f383 8811 	msr	BASEPRI, r3
 80025c0:	f3bf 8f6f 	isb	sy
 80025c4:	f3bf 8f4f 	dsb	sy
 80025c8:	623b      	str	r3, [r7, #32]
}
 80025ca:	bf00      	nop
 80025cc:	e7fe      	b.n	80025cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d102      	bne.n	80025da <xQueueGenericCreateStatic+0x7e>
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <xQueueGenericCreateStatic+0x82>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <xQueueGenericCreateStatic+0x84>
 80025de:	2300      	movs	r3, #0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10a      	bne.n	80025fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80025e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e8:	f383 8811 	msr	BASEPRI, r3
 80025ec:	f3bf 8f6f 	isb	sy
 80025f0:	f3bf 8f4f 	dsb	sy
 80025f4:	61fb      	str	r3, [r7, #28]
}
 80025f6:	bf00      	nop
 80025f8:	e7fe      	b.n	80025f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80025fa:	2350      	movs	r3, #80	; 0x50
 80025fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2b50      	cmp	r3, #80	; 0x50
 8002602:	d00a      	beq.n	800261a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002608:	f383 8811 	msr	BASEPRI, r3
 800260c:	f3bf 8f6f 	isb	sy
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	61bb      	str	r3, [r7, #24]
}
 8002616:	bf00      	nop
 8002618:	e7fe      	b.n	8002618 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800261a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00d      	beq.n	8002642 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800262e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	4613      	mov	r3, r2
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	68b9      	ldr	r1, [r7, #8]
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 f805 	bl	800264c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002644:	4618      	mov	r0, r3
 8002646:	3730      	adds	r7, #48	; 0x30
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d103      	bne.n	8002668 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	e002      	b.n	800266e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800267a:	2101      	movs	r1, #1
 800267c:	69b8      	ldr	r0, [r7, #24]
 800267e:	f7ff ff05 	bl	800248c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	78fa      	ldrb	r2, [r7, #3]
 8002686:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08e      	sub	sp, #56	; 0x38
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
 80026a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80026a2:	2300      	movs	r3, #0
 80026a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80026aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10a      	bne.n	80026c6 <xQueueGenericSend+0x32>
	__asm volatile
 80026b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b4:	f383 8811 	msr	BASEPRI, r3
 80026b8:	f3bf 8f6f 	isb	sy
 80026bc:	f3bf 8f4f 	dsb	sy
 80026c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80026c2:	bf00      	nop
 80026c4:	e7fe      	b.n	80026c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d103      	bne.n	80026d4 <xQueueGenericSend+0x40>
 80026cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <xQueueGenericSend+0x44>
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <xQueueGenericSend+0x46>
 80026d8:	2300      	movs	r3, #0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10a      	bne.n	80026f4 <xQueueGenericSend+0x60>
	__asm volatile
 80026de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e2:	f383 8811 	msr	BASEPRI, r3
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80026f0:	bf00      	nop
 80026f2:	e7fe      	b.n	80026f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d103      	bne.n	8002702 <xQueueGenericSend+0x6e>
 80026fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <xQueueGenericSend+0x72>
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <xQueueGenericSend+0x74>
 8002706:	2300      	movs	r3, #0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10a      	bne.n	8002722 <xQueueGenericSend+0x8e>
	__asm volatile
 800270c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002710:	f383 8811 	msr	BASEPRI, r3
 8002714:	f3bf 8f6f 	isb	sy
 8002718:	f3bf 8f4f 	dsb	sy
 800271c:	623b      	str	r3, [r7, #32]
}
 800271e:	bf00      	nop
 8002720:	e7fe      	b.n	8002720 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002722:	f001 f9bd 	bl	8003aa0 <xTaskGetSchedulerState>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d102      	bne.n	8002732 <xQueueGenericSend+0x9e>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <xQueueGenericSend+0xa2>
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <xQueueGenericSend+0xa4>
 8002736:	2300      	movs	r3, #0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10a      	bne.n	8002752 <xQueueGenericSend+0xbe>
	__asm volatile
 800273c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002740:	f383 8811 	msr	BASEPRI, r3
 8002744:	f3bf 8f6f 	isb	sy
 8002748:	f3bf 8f4f 	dsb	sy
 800274c:	61fb      	str	r3, [r7, #28]
}
 800274e:	bf00      	nop
 8002750:	e7fe      	b.n	8002750 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002752:	f001 ffb7 	bl	80046c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800275a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275e:	429a      	cmp	r2, r3
 8002760:	d302      	bcc.n	8002768 <xQueueGenericSend+0xd4>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d129      	bne.n	80027bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	68b9      	ldr	r1, [r7, #8]
 800276c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800276e:	f000 fa0b 	bl	8002b88 <prvCopyDataToQueue>
 8002772:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	2b00      	cmp	r3, #0
 800277a:	d010      	beq.n	800279e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277e:	3324      	adds	r3, #36	; 0x24
 8002780:	4618      	mov	r0, r3
 8002782:	f000 ffcf 	bl	8003724 <xTaskRemoveFromEventList>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d013      	beq.n	80027b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800278c:	4b3f      	ldr	r3, [pc, #252]	; (800288c <xQueueGenericSend+0x1f8>)
 800278e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	f3bf 8f4f 	dsb	sy
 8002798:	f3bf 8f6f 	isb	sy
 800279c:	e00a      	b.n	80027b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800279e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d007      	beq.n	80027b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80027a4:	4b39      	ldr	r3, [pc, #228]	; (800288c <xQueueGenericSend+0x1f8>)
 80027a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	f3bf 8f4f 	dsb	sy
 80027b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80027b4:	f001 ffb6 	bl	8004724 <vPortExitCritical>
				return pdPASS;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e063      	b.n	8002884 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d103      	bne.n	80027ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027c2:	f001 ffaf 	bl	8004724 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	e05c      	b.n	8002884 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d106      	bne.n	80027de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	4618      	mov	r0, r3
 80027d6:	f001 f809 	bl	80037ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027da:	2301      	movs	r3, #1
 80027dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027de:	f001 ffa1 	bl	8004724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027e2:	f000 fd7b 	bl	80032dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027e6:	f001 ff6d 	bl	80046c4 <vPortEnterCritical>
 80027ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027f0:	b25b      	sxtb	r3, r3
 80027f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027f6:	d103      	bne.n	8002800 <xQueueGenericSend+0x16c>
 80027f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002802:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002806:	b25b      	sxtb	r3, r3
 8002808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800280c:	d103      	bne.n	8002816 <xQueueGenericSend+0x182>
 800280e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002816:	f001 ff85 	bl	8004724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800281a:	1d3a      	adds	r2, r7, #4
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	4611      	mov	r1, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f000 fff8 	bl	8003818 <xTaskCheckForTimeOut>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d124      	bne.n	8002878 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800282e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002830:	f000 faa2 	bl	8002d78 <prvIsQueueFull>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d018      	beq.n	800286c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800283a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283c:	3310      	adds	r3, #16
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f000 ff1e 	bl	8003684 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800284a:	f000 fa2d 	bl	8002ca8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800284e:	f000 fd53 	bl	80032f8 <xTaskResumeAll>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	f47f af7c 	bne.w	8002752 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800285a:	4b0c      	ldr	r3, [pc, #48]	; (800288c <xQueueGenericSend+0x1f8>)
 800285c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	f3bf 8f4f 	dsb	sy
 8002866:	f3bf 8f6f 	isb	sy
 800286a:	e772      	b.n	8002752 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800286c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800286e:	f000 fa1b 	bl	8002ca8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002872:	f000 fd41 	bl	80032f8 <xTaskResumeAll>
 8002876:	e76c      	b.n	8002752 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800287a:	f000 fa15 	bl	8002ca8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800287e:	f000 fd3b 	bl	80032f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002882:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002884:	4618      	mov	r0, r3
 8002886:	3738      	adds	r7, #56	; 0x38
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	e000ed04 	.word	0xe000ed04

08002890 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b090      	sub	sp, #64	; 0x40
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
 800289c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80028a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10a      	bne.n	80028be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80028a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ac:	f383 8811 	msr	BASEPRI, r3
 80028b0:	f3bf 8f6f 	isb	sy
 80028b4:	f3bf 8f4f 	dsb	sy
 80028b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80028ba:	bf00      	nop
 80028bc:	e7fe      	b.n	80028bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d103      	bne.n	80028cc <xQueueGenericSendFromISR+0x3c>
 80028c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <xQueueGenericSendFromISR+0x40>
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <xQueueGenericSendFromISR+0x42>
 80028d0:	2300      	movs	r3, #0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10a      	bne.n	80028ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80028d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028da:	f383 8811 	msr	BASEPRI, r3
 80028de:	f3bf 8f6f 	isb	sy
 80028e2:	f3bf 8f4f 	dsb	sy
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80028e8:	bf00      	nop
 80028ea:	e7fe      	b.n	80028ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d103      	bne.n	80028fa <xQueueGenericSendFromISR+0x6a>
 80028f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d101      	bne.n	80028fe <xQueueGenericSendFromISR+0x6e>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <xQueueGenericSendFromISR+0x70>
 80028fe:	2300      	movs	r3, #0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10a      	bne.n	800291a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002908:	f383 8811 	msr	BASEPRI, r3
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	623b      	str	r3, [r7, #32]
}
 8002916:	bf00      	nop
 8002918:	e7fe      	b.n	8002918 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800291a:	f001 ffb5 	bl	8004888 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800291e:	f3ef 8211 	mrs	r2, BASEPRI
 8002922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002926:	f383 8811 	msr	BASEPRI, r3
 800292a:	f3bf 8f6f 	isb	sy
 800292e:	f3bf 8f4f 	dsb	sy
 8002932:	61fa      	str	r2, [r7, #28]
 8002934:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002936:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002938:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800293a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800293e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002942:	429a      	cmp	r2, r3
 8002944:	d302      	bcc.n	800294c <xQueueGenericSendFromISR+0xbc>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d12f      	bne.n	80029ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800294c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	68b9      	ldr	r1, [r7, #8]
 8002960:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002962:	f000 f911 	bl	8002b88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002966:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800296e:	d112      	bne.n	8002996 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	2b00      	cmp	r3, #0
 8002976:	d016      	beq.n	80029a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297a:	3324      	adds	r3, #36	; 0x24
 800297c:	4618      	mov	r0, r3
 800297e:	f000 fed1 	bl	8003724 <xTaskRemoveFromEventList>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00e      	beq.n	80029a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00b      	beq.n	80029a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	e007      	b.n	80029a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002996:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800299a:	3301      	adds	r3, #1
 800299c:	b2db      	uxtb	r3, r3
 800299e:	b25a      	sxtb	r2, r3
 80029a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80029a6:	2301      	movs	r3, #1
 80029a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80029aa:	e001      	b.n	80029b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80029ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80029bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3740      	adds	r7, #64	; 0x40
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08c      	sub	sp, #48	; 0x30
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80029d4:	2300      	movs	r3, #0
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80029dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10a      	bne.n	80029f8 <xQueueReceive+0x30>
	__asm volatile
 80029e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e6:	f383 8811 	msr	BASEPRI, r3
 80029ea:	f3bf 8f6f 	isb	sy
 80029ee:	f3bf 8f4f 	dsb	sy
 80029f2:	623b      	str	r3, [r7, #32]
}
 80029f4:	bf00      	nop
 80029f6:	e7fe      	b.n	80029f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d103      	bne.n	8002a06 <xQueueReceive+0x3e>
 80029fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <xQueueReceive+0x42>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <xQueueReceive+0x44>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10a      	bne.n	8002a26 <xQueueReceive+0x5e>
	__asm volatile
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	61fb      	str	r3, [r7, #28]
}
 8002a22:	bf00      	nop
 8002a24:	e7fe      	b.n	8002a24 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a26:	f001 f83b 	bl	8003aa0 <xTaskGetSchedulerState>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d102      	bne.n	8002a36 <xQueueReceive+0x6e>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <xQueueReceive+0x72>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <xQueueReceive+0x74>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10a      	bne.n	8002a56 <xQueueReceive+0x8e>
	__asm volatile
 8002a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	61bb      	str	r3, [r7, #24]
}
 8002a52:	bf00      	nop
 8002a54:	e7fe      	b.n	8002a54 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a56:	f001 fe35 	bl	80046c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d01f      	beq.n	8002aa6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a66:	68b9      	ldr	r1, [r7, #8]
 8002a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a6a:	f000 f8f7 	bl	8002c5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	1e5a      	subs	r2, r3, #1
 8002a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a74:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00f      	beq.n	8002a9e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	3310      	adds	r3, #16
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fe4e 	bl	8003724 <xTaskRemoveFromEventList>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d007      	beq.n	8002a9e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002a8e:	4b3d      	ldr	r3, [pc, #244]	; (8002b84 <xQueueReceive+0x1bc>)
 8002a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	f3bf 8f4f 	dsb	sy
 8002a9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002a9e:	f001 fe41 	bl	8004724 <vPortExitCritical>
				return pdPASS;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e069      	b.n	8002b7a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d103      	bne.n	8002ab4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002aac:	f001 fe3a 	bl	8004724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	e062      	b.n	8002b7a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d106      	bne.n	8002ac8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002aba:	f107 0310 	add.w	r3, r7, #16
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fe94 	bl	80037ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ac8:	f001 fe2c 	bl	8004724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002acc:	f000 fc06 	bl	80032dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ad0:	f001 fdf8 	bl	80046c4 <vPortEnterCritical>
 8002ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ada:	b25b      	sxtb	r3, r3
 8002adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ae0:	d103      	bne.n	8002aea <xQueueReceive+0x122>
 8002ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002af0:	b25b      	sxtb	r3, r3
 8002af2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002af6:	d103      	bne.n	8002b00 <xQueueReceive+0x138>
 8002af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b00:	f001 fe10 	bl	8004724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b04:	1d3a      	adds	r2, r7, #4
 8002b06:	f107 0310 	add.w	r3, r7, #16
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 fe83 	bl	8003818 <xTaskCheckForTimeOut>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d123      	bne.n	8002b60 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b1a:	f000 f917 	bl	8002d4c <prvIsQueueEmpty>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d017      	beq.n	8002b54 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b26:	3324      	adds	r3, #36	; 0x24
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 fda9 	bl	8003684 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002b32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b34:	f000 f8b8 	bl	8002ca8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002b38:	f000 fbde 	bl	80032f8 <xTaskResumeAll>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d189      	bne.n	8002a56 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002b42:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <xQueueReceive+0x1bc>)
 8002b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	f3bf 8f4f 	dsb	sy
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	e780      	b.n	8002a56 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b56:	f000 f8a7 	bl	8002ca8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b5a:	f000 fbcd 	bl	80032f8 <xTaskResumeAll>
 8002b5e:	e77a      	b.n	8002a56 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b62:	f000 f8a1 	bl	8002ca8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b66:	f000 fbc7 	bl	80032f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b6c:	f000 f8ee 	bl	8002d4c <prvIsQueueEmpty>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f43f af6f 	beq.w	8002a56 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002b78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3730      	adds	r7, #48	; 0x30
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	e000ed04 	.word	0xe000ed04

08002b88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10d      	bne.n	8002bc2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d14d      	bne.n	8002c4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 ff92 	bl	8003adc <xTaskPriorityDisinherit>
 8002bb8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	e043      	b.n	8002c4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d119      	bne.n	8002bfc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6858      	ldr	r0, [r3, #4]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	68b9      	ldr	r1, [r7, #8]
 8002bd4:	f002 f8ae 	bl	8004d34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	441a      	add	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d32b      	bcc.n	8002c4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	e026      	b.n	8002c4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	68d8      	ldr	r0, [r3, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	461a      	mov	r2, r3
 8002c06:	68b9      	ldr	r1, [r7, #8]
 8002c08:	f002 f894 	bl	8004d34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	425b      	negs	r3, r3
 8002c16:	441a      	add	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d207      	bcs.n	8002c38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	425b      	negs	r3, r3
 8002c32:	441a      	add	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d105      	bne.n	8002c4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002c52:	697b      	ldr	r3, [r7, #20]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d018      	beq.n	8002ca0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	441a      	add	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d303      	bcc.n	8002c90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68d9      	ldr	r1, [r3, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	461a      	mov	r2, r3
 8002c9a:	6838      	ldr	r0, [r7, #0]
 8002c9c:	f002 f84a 	bl	8004d34 <memcpy>
	}
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002cb0:	f001 fd08 	bl	80046c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cbc:	e011      	b.n	8002ce2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d012      	beq.n	8002cec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3324      	adds	r3, #36	; 0x24
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fd2a 	bl	8003724 <xTaskRemoveFromEventList>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002cd6:	f000 fe01 	bl	80038dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	dce9      	bgt.n	8002cbe <prvUnlockQueue+0x16>
 8002cea:	e000      	b.n	8002cee <prvUnlockQueue+0x46>
					break;
 8002cec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	22ff      	movs	r2, #255	; 0xff
 8002cf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002cf6:	f001 fd15 	bl	8004724 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002cfa:	f001 fce3 	bl	80046c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d06:	e011      	b.n	8002d2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d012      	beq.n	8002d36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3310      	adds	r3, #16
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fd05 	bl	8003724 <xTaskRemoveFromEventList>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002d20:	f000 fddc 	bl	80038dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002d24:	7bbb      	ldrb	r3, [r7, #14]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	dce9      	bgt.n	8002d08 <prvUnlockQueue+0x60>
 8002d34:	e000      	b.n	8002d38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002d36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	22ff      	movs	r2, #255	; 0xff
 8002d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002d40:	f001 fcf0 	bl	8004724 <vPortExitCritical>
}
 8002d44:	bf00      	nop
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d54:	f001 fcb6 	bl	80046c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d102      	bne.n	8002d66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002d60:	2301      	movs	r3, #1
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	e001      	b.n	8002d6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d6a:	f001 fcdb 	bl	8004724 <vPortExitCritical>

	return xReturn;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d80:	f001 fca0 	bl	80046c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d102      	bne.n	8002d96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002d90:	2301      	movs	r3, #1
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	e001      	b.n	8002d9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d9a:	f001 fcc3 	bl	8004724 <vPortExitCritical>

	return xReturn;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	e014      	b.n	8002de2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002db8:	4a0f      	ldr	r2, [pc, #60]	; (8002df8 <vQueueAddToRegistry+0x50>)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10b      	bne.n	8002ddc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002dc4:	490c      	ldr	r1, [pc, #48]	; (8002df8 <vQueueAddToRegistry+0x50>)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002dce:	4a0a      	ldr	r2, [pc, #40]	; (8002df8 <vQueueAddToRegistry+0x50>)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002dda:	e006      	b.n	8002dea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	3301      	adds	r3, #1
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b07      	cmp	r3, #7
 8002de6:	d9e7      	bls.n	8002db8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	20000748 	.word	0x20000748

08002dfc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002e0c:	f001 fc5a 	bl	80046c4 <vPortEnterCritical>
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e16:	b25b      	sxtb	r3, r3
 8002e18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e1c:	d103      	bne.n	8002e26 <vQueueWaitForMessageRestricted+0x2a>
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e2c:	b25b      	sxtb	r3, r3
 8002e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e32:	d103      	bne.n	8002e3c <vQueueWaitForMessageRestricted+0x40>
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e3c:	f001 fc72 	bl	8004724 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d106      	bne.n	8002e56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	3324      	adds	r3, #36	; 0x24
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	68b9      	ldr	r1, [r7, #8]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 fc3b 	bl	80036cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002e56:	6978      	ldr	r0, [r7, #20]
 8002e58:	f7ff ff26 	bl	8002ca8 <prvUnlockQueue>
	}
 8002e5c:	bf00      	nop
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08e      	sub	sp, #56	; 0x38
 8002e68:	af04      	add	r7, sp, #16
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <xTaskCreateStatic+0x2a>
	__asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	623b      	str	r3, [r7, #32]
}
 8002e8a:	bf00      	nop
 8002e8c:	e7fe      	b.n	8002e8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10a      	bne.n	8002eaa <xTaskCreateStatic+0x46>
	__asm volatile
 8002e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	61fb      	str	r3, [r7, #28]
}
 8002ea6:	bf00      	nop
 8002ea8:	e7fe      	b.n	8002ea8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002eaa:	235c      	movs	r3, #92	; 0x5c
 8002eac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	2b5c      	cmp	r3, #92	; 0x5c
 8002eb2:	d00a      	beq.n	8002eca <xTaskCreateStatic+0x66>
	__asm volatile
 8002eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	61bb      	str	r3, [r7, #24]
}
 8002ec6:	bf00      	nop
 8002ec8:	e7fe      	b.n	8002ec8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002eca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d01e      	beq.n	8002f10 <xTaskCreateStatic+0xac>
 8002ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01b      	beq.n	8002f10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ee0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002eea:	2300      	movs	r3, #0
 8002eec:	9303      	str	r3, [sp, #12]
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	9302      	str	r3, [sp, #8]
 8002ef2:	f107 0314 	add.w	r3, r7, #20
 8002ef6:	9301      	str	r3, [sp, #4]
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	68b9      	ldr	r1, [r7, #8]
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 f850 	bl	8002fa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f0a:	f000 f8dd 	bl	80030c8 <prvAddNewTaskToReadyList>
 8002f0e:	e001      	b.n	8002f14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002f14:	697b      	ldr	r3, [r7, #20]
	}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3728      	adds	r7, #40	; 0x28
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b08c      	sub	sp, #48	; 0x30
 8002f22:	af04      	add	r7, sp, #16
 8002f24:	60f8      	str	r0, [r7, #12]
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	603b      	str	r3, [r7, #0]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f001 fce8 	bl	8004908 <pvPortMalloc>
 8002f38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00e      	beq.n	8002f5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f40:	205c      	movs	r0, #92	; 0x5c
 8002f42:	f001 fce1 	bl	8004908 <pvPortMalloc>
 8002f46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
 8002f54:	e005      	b.n	8002f62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002f56:	6978      	ldr	r0, [r7, #20]
 8002f58:	f001 fda2 	bl	8004aa0 <vPortFree>
 8002f5c:	e001      	b.n	8002f62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d017      	beq.n	8002f98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f70:	88fa      	ldrh	r2, [r7, #6]
 8002f72:	2300      	movs	r3, #0
 8002f74:	9303      	str	r3, [sp, #12]
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	9302      	str	r3, [sp, #8]
 8002f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7c:	9301      	str	r3, [sp, #4]
 8002f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f80e 	bl	8002fa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f8c:	69f8      	ldr	r0, [r7, #28]
 8002f8e:	f000 f89b 	bl	80030c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002f92:	2301      	movs	r3, #1
 8002f94:	61bb      	str	r3, [r7, #24]
 8002f96:	e002      	b.n	8002f9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002f9e:	69bb      	ldr	r3, [r7, #24]
	}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3720      	adds	r7, #32
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
 8002fb4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	21a5      	movs	r1, #165	; 0xa5
 8002fc2:	f001 fe8b 	bl	8004cdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	f023 0307 	bic.w	r3, r3, #7
 8002fde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	617b      	str	r3, [r7, #20]
}
 8002ffc:	bf00      	nop
 8002ffe:	e7fe      	b.n	8002ffe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d01f      	beq.n	8003046 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
 800300a:	e012      	b.n	8003032 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	4413      	add	r3, r2
 8003012:	7819      	ldrb	r1, [r3, #0]
 8003014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	4413      	add	r3, r2
 800301a:	3334      	adds	r3, #52	; 0x34
 800301c:	460a      	mov	r2, r1
 800301e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	4413      	add	r3, r2
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d006      	beq.n	800303a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	3301      	adds	r3, #1
 8003030:	61fb      	str	r3, [r7, #28]
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	2b0f      	cmp	r3, #15
 8003036:	d9e9      	bls.n	800300c <prvInitialiseNewTask+0x64>
 8003038:	e000      	b.n	800303c <prvInitialiseNewTask+0x94>
			{
				break;
 800303a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800303c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003044:	e003      	b.n	800304e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	2b37      	cmp	r3, #55	; 0x37
 8003052:	d901      	bls.n	8003058 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003054:	2337      	movs	r3, #55	; 0x37
 8003056:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800305c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800305e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003062:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003066:	2200      	movs	r2, #0
 8003068:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800306a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306c:	3304      	adds	r3, #4
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff f978 	bl	8002364 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003076:	3318      	adds	r3, #24
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff f973 	bl	8002364 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800307e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003082:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003086:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003092:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003096:	2200      	movs	r2, #0
 8003098:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	68f9      	ldr	r1, [r7, #12]
 80030a6:	69b8      	ldr	r0, [r7, #24]
 80030a8:	f001 f9e2 	bl	8004470 <pxPortInitialiseStack>
 80030ac:	4602      	mov	r2, r0
 80030ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80030b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80030b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030be:	bf00      	nop
 80030c0:	3720      	adds	r7, #32
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80030d0:	f001 faf8 	bl	80046c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80030d4:	4b2d      	ldr	r3, [pc, #180]	; (800318c <prvAddNewTaskToReadyList+0xc4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	3301      	adds	r3, #1
 80030da:	4a2c      	ldr	r2, [pc, #176]	; (800318c <prvAddNewTaskToReadyList+0xc4>)
 80030dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80030de:	4b2c      	ldr	r3, [pc, #176]	; (8003190 <prvAddNewTaskToReadyList+0xc8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d109      	bne.n	80030fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80030e6:	4a2a      	ldr	r2, [pc, #168]	; (8003190 <prvAddNewTaskToReadyList+0xc8>)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030ec:	4b27      	ldr	r3, [pc, #156]	; (800318c <prvAddNewTaskToReadyList+0xc4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d110      	bne.n	8003116 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80030f4:	f000 fc16 	bl	8003924 <prvInitialiseTaskLists>
 80030f8:	e00d      	b.n	8003116 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80030fa:	4b26      	ldr	r3, [pc, #152]	; (8003194 <prvAddNewTaskToReadyList+0xcc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d109      	bne.n	8003116 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003102:	4b23      	ldr	r3, [pc, #140]	; (8003190 <prvAddNewTaskToReadyList+0xc8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	429a      	cmp	r2, r3
 800310e:	d802      	bhi.n	8003116 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003110:	4a1f      	ldr	r2, [pc, #124]	; (8003190 <prvAddNewTaskToReadyList+0xc8>)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003116:	4b20      	ldr	r3, [pc, #128]	; (8003198 <prvAddNewTaskToReadyList+0xd0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	3301      	adds	r3, #1
 800311c:	4a1e      	ldr	r2, [pc, #120]	; (8003198 <prvAddNewTaskToReadyList+0xd0>)
 800311e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003120:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <prvAddNewTaskToReadyList+0xd0>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312c:	4b1b      	ldr	r3, [pc, #108]	; (800319c <prvAddNewTaskToReadyList+0xd4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d903      	bls.n	800313c <prvAddNewTaskToReadyList+0x74>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	4a18      	ldr	r2, [pc, #96]	; (800319c <prvAddNewTaskToReadyList+0xd4>)
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4a15      	ldr	r2, [pc, #84]	; (80031a0 <prvAddNewTaskToReadyList+0xd8>)
 800314a:	441a      	add	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3304      	adds	r3, #4
 8003150:	4619      	mov	r1, r3
 8003152:	4610      	mov	r0, r2
 8003154:	f7ff f913 	bl	800237e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003158:	f001 fae4 	bl	8004724 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800315c:	4b0d      	ldr	r3, [pc, #52]	; (8003194 <prvAddNewTaskToReadyList+0xcc>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00e      	beq.n	8003182 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003164:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <prvAddNewTaskToReadyList+0xc8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	429a      	cmp	r2, r3
 8003170:	d207      	bcs.n	8003182 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003172:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <prvAddNewTaskToReadyList+0xdc>)
 8003174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	20000c5c 	.word	0x20000c5c
 8003190:	20000788 	.word	0x20000788
 8003194:	20000c68 	.word	0x20000c68
 8003198:	20000c78 	.word	0x20000c78
 800319c:	20000c64 	.word	0x20000c64
 80031a0:	2000078c 	.word	0x2000078c
 80031a4:	e000ed04 	.word	0xe000ed04

080031a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d017      	beq.n	80031ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80031ba:	4b13      	ldr	r3, [pc, #76]	; (8003208 <vTaskDelay+0x60>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <vTaskDelay+0x30>
	__asm volatile
 80031c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c6:	f383 8811 	msr	BASEPRI, r3
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	60bb      	str	r3, [r7, #8]
}
 80031d4:	bf00      	nop
 80031d6:	e7fe      	b.n	80031d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80031d8:	f000 f880 	bl	80032dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80031dc:	2100      	movs	r1, #0
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fcea 	bl	8003bb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80031e4:	f000 f888 	bl	80032f8 <xTaskResumeAll>
 80031e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d107      	bne.n	8003200 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80031f0:	4b06      	ldr	r3, [pc, #24]	; (800320c <vTaskDelay+0x64>)
 80031f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003200:	bf00      	nop
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	20000c84 	.word	0x20000c84
 800320c:	e000ed04 	.word	0xe000ed04

08003210 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	; 0x28
 8003214:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003216:	2300      	movs	r3, #0
 8003218:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800321a:	2300      	movs	r3, #0
 800321c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800321e:	463a      	mov	r2, r7
 8003220:	1d39      	adds	r1, r7, #4
 8003222:	f107 0308 	add.w	r3, r7, #8
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff f848 	bl	80022bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800322c:	6839      	ldr	r1, [r7, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	9202      	str	r2, [sp, #8]
 8003234:	9301      	str	r3, [sp, #4]
 8003236:	2300      	movs	r3, #0
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	2300      	movs	r3, #0
 800323c:	460a      	mov	r2, r1
 800323e:	4921      	ldr	r1, [pc, #132]	; (80032c4 <vTaskStartScheduler+0xb4>)
 8003240:	4821      	ldr	r0, [pc, #132]	; (80032c8 <vTaskStartScheduler+0xb8>)
 8003242:	f7ff fe0f 	bl	8002e64 <xTaskCreateStatic>
 8003246:	4603      	mov	r3, r0
 8003248:	4a20      	ldr	r2, [pc, #128]	; (80032cc <vTaskStartScheduler+0xbc>)
 800324a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800324c:	4b1f      	ldr	r3, [pc, #124]	; (80032cc <vTaskStartScheduler+0xbc>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003254:	2301      	movs	r3, #1
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	e001      	b.n	800325e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800325a:	2300      	movs	r3, #0
 800325c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d102      	bne.n	800326a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003264:	f000 fcfc 	bl	8003c60 <xTimerCreateTimerTask>
 8003268:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d116      	bne.n	800329e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003274:	f383 8811 	msr	BASEPRI, r3
 8003278:	f3bf 8f6f 	isb	sy
 800327c:	f3bf 8f4f 	dsb	sy
 8003280:	613b      	str	r3, [r7, #16]
}
 8003282:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003284:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <vTaskStartScheduler+0xc0>)
 8003286:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800328a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800328c:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <vTaskStartScheduler+0xc4>)
 800328e:	2201      	movs	r2, #1
 8003290:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003292:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <vTaskStartScheduler+0xc8>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003298:	f001 f972 	bl	8004580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800329c:	e00e      	b.n	80032bc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032a4:	d10a      	bne.n	80032bc <vTaskStartScheduler+0xac>
	__asm volatile
 80032a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032aa:	f383 8811 	msr	BASEPRI, r3
 80032ae:	f3bf 8f6f 	isb	sy
 80032b2:	f3bf 8f4f 	dsb	sy
 80032b6:	60fb      	str	r3, [r7, #12]
}
 80032b8:	bf00      	nop
 80032ba:	e7fe      	b.n	80032ba <vTaskStartScheduler+0xaa>
}
 80032bc:	bf00      	nop
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	08004d94 	.word	0x08004d94
 80032c8:	080038f5 	.word	0x080038f5
 80032cc:	20000c80 	.word	0x20000c80
 80032d0:	20000c7c 	.word	0x20000c7c
 80032d4:	20000c68 	.word	0x20000c68
 80032d8:	20000c60 	.word	0x20000c60

080032dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80032e0:	4b04      	ldr	r3, [pc, #16]	; (80032f4 <vTaskSuspendAll+0x18>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3301      	adds	r3, #1
 80032e6:	4a03      	ldr	r2, [pc, #12]	; (80032f4 <vTaskSuspendAll+0x18>)
 80032e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80032ea:	bf00      	nop
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	20000c84 	.word	0x20000c84

080032f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003302:	2300      	movs	r3, #0
 8003304:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003306:	4b42      	ldr	r3, [pc, #264]	; (8003410 <xTaskResumeAll+0x118>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10a      	bne.n	8003324 <xTaskResumeAll+0x2c>
	__asm volatile
 800330e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003312:	f383 8811 	msr	BASEPRI, r3
 8003316:	f3bf 8f6f 	isb	sy
 800331a:	f3bf 8f4f 	dsb	sy
 800331e:	603b      	str	r3, [r7, #0]
}
 8003320:	bf00      	nop
 8003322:	e7fe      	b.n	8003322 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003324:	f001 f9ce 	bl	80046c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003328:	4b39      	ldr	r3, [pc, #228]	; (8003410 <xTaskResumeAll+0x118>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3b01      	subs	r3, #1
 800332e:	4a38      	ldr	r2, [pc, #224]	; (8003410 <xTaskResumeAll+0x118>)
 8003330:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003332:	4b37      	ldr	r3, [pc, #220]	; (8003410 <xTaskResumeAll+0x118>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d162      	bne.n	8003400 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800333a:	4b36      	ldr	r3, [pc, #216]	; (8003414 <xTaskResumeAll+0x11c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d05e      	beq.n	8003400 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003342:	e02f      	b.n	80033a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003344:	4b34      	ldr	r3, [pc, #208]	; (8003418 <xTaskResumeAll+0x120>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	3318      	adds	r3, #24
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff f871 	bl	8002438 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	3304      	adds	r3, #4
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff f86c 	bl	8002438 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003364:	4b2d      	ldr	r3, [pc, #180]	; (800341c <xTaskResumeAll+0x124>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	429a      	cmp	r2, r3
 800336a:	d903      	bls.n	8003374 <xTaskResumeAll+0x7c>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	4a2a      	ldr	r2, [pc, #168]	; (800341c <xTaskResumeAll+0x124>)
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4a27      	ldr	r2, [pc, #156]	; (8003420 <xTaskResumeAll+0x128>)
 8003382:	441a      	add	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	3304      	adds	r3, #4
 8003388:	4619      	mov	r1, r3
 800338a:	4610      	mov	r0, r2
 800338c:	f7fe fff7 	bl	800237e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003394:	4b23      	ldr	r3, [pc, #140]	; (8003424 <xTaskResumeAll+0x12c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339a:	429a      	cmp	r2, r3
 800339c:	d302      	bcc.n	80033a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800339e:	4b22      	ldr	r3, [pc, #136]	; (8003428 <xTaskResumeAll+0x130>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033a4:	4b1c      	ldr	r3, [pc, #112]	; (8003418 <xTaskResumeAll+0x120>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1cb      	bne.n	8003344 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80033b2:	f000 fb55 	bl	8003a60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80033b6:	4b1d      	ldr	r3, [pc, #116]	; (800342c <xTaskResumeAll+0x134>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d010      	beq.n	80033e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80033c2:	f000 f847 	bl	8003454 <xTaskIncrementTick>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80033cc:	4b16      	ldr	r3, [pc, #88]	; (8003428 <xTaskResumeAll+0x130>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3b01      	subs	r3, #1
 80033d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f1      	bne.n	80033c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80033de:	4b13      	ldr	r3, [pc, #76]	; (800342c <xTaskResumeAll+0x134>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80033e4:	4b10      	ldr	r3, [pc, #64]	; (8003428 <xTaskResumeAll+0x130>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d009      	beq.n	8003400 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80033ec:	2301      	movs	r3, #1
 80033ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80033f0:	4b0f      	ldr	r3, [pc, #60]	; (8003430 <xTaskResumeAll+0x138>)
 80033f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003400:	f001 f990 	bl	8004724 <vPortExitCritical>

	return xAlreadyYielded;
 8003404:	68bb      	ldr	r3, [r7, #8]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20000c84 	.word	0x20000c84
 8003414:	20000c5c 	.word	0x20000c5c
 8003418:	20000c1c 	.word	0x20000c1c
 800341c:	20000c64 	.word	0x20000c64
 8003420:	2000078c 	.word	0x2000078c
 8003424:	20000788 	.word	0x20000788
 8003428:	20000c70 	.word	0x20000c70
 800342c:	20000c6c 	.word	0x20000c6c
 8003430:	e000ed04 	.word	0xe000ed04

08003434 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800343a:	4b05      	ldr	r3, [pc, #20]	; (8003450 <xTaskGetTickCount+0x1c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003440:	687b      	ldr	r3, [r7, #4]
}
 8003442:	4618      	mov	r0, r3
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	20000c60 	.word	0x20000c60

08003454 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800345e:	4b4f      	ldr	r3, [pc, #316]	; (800359c <xTaskIncrementTick+0x148>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	f040 808f 	bne.w	8003586 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003468:	4b4d      	ldr	r3, [pc, #308]	; (80035a0 <xTaskIncrementTick+0x14c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3301      	adds	r3, #1
 800346e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003470:	4a4b      	ldr	r2, [pc, #300]	; (80035a0 <xTaskIncrementTick+0x14c>)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d120      	bne.n	80034be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800347c:	4b49      	ldr	r3, [pc, #292]	; (80035a4 <xTaskIncrementTick+0x150>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <xTaskIncrementTick+0x48>
	__asm volatile
 8003486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	603b      	str	r3, [r7, #0]
}
 8003498:	bf00      	nop
 800349a:	e7fe      	b.n	800349a <xTaskIncrementTick+0x46>
 800349c:	4b41      	ldr	r3, [pc, #260]	; (80035a4 <xTaskIncrementTick+0x150>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	4b41      	ldr	r3, [pc, #260]	; (80035a8 <xTaskIncrementTick+0x154>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a3f      	ldr	r2, [pc, #252]	; (80035a4 <xTaskIncrementTick+0x150>)
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	4a3f      	ldr	r2, [pc, #252]	; (80035a8 <xTaskIncrementTick+0x154>)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6013      	str	r3, [r2, #0]
 80034b0:	4b3e      	ldr	r3, [pc, #248]	; (80035ac <xTaskIncrementTick+0x158>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	3301      	adds	r3, #1
 80034b6:	4a3d      	ldr	r2, [pc, #244]	; (80035ac <xTaskIncrementTick+0x158>)
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	f000 fad1 	bl	8003a60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80034be:	4b3c      	ldr	r3, [pc, #240]	; (80035b0 <xTaskIncrementTick+0x15c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d349      	bcc.n	800355c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034c8:	4b36      	ldr	r3, [pc, #216]	; (80035a4 <xTaskIncrementTick+0x150>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d104      	bne.n	80034dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034d2:	4b37      	ldr	r3, [pc, #220]	; (80035b0 <xTaskIncrementTick+0x15c>)
 80034d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034d8:	601a      	str	r2, [r3, #0]
					break;
 80034da:	e03f      	b.n	800355c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034dc:	4b31      	ldr	r3, [pc, #196]	; (80035a4 <xTaskIncrementTick+0x150>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d203      	bcs.n	80034fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80034f4:	4a2e      	ldr	r2, [pc, #184]	; (80035b0 <xTaskIncrementTick+0x15c>)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80034fa:	e02f      	b.n	800355c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	3304      	adds	r3, #4
 8003500:	4618      	mov	r0, r3
 8003502:	f7fe ff99 	bl	8002438 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	2b00      	cmp	r3, #0
 800350c:	d004      	beq.n	8003518 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	3318      	adds	r3, #24
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe ff90 	bl	8002438 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351c:	4b25      	ldr	r3, [pc, #148]	; (80035b4 <xTaskIncrementTick+0x160>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d903      	bls.n	800352c <xTaskIncrementTick+0xd8>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	4a22      	ldr	r2, [pc, #136]	; (80035b4 <xTaskIncrementTick+0x160>)
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4a1f      	ldr	r2, [pc, #124]	; (80035b8 <xTaskIncrementTick+0x164>)
 800353a:	441a      	add	r2, r3
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	3304      	adds	r3, #4
 8003540:	4619      	mov	r1, r3
 8003542:	4610      	mov	r0, r2
 8003544:	f7fe ff1b 	bl	800237e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354c:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <xTaskIncrementTick+0x168>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	429a      	cmp	r2, r3
 8003554:	d3b8      	bcc.n	80034c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003556:	2301      	movs	r3, #1
 8003558:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800355a:	e7b5      	b.n	80034c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800355c:	4b17      	ldr	r3, [pc, #92]	; (80035bc <xTaskIncrementTick+0x168>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003562:	4915      	ldr	r1, [pc, #84]	; (80035b8 <xTaskIncrementTick+0x164>)
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d901      	bls.n	8003578 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003574:	2301      	movs	r3, #1
 8003576:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003578:	4b11      	ldr	r3, [pc, #68]	; (80035c0 <xTaskIncrementTick+0x16c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d007      	beq.n	8003590 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003580:	2301      	movs	r3, #1
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	e004      	b.n	8003590 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003586:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <xTaskIncrementTick+0x170>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	3301      	adds	r3, #1
 800358c:	4a0d      	ldr	r2, [pc, #52]	; (80035c4 <xTaskIncrementTick+0x170>)
 800358e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003590:	697b      	ldr	r3, [r7, #20]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20000c84 	.word	0x20000c84
 80035a0:	20000c60 	.word	0x20000c60
 80035a4:	20000c14 	.word	0x20000c14
 80035a8:	20000c18 	.word	0x20000c18
 80035ac:	20000c74 	.word	0x20000c74
 80035b0:	20000c7c 	.word	0x20000c7c
 80035b4:	20000c64 	.word	0x20000c64
 80035b8:	2000078c 	.word	0x2000078c
 80035bc:	20000788 	.word	0x20000788
 80035c0:	20000c70 	.word	0x20000c70
 80035c4:	20000c6c 	.word	0x20000c6c

080035c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80035ce:	4b28      	ldr	r3, [pc, #160]	; (8003670 <vTaskSwitchContext+0xa8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80035d6:	4b27      	ldr	r3, [pc, #156]	; (8003674 <vTaskSwitchContext+0xac>)
 80035d8:	2201      	movs	r2, #1
 80035da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80035dc:	e041      	b.n	8003662 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80035de:	4b25      	ldr	r3, [pc, #148]	; (8003674 <vTaskSwitchContext+0xac>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035e4:	4b24      	ldr	r3, [pc, #144]	; (8003678 <vTaskSwitchContext+0xb0>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	e010      	b.n	800360e <vTaskSwitchContext+0x46>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10a      	bne.n	8003608 <vTaskSwitchContext+0x40>
	__asm volatile
 80035f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	607b      	str	r3, [r7, #4]
}
 8003604:	bf00      	nop
 8003606:	e7fe      	b.n	8003606 <vTaskSwitchContext+0x3e>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3b01      	subs	r3, #1
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	491b      	ldr	r1, [pc, #108]	; (800367c <vTaskSwitchContext+0xb4>)
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0e4      	beq.n	80035ec <vTaskSwitchContext+0x24>
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4613      	mov	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4a13      	ldr	r2, [pc, #76]	; (800367c <vTaskSwitchContext+0xb4>)
 800362e:	4413      	add	r3, r2
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	605a      	str	r2, [r3, #4]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	3308      	adds	r3, #8
 8003644:	429a      	cmp	r2, r3
 8003646:	d104      	bne.n	8003652 <vTaskSwitchContext+0x8a>
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	605a      	str	r2, [r3, #4]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	4a09      	ldr	r2, [pc, #36]	; (8003680 <vTaskSwitchContext+0xb8>)
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	4a06      	ldr	r2, [pc, #24]	; (8003678 <vTaskSwitchContext+0xb0>)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6013      	str	r3, [r2, #0]
}
 8003662:	bf00      	nop
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	20000c84 	.word	0x20000c84
 8003674:	20000c70 	.word	0x20000c70
 8003678:	20000c64 	.word	0x20000c64
 800367c:	2000078c 	.word	0x2000078c
 8003680:	20000788 	.word	0x20000788

08003684 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10a      	bne.n	80036aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	60fb      	str	r3, [r7, #12]
}
 80036a6:	bf00      	nop
 80036a8:	e7fe      	b.n	80036a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036aa:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <vTaskPlaceOnEventList+0x44>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3318      	adds	r3, #24
 80036b0:	4619      	mov	r1, r3
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fe fe87 	bl	80023c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80036b8:	2101      	movs	r1, #1
 80036ba:	6838      	ldr	r0, [r7, #0]
 80036bc:	f000 fa7c 	bl	8003bb8 <prvAddCurrentTaskToDelayedList>
}
 80036c0:	bf00      	nop
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	20000788 	.word	0x20000788

080036cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10a      	bne.n	80036f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80036de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e2:	f383 8811 	msr	BASEPRI, r3
 80036e6:	f3bf 8f6f 	isb	sy
 80036ea:	f3bf 8f4f 	dsb	sy
 80036ee:	617b      	str	r3, [r7, #20]
}
 80036f0:	bf00      	nop
 80036f2:	e7fe      	b.n	80036f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036f4:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <vTaskPlaceOnEventListRestricted+0x54>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3318      	adds	r3, #24
 80036fa:	4619      	mov	r1, r3
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f7fe fe3e 	bl	800237e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800370c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	68b8      	ldr	r0, [r7, #8]
 8003712:	f000 fa51 	bl	8003bb8 <prvAddCurrentTaskToDelayedList>
	}
 8003716:	bf00      	nop
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000788 	.word	0x20000788

08003724 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10a      	bne.n	8003750 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800373a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373e:	f383 8811 	msr	BASEPRI, r3
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	f3bf 8f4f 	dsb	sy
 800374a:	60fb      	str	r3, [r7, #12]
}
 800374c:	bf00      	nop
 800374e:	e7fe      	b.n	800374e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	3318      	adds	r3, #24
 8003754:	4618      	mov	r0, r3
 8003756:	f7fe fe6f 	bl	8002438 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800375a:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <xTaskRemoveFromEventList+0xb0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d11d      	bne.n	800379e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	3304      	adds	r3, #4
 8003766:	4618      	mov	r0, r3
 8003768:	f7fe fe66 	bl	8002438 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003770:	4b19      	ldr	r3, [pc, #100]	; (80037d8 <xTaskRemoveFromEventList+0xb4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d903      	bls.n	8003780 <xTaskRemoveFromEventList+0x5c>
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	4a16      	ldr	r2, [pc, #88]	; (80037d8 <xTaskRemoveFromEventList+0xb4>)
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4a13      	ldr	r2, [pc, #76]	; (80037dc <xTaskRemoveFromEventList+0xb8>)
 800378e:	441a      	add	r2, r3
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	3304      	adds	r3, #4
 8003794:	4619      	mov	r1, r3
 8003796:	4610      	mov	r0, r2
 8003798:	f7fe fdf1 	bl	800237e <vListInsertEnd>
 800379c:	e005      	b.n	80037aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	3318      	adds	r3, #24
 80037a2:	4619      	mov	r1, r3
 80037a4:	480e      	ldr	r0, [pc, #56]	; (80037e0 <xTaskRemoveFromEventList+0xbc>)
 80037a6:	f7fe fdea 	bl	800237e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ae:	4b0d      	ldr	r3, [pc, #52]	; (80037e4 <xTaskRemoveFromEventList+0xc0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d905      	bls.n	80037c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80037b8:	2301      	movs	r3, #1
 80037ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80037bc:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <xTaskRemoveFromEventList+0xc4>)
 80037be:	2201      	movs	r2, #1
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	e001      	b.n	80037c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80037c8:	697b      	ldr	r3, [r7, #20]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000c84 	.word	0x20000c84
 80037d8:	20000c64 	.word	0x20000c64
 80037dc:	2000078c 	.word	0x2000078c
 80037e0:	20000c1c 	.word	0x20000c1c
 80037e4:	20000788 	.word	0x20000788
 80037e8:	20000c70 	.word	0x20000c70

080037ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <vTaskInternalSetTimeOutState+0x24>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80037fc:	4b05      	ldr	r3, [pc, #20]	; (8003814 <vTaskInternalSetTimeOutState+0x28>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	605a      	str	r2, [r3, #4]
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	20000c74 	.word	0x20000c74
 8003814:	20000c60 	.word	0x20000c60

08003818 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10a      	bne.n	800383e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	613b      	str	r3, [r7, #16]
}
 800383a:	bf00      	nop
 800383c:	e7fe      	b.n	800383c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10a      	bne.n	800385a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003848:	f383 8811 	msr	BASEPRI, r3
 800384c:	f3bf 8f6f 	isb	sy
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	60fb      	str	r3, [r7, #12]
}
 8003856:	bf00      	nop
 8003858:	e7fe      	b.n	8003858 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800385a:	f000 ff33 	bl	80046c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800385e:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <xTaskCheckForTimeOut+0xbc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003876:	d102      	bne.n	800387e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003878:	2300      	movs	r3, #0
 800387a:	61fb      	str	r3, [r7, #28]
 800387c:	e023      	b.n	80038c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	4b15      	ldr	r3, [pc, #84]	; (80038d8 <xTaskCheckForTimeOut+0xc0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d007      	beq.n	800389a <xTaskCheckForTimeOut+0x82>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	429a      	cmp	r2, r3
 8003892:	d302      	bcc.n	800389a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003894:	2301      	movs	r3, #1
 8003896:	61fb      	str	r3, [r7, #28]
 8003898:	e015      	b.n	80038c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d20b      	bcs.n	80038bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	1ad2      	subs	r2, r2, r3
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ff9b 	bl	80037ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80038b6:	2300      	movs	r3, #0
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	e004      	b.n	80038c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	2200      	movs	r2, #0
 80038c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80038c2:	2301      	movs	r3, #1
 80038c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80038c6:	f000 ff2d 	bl	8004724 <vPortExitCritical>

	return xReturn;
 80038ca:	69fb      	ldr	r3, [r7, #28]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3720      	adds	r7, #32
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	20000c60 	.word	0x20000c60
 80038d8:	20000c74 	.word	0x20000c74

080038dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80038e0:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <vTaskMissedYield+0x14>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
}
 80038e6:	bf00      	nop
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	20000c70 	.word	0x20000c70

080038f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80038fc:	f000 f852 	bl	80039a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003900:	4b06      	ldr	r3, [pc, #24]	; (800391c <prvIdleTask+0x28>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d9f9      	bls.n	80038fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8003908:	4b05      	ldr	r3, [pc, #20]	; (8003920 <prvIdleTask+0x2c>)
 800390a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003918:	e7f0      	b.n	80038fc <prvIdleTask+0x8>
 800391a:	bf00      	nop
 800391c:	2000078c 	.word	0x2000078c
 8003920:	e000ed04 	.word	0xe000ed04

08003924 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800392a:	2300      	movs	r3, #0
 800392c:	607b      	str	r3, [r7, #4]
 800392e:	e00c      	b.n	800394a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4a12      	ldr	r2, [pc, #72]	; (8003984 <prvInitialiseTaskLists+0x60>)
 800393c:	4413      	add	r3, r2
 800393e:	4618      	mov	r0, r3
 8003940:	f7fe fcf0 	bl	8002324 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3301      	adds	r3, #1
 8003948:	607b      	str	r3, [r7, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b37      	cmp	r3, #55	; 0x37
 800394e:	d9ef      	bls.n	8003930 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003950:	480d      	ldr	r0, [pc, #52]	; (8003988 <prvInitialiseTaskLists+0x64>)
 8003952:	f7fe fce7 	bl	8002324 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003956:	480d      	ldr	r0, [pc, #52]	; (800398c <prvInitialiseTaskLists+0x68>)
 8003958:	f7fe fce4 	bl	8002324 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800395c:	480c      	ldr	r0, [pc, #48]	; (8003990 <prvInitialiseTaskLists+0x6c>)
 800395e:	f7fe fce1 	bl	8002324 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003962:	480c      	ldr	r0, [pc, #48]	; (8003994 <prvInitialiseTaskLists+0x70>)
 8003964:	f7fe fcde 	bl	8002324 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003968:	480b      	ldr	r0, [pc, #44]	; (8003998 <prvInitialiseTaskLists+0x74>)
 800396a:	f7fe fcdb 	bl	8002324 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800396e:	4b0b      	ldr	r3, [pc, #44]	; (800399c <prvInitialiseTaskLists+0x78>)
 8003970:	4a05      	ldr	r2, [pc, #20]	; (8003988 <prvInitialiseTaskLists+0x64>)
 8003972:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003974:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <prvInitialiseTaskLists+0x7c>)
 8003976:	4a05      	ldr	r2, [pc, #20]	; (800398c <prvInitialiseTaskLists+0x68>)
 8003978:	601a      	str	r2, [r3, #0]
}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	2000078c 	.word	0x2000078c
 8003988:	20000bec 	.word	0x20000bec
 800398c:	20000c00 	.word	0x20000c00
 8003990:	20000c1c 	.word	0x20000c1c
 8003994:	20000c30 	.word	0x20000c30
 8003998:	20000c48 	.word	0x20000c48
 800399c:	20000c14 	.word	0x20000c14
 80039a0:	20000c18 	.word	0x20000c18

080039a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039aa:	e019      	b.n	80039e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80039ac:	f000 fe8a 	bl	80046c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039b0:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <prvCheckTasksWaitingTermination+0x50>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3304      	adds	r3, #4
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fe fd3b 	bl	8002438 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80039c2:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <prvCheckTasksWaitingTermination+0x54>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	4a0b      	ldr	r2, [pc, #44]	; (80039f8 <prvCheckTasksWaitingTermination+0x54>)
 80039ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <prvCheckTasksWaitingTermination+0x58>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	4a0a      	ldr	r2, [pc, #40]	; (80039fc <prvCheckTasksWaitingTermination+0x58>)
 80039d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80039d6:	f000 fea5 	bl	8004724 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f810 	bl	8003a00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <prvCheckTasksWaitingTermination+0x58>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e1      	bne.n	80039ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80039e8:	bf00      	nop
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20000c30 	.word	0x20000c30
 80039f8:	20000c5c 	.word	0x20000c5c
 80039fc:	20000c44 	.word	0x20000c44

08003a00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d108      	bne.n	8003a24 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	4618      	mov	r0, r3
 8003a18:	f001 f842 	bl	8004aa0 <vPortFree>
				vPortFree( pxTCB );
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f001 f83f 	bl	8004aa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003a22:	e018      	b.n	8003a56 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d103      	bne.n	8003a36 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f001 f836 	bl	8004aa0 <vPortFree>
	}
 8003a34:	e00f      	b.n	8003a56 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d00a      	beq.n	8003a56 <prvDeleteTCB+0x56>
	__asm volatile
 8003a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	60fb      	str	r3, [r7, #12]
}
 8003a52:	bf00      	nop
 8003a54:	e7fe      	b.n	8003a54 <prvDeleteTCB+0x54>
	}
 8003a56:	bf00      	nop
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a66:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <prvResetNextTaskUnblockTime+0x38>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d104      	bne.n	8003a7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a70:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <prvResetNextTaskUnblockTime+0x3c>)
 8003a72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003a78:	e008      	b.n	8003a8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a7a:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <prvResetNextTaskUnblockTime+0x38>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	4a04      	ldr	r2, [pc, #16]	; (8003a9c <prvResetNextTaskUnblockTime+0x3c>)
 8003a8a:	6013      	str	r3, [r2, #0]
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	20000c14 	.word	0x20000c14
 8003a9c:	20000c7c 	.word	0x20000c7c

08003aa0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003aa6:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <xTaskGetSchedulerState+0x34>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d102      	bne.n	8003ab4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	607b      	str	r3, [r7, #4]
 8003ab2:	e008      	b.n	8003ac6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ab4:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <xTaskGetSchedulerState+0x38>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d102      	bne.n	8003ac2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003abc:	2302      	movs	r3, #2
 8003abe:	607b      	str	r3, [r7, #4]
 8003ac0:	e001      	b.n	8003ac6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003ac6:	687b      	ldr	r3, [r7, #4]
	}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	20000c68 	.word	0x20000c68
 8003ad8:	20000c84 	.word	0x20000c84

08003adc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d056      	beq.n	8003ba0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003af2:	4b2e      	ldr	r3, [pc, #184]	; (8003bac <xTaskPriorityDisinherit+0xd0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d00a      	beq.n	8003b12 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	60fb      	str	r3, [r7, #12]
}
 8003b0e:	bf00      	nop
 8003b10:	e7fe      	b.n	8003b10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10a      	bne.n	8003b30 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1e:	f383 8811 	msr	BASEPRI, r3
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	60bb      	str	r3, [r7, #8]
}
 8003b2c:	bf00      	nop
 8003b2e:	e7fe      	b.n	8003b2e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b34:	1e5a      	subs	r2, r3, #1
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d02c      	beq.n	8003ba0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d128      	bne.n	8003ba0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	3304      	adds	r3, #4
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe fc70 	bl	8002438 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b64:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b70:	4b0f      	ldr	r3, [pc, #60]	; (8003bb0 <xTaskPriorityDisinherit+0xd4>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d903      	bls.n	8003b80 <xTaskPriorityDisinherit+0xa4>
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	4a0c      	ldr	r2, [pc, #48]	; (8003bb0 <xTaskPriorityDisinherit+0xd4>)
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b84:	4613      	mov	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4a09      	ldr	r2, [pc, #36]	; (8003bb4 <xTaskPriorityDisinherit+0xd8>)
 8003b8e:	441a      	add	r2, r3
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	3304      	adds	r3, #4
 8003b94:	4619      	mov	r1, r3
 8003b96:	4610      	mov	r0, r2
 8003b98:	f7fe fbf1 	bl	800237e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ba0:	697b      	ldr	r3, [r7, #20]
	}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000788 	.word	0x20000788
 8003bb0:	20000c64 	.word	0x20000c64
 8003bb4:	2000078c 	.word	0x2000078c

08003bb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003bc2:	4b21      	ldr	r3, [pc, #132]	; (8003c48 <prvAddCurrentTaskToDelayedList+0x90>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bc8:	4b20      	ldr	r3, [pc, #128]	; (8003c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3304      	adds	r3, #4
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fe fc32 	bl	8002438 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bda:	d10a      	bne.n	8003bf2 <prvAddCurrentTaskToDelayedList+0x3a>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d007      	beq.n	8003bf2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003be2:	4b1a      	ldr	r3, [pc, #104]	; (8003c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3304      	adds	r3, #4
 8003be8:	4619      	mov	r1, r3
 8003bea:	4819      	ldr	r0, [pc, #100]	; (8003c50 <prvAddCurrentTaskToDelayedList+0x98>)
 8003bec:	f7fe fbc7 	bl	800237e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003bf0:	e026      	b.n	8003c40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bfa:	4b14      	ldr	r3, [pc, #80]	; (8003c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d209      	bcs.n	8003c1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c0a:	4b12      	ldr	r3, [pc, #72]	; (8003c54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3304      	adds	r3, #4
 8003c14:	4619      	mov	r1, r3
 8003c16:	4610      	mov	r0, r2
 8003c18:	f7fe fbd5 	bl	80023c6 <vListInsert>
}
 8003c1c:	e010      	b.n	8003c40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c1e:	4b0e      	ldr	r3, [pc, #56]	; (8003c58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	3304      	adds	r3, #4
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	f7fe fbcb 	bl	80023c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c30:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d202      	bcs.n	8003c40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003c3a:	4a08      	ldr	r2, [pc, #32]	; (8003c5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	6013      	str	r3, [r2, #0]
}
 8003c40:	bf00      	nop
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	20000c60 	.word	0x20000c60
 8003c4c:	20000788 	.word	0x20000788
 8003c50:	20000c48 	.word	0x20000c48
 8003c54:	20000c18 	.word	0x20000c18
 8003c58:	20000c14 	.word	0x20000c14
 8003c5c:	20000c7c 	.word	0x20000c7c

08003c60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08a      	sub	sp, #40	; 0x28
 8003c64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003c6a:	f000 fba1 	bl	80043b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003c6e:	4b1c      	ldr	r3, [pc, #112]	; (8003ce0 <xTimerCreateTimerTask+0x80>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d021      	beq.n	8003cba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003c7e:	1d3a      	adds	r2, r7, #4
 8003c80:	f107 0108 	add.w	r1, r7, #8
 8003c84:	f107 030c 	add.w	r3, r7, #12
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fe fb31 	bl	80022f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	9202      	str	r2, [sp, #8]
 8003c96:	9301      	str	r3, [sp, #4]
 8003c98:	2302      	movs	r3, #2
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	460a      	mov	r2, r1
 8003ca0:	4910      	ldr	r1, [pc, #64]	; (8003ce4 <xTimerCreateTimerTask+0x84>)
 8003ca2:	4811      	ldr	r0, [pc, #68]	; (8003ce8 <xTimerCreateTimerTask+0x88>)
 8003ca4:	f7ff f8de 	bl	8002e64 <xTaskCreateStatic>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	4a10      	ldr	r2, [pc, #64]	; (8003cec <xTimerCreateTimerTask+0x8c>)
 8003cac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003cae:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <xTimerCreateTimerTask+0x8c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10a      	bne.n	8003cd6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc4:	f383 8811 	msr	BASEPRI, r3
 8003cc8:	f3bf 8f6f 	isb	sy
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	613b      	str	r3, [r7, #16]
}
 8003cd2:	bf00      	nop
 8003cd4:	e7fe      	b.n	8003cd4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003cd6:	697b      	ldr	r3, [r7, #20]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	20000cb8 	.word	0x20000cb8
 8003ce4:	08004d9c 	.word	0x08004d9c
 8003ce8:	08003f59 	.word	0x08003f59
 8003cec:	20000cbc 	.word	0x20000cbc

08003cf0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
 8003cfc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8003cfe:	202c      	movs	r0, #44	; 0x2c
 8003d00:	f000 fe02 	bl	8004908 <pvPortMalloc>
 8003d04:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00d      	beq.n	8003d28 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	9301      	str	r3, [sp, #4]
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	68b9      	ldr	r1, [r7, #8]
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 f843 	bl	8003dae <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8003d28:	697b      	ldr	r3, [r7, #20]
	}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b08a      	sub	sp, #40	; 0x28
 8003d36:	af02      	add	r7, sp, #8
 8003d38:	60f8      	str	r0, [r7, #12]
 8003d3a:	60b9      	str	r1, [r7, #8]
 8003d3c:	607a      	str	r2, [r7, #4]
 8003d3e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8003d40:	232c      	movs	r3, #44	; 0x2c
 8003d42:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	2b2c      	cmp	r3, #44	; 0x2c
 8003d48:	d00a      	beq.n	8003d60 <xTimerCreateStatic+0x2e>
	__asm volatile
 8003d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	61bb      	str	r3, [r7, #24]
}
 8003d5c:	bf00      	nop
 8003d5e:	e7fe      	b.n	8003d5e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003d60:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8003d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10a      	bne.n	8003d7e <xTimerCreateStatic+0x4c>
	__asm volatile
 8003d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6c:	f383 8811 	msr	BASEPRI, r3
 8003d70:	f3bf 8f6f 	isb	sy
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	617b      	str	r3, [r7, #20]
}
 8003d7a:	bf00      	nop
 8003d7c:	e7fe      	b.n	8003d7c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8003d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d80:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00d      	beq.n	8003da4 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	9301      	str	r3, [sp, #4]
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	68b9      	ldr	r1, [r7, #8]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f805 	bl	8003dae <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8003da4:	69fb      	ldr	r3, [r7, #28]
	}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3720      	adds	r7, #32
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b086      	sub	sp, #24
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	60f8      	str	r0, [r7, #12]
 8003db6:	60b9      	str	r1, [r7, #8]
 8003db8:	607a      	str	r2, [r7, #4]
 8003dba:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10a      	bne.n	8003dd8 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8003dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc6:	f383 8811 	msr	BASEPRI, r3
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	617b      	str	r3, [r7, #20]
}
 8003dd4:	bf00      	nop
 8003dd6:	e7fe      	b.n	8003dd6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d01e      	beq.n	8003e1c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8003dde:	f000 fae7 	bl	80043b0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	6a3a      	ldr	r2, [r7, #32]
 8003df8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fe fab0 	bl	8002364 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d008      	beq.n	8003e1c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e10:	f043 0304 	orr.w	r3, r3, #4
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8003e1c:	bf00      	nop
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08a      	sub	sp, #40	; 0x28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
 8003e30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10a      	bne.n	8003e52 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e40:	f383 8811 	msr	BASEPRI, r3
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	623b      	str	r3, [r7, #32]
}
 8003e4e:	bf00      	nop
 8003e50:	e7fe      	b.n	8003e50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003e52:	4b1a      	ldr	r3, [pc, #104]	; (8003ebc <xTimerGenericCommand+0x98>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d02a      	beq.n	8003eb0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2b05      	cmp	r3, #5
 8003e6a:	dc18      	bgt.n	8003e9e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003e6c:	f7ff fe18 	bl	8003aa0 <xTaskGetSchedulerState>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d109      	bne.n	8003e8a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003e76:	4b11      	ldr	r3, [pc, #68]	; (8003ebc <xTimerGenericCommand+0x98>)
 8003e78:	6818      	ldr	r0, [r3, #0]
 8003e7a:	f107 0110 	add.w	r1, r7, #16
 8003e7e:	2300      	movs	r3, #0
 8003e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e82:	f7fe fc07 	bl	8002694 <xQueueGenericSend>
 8003e86:	6278      	str	r0, [r7, #36]	; 0x24
 8003e88:	e012      	b.n	8003eb0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003e8a:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <xTimerGenericCommand+0x98>)
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	f107 0110 	add.w	r1, r7, #16
 8003e92:	2300      	movs	r3, #0
 8003e94:	2200      	movs	r2, #0
 8003e96:	f7fe fbfd 	bl	8002694 <xQueueGenericSend>
 8003e9a:	6278      	str	r0, [r7, #36]	; 0x24
 8003e9c:	e008      	b.n	8003eb0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003e9e:	4b07      	ldr	r3, [pc, #28]	; (8003ebc <xTimerGenericCommand+0x98>)
 8003ea0:	6818      	ldr	r0, [r3, #0]
 8003ea2:	f107 0110 	add.w	r1, r7, #16
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	f7fe fcf1 	bl	8002890 <xQueueGenericSendFromISR>
 8003eae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3728      	adds	r7, #40	; 0x28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000cb8 	.word	0x20000cb8

08003ec0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b088      	sub	sp, #32
 8003ec4:	af02      	add	r7, sp, #8
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eca:	4b22      	ldr	r3, [pc, #136]	; (8003f54 <prvProcessExpiredTimer+0x94>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7fe faad 	bl	8002438 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d022      	beq.n	8003f32 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	699a      	ldr	r2, [r3, #24]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	18d1      	adds	r1, r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	6978      	ldr	r0, [r7, #20]
 8003efa:	f000 f8d1 	bl	80040a0 <prvInsertTimerInActiveList>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d01f      	beq.n	8003f44 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f04:	2300      	movs	r3, #0
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	6978      	ldr	r0, [r7, #20]
 8003f10:	f7ff ff88 	bl	8003e24 <xTimerGenericCommand>
 8003f14:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d113      	bne.n	8003f44 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	60fb      	str	r3, [r7, #12]
}
 8003f2e:	bf00      	nop
 8003f30:	e7fe      	b.n	8003f30 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f38:	f023 0301 	bic.w	r3, r3, #1
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	6978      	ldr	r0, [r7, #20]
 8003f4a:	4798      	blx	r3
}
 8003f4c:	bf00      	nop
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	20000cb0 	.word	0x20000cb0

08003f58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f60:	f107 0308 	add.w	r3, r7, #8
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 f857 	bl	8004018 <prvGetNextExpireTime>
 8003f6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4619      	mov	r1, r3
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 f803 	bl	8003f7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003f76:	f000 f8d5 	bl	8004124 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f7a:	e7f1      	b.n	8003f60 <prvTimerTask+0x8>

08003f7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003f86:	f7ff f9a9 	bl	80032dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f8a:	f107 0308 	add.w	r3, r7, #8
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 f866 	bl	8004060 <prvSampleTimeNow>
 8003f94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d130      	bne.n	8003ffe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <prvProcessTimerOrBlockTask+0x3c>
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d806      	bhi.n	8003fb8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003faa:	f7ff f9a5 	bl	80032f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003fae:	68f9      	ldr	r1, [r7, #12]
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7ff ff85 	bl	8003ec0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003fb6:	e024      	b.n	8004002 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d008      	beq.n	8003fd0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003fbe:	4b13      	ldr	r3, [pc, #76]	; (800400c <prvProcessTimerOrBlockTask+0x90>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <prvProcessTimerOrBlockTask+0x50>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e000      	b.n	8003fce <prvProcessTimerOrBlockTask+0x52>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <prvProcessTimerOrBlockTask+0x94>)
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	4619      	mov	r1, r3
 8003fde:	f7fe ff0d 	bl	8002dfc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003fe2:	f7ff f989 	bl	80032f8 <xTaskResumeAll>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10a      	bne.n	8004002 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003fec:	4b09      	ldr	r3, [pc, #36]	; (8004014 <prvProcessTimerOrBlockTask+0x98>)
 8003fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	f3bf 8f4f 	dsb	sy
 8003ff8:	f3bf 8f6f 	isb	sy
}
 8003ffc:	e001      	b.n	8004002 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003ffe:	f7ff f97b 	bl	80032f8 <xTaskResumeAll>
}
 8004002:	bf00      	nop
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	20000cb4 	.word	0x20000cb4
 8004010:	20000cb8 	.word	0x20000cb8
 8004014:	e000ed04 	.word	0xe000ed04

08004018 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004020:	4b0e      	ldr	r3, [pc, #56]	; (800405c <prvGetNextExpireTime+0x44>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <prvGetNextExpireTime+0x16>
 800402a:	2201      	movs	r2, #1
 800402c:	e000      	b.n	8004030 <prvGetNextExpireTime+0x18>
 800402e:	2200      	movs	r2, #0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d105      	bne.n	8004048 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800403c:	4b07      	ldr	r3, [pc, #28]	; (800405c <prvGetNextExpireTime+0x44>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	e001      	b.n	800404c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800404c:	68fb      	ldr	r3, [r7, #12]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	20000cb0 	.word	0x20000cb0

08004060 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004068:	f7ff f9e4 	bl	8003434 <xTaskGetTickCount>
 800406c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800406e:	4b0b      	ldr	r3, [pc, #44]	; (800409c <prvSampleTimeNow+0x3c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	429a      	cmp	r2, r3
 8004076:	d205      	bcs.n	8004084 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004078:	f000 f936 	bl	80042e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	e002      	b.n	800408a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800408a:	4a04      	ldr	r2, [pc, #16]	; (800409c <prvSampleTimeNow+0x3c>)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004090:	68fb      	ldr	r3, [r7, #12]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	20000cc0 	.word	0x20000cc0

080040a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d812      	bhi.n	80040ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	1ad2      	subs	r2, r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d302      	bcc.n	80040da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80040d4:	2301      	movs	r3, #1
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	e01b      	b.n	8004112 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80040da:	4b10      	ldr	r3, [pc, #64]	; (800411c <prvInsertTimerInActiveList+0x7c>)
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	3304      	adds	r3, #4
 80040e2:	4619      	mov	r1, r3
 80040e4:	4610      	mov	r0, r2
 80040e6:	f7fe f96e 	bl	80023c6 <vListInsert>
 80040ea:	e012      	b.n	8004112 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d206      	bcs.n	8004102 <prvInsertTimerInActiveList+0x62>
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d302      	bcc.n	8004102 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80040fc:	2301      	movs	r3, #1
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	e007      	b.n	8004112 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004102:	4b07      	ldr	r3, [pc, #28]	; (8004120 <prvInsertTimerInActiveList+0x80>)
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	3304      	adds	r3, #4
 800410a:	4619      	mov	r1, r3
 800410c:	4610      	mov	r0, r2
 800410e:	f7fe f95a 	bl	80023c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004112:	697b      	ldr	r3, [r7, #20]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	20000cb4 	.word	0x20000cb4
 8004120:	20000cb0 	.word	0x20000cb0

08004124 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b08e      	sub	sp, #56	; 0x38
 8004128:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800412a:	e0ca      	b.n	80042c2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	da18      	bge.n	8004164 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004132:	1d3b      	adds	r3, r7, #4
 8004134:	3304      	adds	r3, #4
 8004136:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10a      	bne.n	8004154 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800413e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004142:	f383 8811 	msr	BASEPRI, r3
 8004146:	f3bf 8f6f 	isb	sy
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	61fb      	str	r3, [r7, #28]
}
 8004150:	bf00      	nop
 8004152:	e7fe      	b.n	8004152 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800415a:	6850      	ldr	r0, [r2, #4]
 800415c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800415e:	6892      	ldr	r2, [r2, #8]
 8004160:	4611      	mov	r1, r2
 8004162:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	f2c0 80ab 	blt.w	80042c2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d004      	beq.n	8004182 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417a:	3304      	adds	r3, #4
 800417c:	4618      	mov	r0, r3
 800417e:	f7fe f95b 	bl	8002438 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004182:	463b      	mov	r3, r7
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff ff6b 	bl	8004060 <prvSampleTimeNow>
 800418a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b09      	cmp	r3, #9
 8004190:	f200 8096 	bhi.w	80042c0 <prvProcessReceivedCommands+0x19c>
 8004194:	a201      	add	r2, pc, #4	; (adr r2, 800419c <prvProcessReceivedCommands+0x78>)
 8004196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419a:	bf00      	nop
 800419c:	080041c5 	.word	0x080041c5
 80041a0:	080041c5 	.word	0x080041c5
 80041a4:	080041c5 	.word	0x080041c5
 80041a8:	08004239 	.word	0x08004239
 80041ac:	0800424d 	.word	0x0800424d
 80041b0:	08004297 	.word	0x08004297
 80041b4:	080041c5 	.word	0x080041c5
 80041b8:	080041c5 	.word	0x080041c5
 80041bc:	08004239 	.word	0x08004239
 80041c0:	0800424d 	.word	0x0800424d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80041c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041ca:	f043 0301 	orr.w	r3, r3, #1
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	18d1      	adds	r1, r2, r3
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041e4:	f7ff ff5c 	bl	80040a0 <prvInsertTimerInActiveList>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d069      	beq.n	80042c2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d05e      	beq.n	80042c2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	441a      	add	r2, r3
 800420c:	2300      	movs	r3, #0
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	2300      	movs	r3, #0
 8004212:	2100      	movs	r1, #0
 8004214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004216:	f7ff fe05 	bl	8003e24 <xTimerGenericCommand>
 800421a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d14f      	bne.n	80042c2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	61bb      	str	r3, [r7, #24]
}
 8004234:	bf00      	nop
 8004236:	e7fe      	b.n	8004236 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800423e:	f023 0301 	bic.w	r3, r3, #1
 8004242:	b2da      	uxtb	r2, r3
 8004244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004246:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800424a:	e03a      	b.n	80042c2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800424c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004252:	f043 0301 	orr.w	r3, r3, #1
 8004256:	b2da      	uxtb	r2, r3
 8004258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004262:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10a      	bne.n	8004282 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	617b      	str	r3, [r7, #20]
}
 800427e:	bf00      	nop
 8004280:	e7fe      	b.n	8004280 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004284:	699a      	ldr	r2, [r3, #24]
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	18d1      	adds	r1, r2, r3
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800428e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004290:	f7ff ff06 	bl	80040a0 <prvInsertTimerInActiveList>
					break;
 8004294:	e015      	b.n	80042c2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004298:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d103      	bne.n	80042ac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80042a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042a6:	f000 fbfb 	bl	8004aa0 <vPortFree>
 80042aa:	e00a      	b.n	80042c2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042b2:	f023 0301 	bic.w	r3, r3, #1
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80042be:	e000      	b.n	80042c2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80042c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042c2:	4b08      	ldr	r3, [pc, #32]	; (80042e4 <prvProcessReceivedCommands+0x1c0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	1d39      	adds	r1, r7, #4
 80042c8:	2200      	movs	r2, #0
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fe fb7c 	bl	80029c8 <xQueueReceive>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f47f af2a 	bne.w	800412c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80042d8:	bf00      	nop
 80042da:	bf00      	nop
 80042dc:	3730      	adds	r7, #48	; 0x30
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000cb8 	.word	0x20000cb8

080042e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042ee:	e048      	b.n	8004382 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042f0:	4b2d      	ldr	r3, [pc, #180]	; (80043a8 <prvSwitchTimerLists+0xc0>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042fa:	4b2b      	ldr	r3, [pc, #172]	; (80043a8 <prvSwitchTimerLists+0xc0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	3304      	adds	r3, #4
 8004308:	4618      	mov	r0, r3
 800430a:	f7fe f895 	bl	8002438 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d02e      	beq.n	8004382 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4413      	add	r3, r2
 800432c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	429a      	cmp	r2, r3
 8004334:	d90e      	bls.n	8004354 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004342:	4b19      	ldr	r3, [pc, #100]	; (80043a8 <prvSwitchTimerLists+0xc0>)
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	3304      	adds	r3, #4
 800434a:	4619      	mov	r1, r3
 800434c:	4610      	mov	r0, r2
 800434e:	f7fe f83a 	bl	80023c6 <vListInsert>
 8004352:	e016      	b.n	8004382 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004354:	2300      	movs	r3, #0
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	2300      	movs	r3, #0
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	2100      	movs	r1, #0
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f7ff fd60 	bl	8003e24 <xTimerGenericCommand>
 8004364:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	603b      	str	r3, [r7, #0]
}
 800437e:	bf00      	nop
 8004380:	e7fe      	b.n	8004380 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004382:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <prvSwitchTimerLists+0xc0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1b1      	bne.n	80042f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800438c:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <prvSwitchTimerLists+0xc0>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004392:	4b06      	ldr	r3, [pc, #24]	; (80043ac <prvSwitchTimerLists+0xc4>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a04      	ldr	r2, [pc, #16]	; (80043a8 <prvSwitchTimerLists+0xc0>)
 8004398:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800439a:	4a04      	ldr	r2, [pc, #16]	; (80043ac <prvSwitchTimerLists+0xc4>)
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	6013      	str	r3, [r2, #0]
}
 80043a0:	bf00      	nop
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	20000cb0 	.word	0x20000cb0
 80043ac:	20000cb4 	.word	0x20000cb4

080043b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80043b6:	f000 f985 	bl	80046c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80043ba:	4b15      	ldr	r3, [pc, #84]	; (8004410 <prvCheckForValidListAndQueue+0x60>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d120      	bne.n	8004404 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80043c2:	4814      	ldr	r0, [pc, #80]	; (8004414 <prvCheckForValidListAndQueue+0x64>)
 80043c4:	f7fd ffae 	bl	8002324 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80043c8:	4813      	ldr	r0, [pc, #76]	; (8004418 <prvCheckForValidListAndQueue+0x68>)
 80043ca:	f7fd ffab 	bl	8002324 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80043ce:	4b13      	ldr	r3, [pc, #76]	; (800441c <prvCheckForValidListAndQueue+0x6c>)
 80043d0:	4a10      	ldr	r2, [pc, #64]	; (8004414 <prvCheckForValidListAndQueue+0x64>)
 80043d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80043d4:	4b12      	ldr	r3, [pc, #72]	; (8004420 <prvCheckForValidListAndQueue+0x70>)
 80043d6:	4a10      	ldr	r2, [pc, #64]	; (8004418 <prvCheckForValidListAndQueue+0x68>)
 80043d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80043da:	2300      	movs	r3, #0
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	4b11      	ldr	r3, [pc, #68]	; (8004424 <prvCheckForValidListAndQueue+0x74>)
 80043e0:	4a11      	ldr	r2, [pc, #68]	; (8004428 <prvCheckForValidListAndQueue+0x78>)
 80043e2:	2110      	movs	r1, #16
 80043e4:	200a      	movs	r0, #10
 80043e6:	f7fe f8b9 	bl	800255c <xQueueGenericCreateStatic>
 80043ea:	4603      	mov	r3, r0
 80043ec:	4a08      	ldr	r2, [pc, #32]	; (8004410 <prvCheckForValidListAndQueue+0x60>)
 80043ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80043f0:	4b07      	ldr	r3, [pc, #28]	; (8004410 <prvCheckForValidListAndQueue+0x60>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d005      	beq.n	8004404 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <prvCheckForValidListAndQueue+0x60>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	490b      	ldr	r1, [pc, #44]	; (800442c <prvCheckForValidListAndQueue+0x7c>)
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fe fcd2 	bl	8002da8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004404:	f000 f98e 	bl	8004724 <vPortExitCritical>
}
 8004408:	bf00      	nop
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	20000cb8 	.word	0x20000cb8
 8004414:	20000c88 	.word	0x20000c88
 8004418:	20000c9c 	.word	0x20000c9c
 800441c:	20000cb0 	.word	0x20000cb0
 8004420:	20000cb4 	.word	0x20000cb4
 8004424:	20000d64 	.word	0x20000d64
 8004428:	20000cc4 	.word	0x20000cc4
 800442c:	08004da4 	.word	0x08004da4

08004430 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10a      	bne.n	8004458 <pvTimerGetTimerID+0x28>
	__asm volatile
 8004442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	60fb      	str	r3, [r7, #12]
}
 8004454:	bf00      	nop
 8004456:	e7fe      	b.n	8004456 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8004458:	f000 f934 	bl	80046c4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8004462:	f000 f95f 	bl	8004724 <vPortExitCritical>

	return pvReturn;
 8004466:	693b      	ldr	r3, [r7, #16]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	3b04      	subs	r3, #4
 8004480:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004488:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	3b04      	subs	r3, #4
 800448e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f023 0201 	bic.w	r2, r3, #1
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	3b04      	subs	r3, #4
 800449e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044a0:	4a0c      	ldr	r2, [pc, #48]	; (80044d4 <pxPortInitialiseStack+0x64>)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3b14      	subs	r3, #20
 80044aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	3b04      	subs	r3, #4
 80044b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f06f 0202 	mvn.w	r2, #2
 80044be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	3b20      	subs	r3, #32
 80044c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80044c6:	68fb      	ldr	r3, [r7, #12]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	080044d9 	.word	0x080044d9

080044d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80044de:	2300      	movs	r3, #0
 80044e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80044e2:	4b12      	ldr	r3, [pc, #72]	; (800452c <prvTaskExitError+0x54>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044ea:	d00a      	beq.n	8004502 <prvTaskExitError+0x2a>
	__asm volatile
 80044ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f0:	f383 8811 	msr	BASEPRI, r3
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	60fb      	str	r3, [r7, #12]
}
 80044fe:	bf00      	nop
 8004500:	e7fe      	b.n	8004500 <prvTaskExitError+0x28>
	__asm volatile
 8004502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	60bb      	str	r3, [r7, #8]
}
 8004514:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004516:	bf00      	nop
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0fc      	beq.n	8004518 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800451e:	bf00      	nop
 8004520:	bf00      	nop
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	2000000c 	.word	0x2000000c

08004530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004530:	4b07      	ldr	r3, [pc, #28]	; (8004550 <pxCurrentTCBConst2>)
 8004532:	6819      	ldr	r1, [r3, #0]
 8004534:	6808      	ldr	r0, [r1, #0]
 8004536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800453a:	f380 8809 	msr	PSP, r0
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f04f 0000 	mov.w	r0, #0
 8004546:	f380 8811 	msr	BASEPRI, r0
 800454a:	4770      	bx	lr
 800454c:	f3af 8000 	nop.w

08004550 <pxCurrentTCBConst2>:
 8004550:	20000788 	.word	0x20000788
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004554:	bf00      	nop
 8004556:	bf00      	nop

08004558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004558:	4808      	ldr	r0, [pc, #32]	; (800457c <prvPortStartFirstTask+0x24>)
 800455a:	6800      	ldr	r0, [r0, #0]
 800455c:	6800      	ldr	r0, [r0, #0]
 800455e:	f380 8808 	msr	MSP, r0
 8004562:	f04f 0000 	mov.w	r0, #0
 8004566:	f380 8814 	msr	CONTROL, r0
 800456a:	b662      	cpsie	i
 800456c:	b661      	cpsie	f
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	df00      	svc	0
 8004578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800457a:	bf00      	nop
 800457c:	e000ed08 	.word	0xe000ed08

08004580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004586:	4b46      	ldr	r3, [pc, #280]	; (80046a0 <xPortStartScheduler+0x120>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a46      	ldr	r2, [pc, #280]	; (80046a4 <xPortStartScheduler+0x124>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d10a      	bne.n	80045a6 <xPortStartScheduler+0x26>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	613b      	str	r3, [r7, #16]
}
 80045a2:	bf00      	nop
 80045a4:	e7fe      	b.n	80045a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045a6:	4b3e      	ldr	r3, [pc, #248]	; (80046a0 <xPortStartScheduler+0x120>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a3f      	ldr	r2, [pc, #252]	; (80046a8 <xPortStartScheduler+0x128>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d10a      	bne.n	80045c6 <xPortStartScheduler+0x46>
	__asm volatile
 80045b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b4:	f383 8811 	msr	BASEPRI, r3
 80045b8:	f3bf 8f6f 	isb	sy
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	60fb      	str	r3, [r7, #12]
}
 80045c2:	bf00      	nop
 80045c4:	e7fe      	b.n	80045c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045c6:	4b39      	ldr	r3, [pc, #228]	; (80046ac <xPortStartScheduler+0x12c>)
 80045c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	22ff      	movs	r2, #255	; 0xff
 80045d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045e0:	78fb      	ldrb	r3, [r7, #3]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	4b31      	ldr	r3, [pc, #196]	; (80046b0 <xPortStartScheduler+0x130>)
 80045ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045ee:	4b31      	ldr	r3, [pc, #196]	; (80046b4 <xPortStartScheduler+0x134>)
 80045f0:	2207      	movs	r2, #7
 80045f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045f4:	e009      	b.n	800460a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80045f6:	4b2f      	ldr	r3, [pc, #188]	; (80046b4 <xPortStartScheduler+0x134>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3b01      	subs	r3, #1
 80045fc:	4a2d      	ldr	r2, [pc, #180]	; (80046b4 <xPortStartScheduler+0x134>)
 80045fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	b2db      	uxtb	r3, r3
 8004608:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800460a:	78fb      	ldrb	r3, [r7, #3]
 800460c:	b2db      	uxtb	r3, r3
 800460e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004612:	2b80      	cmp	r3, #128	; 0x80
 8004614:	d0ef      	beq.n	80045f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004616:	4b27      	ldr	r3, [pc, #156]	; (80046b4 <xPortStartScheduler+0x134>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f1c3 0307 	rsb	r3, r3, #7
 800461e:	2b04      	cmp	r3, #4
 8004620:	d00a      	beq.n	8004638 <xPortStartScheduler+0xb8>
	__asm volatile
 8004622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004626:	f383 8811 	msr	BASEPRI, r3
 800462a:	f3bf 8f6f 	isb	sy
 800462e:	f3bf 8f4f 	dsb	sy
 8004632:	60bb      	str	r3, [r7, #8]
}
 8004634:	bf00      	nop
 8004636:	e7fe      	b.n	8004636 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004638:	4b1e      	ldr	r3, [pc, #120]	; (80046b4 <xPortStartScheduler+0x134>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	021b      	lsls	r3, r3, #8
 800463e:	4a1d      	ldr	r2, [pc, #116]	; (80046b4 <xPortStartScheduler+0x134>)
 8004640:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004642:	4b1c      	ldr	r3, [pc, #112]	; (80046b4 <xPortStartScheduler+0x134>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800464a:	4a1a      	ldr	r2, [pc, #104]	; (80046b4 <xPortStartScheduler+0x134>)
 800464c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	b2da      	uxtb	r2, r3
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004656:	4b18      	ldr	r3, [pc, #96]	; (80046b8 <xPortStartScheduler+0x138>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a17      	ldr	r2, [pc, #92]	; (80046b8 <xPortStartScheduler+0x138>)
 800465c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004660:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004662:	4b15      	ldr	r3, [pc, #84]	; (80046b8 <xPortStartScheduler+0x138>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a14      	ldr	r2, [pc, #80]	; (80046b8 <xPortStartScheduler+0x138>)
 8004668:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800466c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800466e:	f000 f8dd 	bl	800482c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004672:	4b12      	ldr	r3, [pc, #72]	; (80046bc <xPortStartScheduler+0x13c>)
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004678:	f000 f8fc 	bl	8004874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800467c:	4b10      	ldr	r3, [pc, #64]	; (80046c0 <xPortStartScheduler+0x140>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a0f      	ldr	r2, [pc, #60]	; (80046c0 <xPortStartScheduler+0x140>)
 8004682:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004686:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004688:	f7ff ff66 	bl	8004558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800468c:	f7fe ff9c 	bl	80035c8 <vTaskSwitchContext>
	prvTaskExitError();
 8004690:	f7ff ff22 	bl	80044d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	e000ed00 	.word	0xe000ed00
 80046a4:	410fc271 	.word	0x410fc271
 80046a8:	410fc270 	.word	0x410fc270
 80046ac:	e000e400 	.word	0xe000e400
 80046b0:	20000db4 	.word	0x20000db4
 80046b4:	20000db8 	.word	0x20000db8
 80046b8:	e000ed20 	.word	0xe000ed20
 80046bc:	2000000c 	.word	0x2000000c
 80046c0:	e000ef34 	.word	0xe000ef34

080046c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
	__asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	607b      	str	r3, [r7, #4]
}
 80046dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80046de:	4b0f      	ldr	r3, [pc, #60]	; (800471c <vPortEnterCritical+0x58>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3301      	adds	r3, #1
 80046e4:	4a0d      	ldr	r2, [pc, #52]	; (800471c <vPortEnterCritical+0x58>)
 80046e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80046e8:	4b0c      	ldr	r3, [pc, #48]	; (800471c <vPortEnterCritical+0x58>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d10f      	bne.n	8004710 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046f0:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <vPortEnterCritical+0x5c>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <vPortEnterCritical+0x4c>
	__asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	603b      	str	r3, [r7, #0]
}
 800470c:	bf00      	nop
 800470e:	e7fe      	b.n	800470e <vPortEnterCritical+0x4a>
	}
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	2000000c 	.word	0x2000000c
 8004720:	e000ed04 	.word	0xe000ed04

08004724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800472a:	4b12      	ldr	r3, [pc, #72]	; (8004774 <vPortExitCritical+0x50>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10a      	bne.n	8004748 <vPortExitCritical+0x24>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	607b      	str	r3, [r7, #4]
}
 8004744:	bf00      	nop
 8004746:	e7fe      	b.n	8004746 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004748:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <vPortExitCritical+0x50>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3b01      	subs	r3, #1
 800474e:	4a09      	ldr	r2, [pc, #36]	; (8004774 <vPortExitCritical+0x50>)
 8004750:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004752:	4b08      	ldr	r3, [pc, #32]	; (8004774 <vPortExitCritical+0x50>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d105      	bne.n	8004766 <vPortExitCritical+0x42>
 800475a:	2300      	movs	r3, #0
 800475c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	f383 8811 	msr	BASEPRI, r3
}
 8004764:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	2000000c 	.word	0x2000000c
	...

08004780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004780:	f3ef 8009 	mrs	r0, PSP
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	4b15      	ldr	r3, [pc, #84]	; (80047e0 <pxCurrentTCBConst>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	f01e 0f10 	tst.w	lr, #16
 8004790:	bf08      	it	eq
 8004792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800479a:	6010      	str	r0, [r2, #0]
 800479c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047a4:	f380 8811 	msr	BASEPRI, r0
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f7fe ff0a 	bl	80035c8 <vTaskSwitchContext>
 80047b4:	f04f 0000 	mov.w	r0, #0
 80047b8:	f380 8811 	msr	BASEPRI, r0
 80047bc:	bc09      	pop	{r0, r3}
 80047be:	6819      	ldr	r1, [r3, #0]
 80047c0:	6808      	ldr	r0, [r1, #0]
 80047c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c6:	f01e 0f10 	tst.w	lr, #16
 80047ca:	bf08      	it	eq
 80047cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047d0:	f380 8809 	msr	PSP, r0
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	f3af 8000 	nop.w

080047e0 <pxCurrentTCBConst>:
 80047e0:	20000788 	.word	0x20000788
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop

080047e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
	__asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	607b      	str	r3, [r7, #4]
}
 8004800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004802:	f7fe fe27 	bl	8003454 <xTaskIncrementTick>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800480c:	4b06      	ldr	r3, [pc, #24]	; (8004828 <xPortSysTickHandler+0x40>)
 800480e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	2300      	movs	r3, #0
 8004816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	f383 8811 	msr	BASEPRI, r3
}
 800481e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004820:	bf00      	nop
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	e000ed04 	.word	0xe000ed04

0800482c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004830:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <vPortSetupTimerInterrupt+0x34>)
 8004832:	2200      	movs	r2, #0
 8004834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004836:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <vPortSetupTimerInterrupt+0x38>)
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800483c:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <vPortSetupTimerInterrupt+0x3c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a0a      	ldr	r2, [pc, #40]	; (800486c <vPortSetupTimerInterrupt+0x40>)
 8004842:	fba2 2303 	umull	r2, r3, r2, r3
 8004846:	099b      	lsrs	r3, r3, #6
 8004848:	4a09      	ldr	r2, [pc, #36]	; (8004870 <vPortSetupTimerInterrupt+0x44>)
 800484a:	3b01      	subs	r3, #1
 800484c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800484e:	4b04      	ldr	r3, [pc, #16]	; (8004860 <vPortSetupTimerInterrupt+0x34>)
 8004850:	2207      	movs	r2, #7
 8004852:	601a      	str	r2, [r3, #0]
}
 8004854:	bf00      	nop
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	e000e010 	.word	0xe000e010
 8004864:	e000e018 	.word	0xe000e018
 8004868:	20000000 	.word	0x20000000
 800486c:	10624dd3 	.word	0x10624dd3
 8004870:	e000e014 	.word	0xe000e014

08004874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004874:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004884 <vPortEnableVFP+0x10>
 8004878:	6801      	ldr	r1, [r0, #0]
 800487a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800487e:	6001      	str	r1, [r0, #0]
 8004880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004882:	bf00      	nop
 8004884:	e000ed88 	.word	0xe000ed88

08004888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800488e:	f3ef 8305 	mrs	r3, IPSR
 8004892:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2b0f      	cmp	r3, #15
 8004898:	d914      	bls.n	80048c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800489a:	4a17      	ldr	r2, [pc, #92]	; (80048f8 <vPortValidateInterruptPriority+0x70>)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4413      	add	r3, r2
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048a4:	4b15      	ldr	r3, [pc, #84]	; (80048fc <vPortValidateInterruptPriority+0x74>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	7afa      	ldrb	r2, [r7, #11]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d20a      	bcs.n	80048c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80048ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	607b      	str	r3, [r7, #4]
}
 80048c0:	bf00      	nop
 80048c2:	e7fe      	b.n	80048c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048c4:	4b0e      	ldr	r3, [pc, #56]	; (8004900 <vPortValidateInterruptPriority+0x78>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048cc:	4b0d      	ldr	r3, [pc, #52]	; (8004904 <vPortValidateInterruptPriority+0x7c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d90a      	bls.n	80048ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	603b      	str	r3, [r7, #0]
}
 80048e6:	bf00      	nop
 80048e8:	e7fe      	b.n	80048e8 <vPortValidateInterruptPriority+0x60>
	}
 80048ea:	bf00      	nop
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	e000e3f0 	.word	0xe000e3f0
 80048fc:	20000db4 	.word	0x20000db4
 8004900:	e000ed0c 	.word	0xe000ed0c
 8004904:	20000db8 	.word	0x20000db8

08004908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08a      	sub	sp, #40	; 0x28
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004910:	2300      	movs	r3, #0
 8004912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004914:	f7fe fce2 	bl	80032dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004918:	4b5b      	ldr	r3, [pc, #364]	; (8004a88 <pvPortMalloc+0x180>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004920:	f000 f920 	bl	8004b64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004924:	4b59      	ldr	r3, [pc, #356]	; (8004a8c <pvPortMalloc+0x184>)
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4013      	ands	r3, r2
 800492c:	2b00      	cmp	r3, #0
 800492e:	f040 8093 	bne.w	8004a58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d01d      	beq.n	8004974 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004938:	2208      	movs	r2, #8
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4413      	add	r3, r2
 800493e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	2b00      	cmp	r3, #0
 8004948:	d014      	beq.n	8004974 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f023 0307 	bic.w	r3, r3, #7
 8004950:	3308      	adds	r3, #8
 8004952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00a      	beq.n	8004974 <pvPortMalloc+0x6c>
	__asm volatile
 800495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	617b      	str	r3, [r7, #20]
}
 8004970:	bf00      	nop
 8004972:	e7fe      	b.n	8004972 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d06e      	beq.n	8004a58 <pvPortMalloc+0x150>
 800497a:	4b45      	ldr	r3, [pc, #276]	; (8004a90 <pvPortMalloc+0x188>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	429a      	cmp	r2, r3
 8004982:	d869      	bhi.n	8004a58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004984:	4b43      	ldr	r3, [pc, #268]	; (8004a94 <pvPortMalloc+0x18c>)
 8004986:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004988:	4b42      	ldr	r3, [pc, #264]	; (8004a94 <pvPortMalloc+0x18c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800498e:	e004      	b.n	800499a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d903      	bls.n	80049ac <pvPortMalloc+0xa4>
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1f1      	bne.n	8004990 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80049ac:	4b36      	ldr	r3, [pc, #216]	; (8004a88 <pvPortMalloc+0x180>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d050      	beq.n	8004a58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2208      	movs	r2, #8
 80049bc:	4413      	add	r3, r2
 80049be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	1ad2      	subs	r2, r2, r3
 80049d0:	2308      	movs	r3, #8
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d91f      	bls.n	8004a18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4413      	add	r3, r2
 80049de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <pvPortMalloc+0xf8>
	__asm volatile
 80049ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	613b      	str	r3, [r7, #16]
}
 80049fc:	bf00      	nop
 80049fe:	e7fe      	b.n	80049fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	1ad2      	subs	r2, r2, r3
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a12:	69b8      	ldr	r0, [r7, #24]
 8004a14:	f000 f908 	bl	8004c28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a18:	4b1d      	ldr	r3, [pc, #116]	; (8004a90 <pvPortMalloc+0x188>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	4a1b      	ldr	r2, [pc, #108]	; (8004a90 <pvPortMalloc+0x188>)
 8004a24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a26:	4b1a      	ldr	r3, [pc, #104]	; (8004a90 <pvPortMalloc+0x188>)
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	4b1b      	ldr	r3, [pc, #108]	; (8004a98 <pvPortMalloc+0x190>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d203      	bcs.n	8004a3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a32:	4b17      	ldr	r3, [pc, #92]	; (8004a90 <pvPortMalloc+0x188>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a18      	ldr	r2, [pc, #96]	; (8004a98 <pvPortMalloc+0x190>)
 8004a38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	4b13      	ldr	r3, [pc, #76]	; (8004a8c <pvPortMalloc+0x184>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	431a      	orrs	r2, r3
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004a4e:	4b13      	ldr	r3, [pc, #76]	; (8004a9c <pvPortMalloc+0x194>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	3301      	adds	r3, #1
 8004a54:	4a11      	ldr	r2, [pc, #68]	; (8004a9c <pvPortMalloc+0x194>)
 8004a56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a58:	f7fe fc4e 	bl	80032f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <pvPortMalloc+0x174>
	__asm volatile
 8004a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	60fb      	str	r3, [r7, #12]
}
 8004a78:	bf00      	nop
 8004a7a:	e7fe      	b.n	8004a7a <pvPortMalloc+0x172>
	return pvReturn;
 8004a7c:	69fb      	ldr	r3, [r7, #28]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3728      	adds	r7, #40	; 0x28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	200049c4 	.word	0x200049c4
 8004a8c:	200049d8 	.word	0x200049d8
 8004a90:	200049c8 	.word	0x200049c8
 8004a94:	200049bc 	.word	0x200049bc
 8004a98:	200049cc 	.word	0x200049cc
 8004a9c:	200049d0 	.word	0x200049d0

08004aa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d04d      	beq.n	8004b4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	425b      	negs	r3, r3
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	4413      	add	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	4b24      	ldr	r3, [pc, #144]	; (8004b58 <vPortFree+0xb8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10a      	bne.n	8004ae4 <vPortFree+0x44>
	__asm volatile
 8004ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	60fb      	str	r3, [r7, #12]
}
 8004ae0:	bf00      	nop
 8004ae2:	e7fe      	b.n	8004ae2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00a      	beq.n	8004b02 <vPortFree+0x62>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	60bb      	str	r3, [r7, #8]
}
 8004afe:	bf00      	nop
 8004b00:	e7fe      	b.n	8004b00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	4b14      	ldr	r3, [pc, #80]	; (8004b58 <vPortFree+0xb8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01e      	beq.n	8004b4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d11a      	bne.n	8004b4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <vPortFree+0xb8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	43db      	mvns	r3, r3
 8004b22:	401a      	ands	r2, r3
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b28:	f7fe fbd8 	bl	80032dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	4b0a      	ldr	r3, [pc, #40]	; (8004b5c <vPortFree+0xbc>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4413      	add	r3, r2
 8004b36:	4a09      	ldr	r2, [pc, #36]	; (8004b5c <vPortFree+0xbc>)
 8004b38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b3a:	6938      	ldr	r0, [r7, #16]
 8004b3c:	f000 f874 	bl	8004c28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004b40:	4b07      	ldr	r3, [pc, #28]	; (8004b60 <vPortFree+0xc0>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3301      	adds	r3, #1
 8004b46:	4a06      	ldr	r2, [pc, #24]	; (8004b60 <vPortFree+0xc0>)
 8004b48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004b4a:	f7fe fbd5 	bl	80032f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b4e:	bf00      	nop
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	200049d8 	.word	0x200049d8
 8004b5c:	200049c8 	.word	0x200049c8
 8004b60:	200049d4 	.word	0x200049d4

08004b64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004b6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004b70:	4b27      	ldr	r3, [pc, #156]	; (8004c10 <prvHeapInit+0xac>)
 8004b72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00c      	beq.n	8004b98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3307      	adds	r3, #7
 8004b82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 0307 	bic.w	r3, r3, #7
 8004b8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	4a1f      	ldr	r2, [pc, #124]	; (8004c10 <prvHeapInit+0xac>)
 8004b94:	4413      	add	r3, r2
 8004b96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b9c:	4a1d      	ldr	r2, [pc, #116]	; (8004c14 <prvHeapInit+0xb0>)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ba2:	4b1c      	ldr	r3, [pc, #112]	; (8004c14 <prvHeapInit+0xb0>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	4413      	add	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1a9b      	subs	r3, r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0307 	bic.w	r3, r3, #7
 8004bbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4a15      	ldr	r2, [pc, #84]	; (8004c18 <prvHeapInit+0xb4>)
 8004bc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004bc6:	4b14      	ldr	r3, [pc, #80]	; (8004c18 <prvHeapInit+0xb4>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <prvHeapInit+0xb4>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	1ad2      	subs	r2, r2, r3
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004be4:	4b0c      	ldr	r3, [pc, #48]	; (8004c18 <prvHeapInit+0xb4>)
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	4a0a      	ldr	r2, [pc, #40]	; (8004c1c <prvHeapInit+0xb8>)
 8004bf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	4a09      	ldr	r2, [pc, #36]	; (8004c20 <prvHeapInit+0xbc>)
 8004bfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004bfc:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <prvHeapInit+0xc0>)
 8004bfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c02:	601a      	str	r2, [r3, #0]
}
 8004c04:	bf00      	nop
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	20000dbc 	.word	0x20000dbc
 8004c14:	200049bc 	.word	0x200049bc
 8004c18:	200049c4 	.word	0x200049c4
 8004c1c:	200049cc 	.word	0x200049cc
 8004c20:	200049c8 	.word	0x200049c8
 8004c24:	200049d8 	.word	0x200049d8

08004c28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c30:	4b28      	ldr	r3, [pc, #160]	; (8004cd4 <prvInsertBlockIntoFreeList+0xac>)
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	e002      	b.n	8004c3c <prvInsertBlockIntoFreeList+0x14>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d8f7      	bhi.n	8004c36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	4413      	add	r3, r2
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d108      	bne.n	8004c6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	441a      	add	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	441a      	add	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d118      	bne.n	8004cb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	4b15      	ldr	r3, [pc, #84]	; (8004cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d00d      	beq.n	8004ca6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	441a      	add	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	e008      	b.n	8004cb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ca6:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	e003      	b.n	8004cb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d002      	beq.n	8004cc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cc6:	bf00      	nop
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	200049bc 	.word	0x200049bc
 8004cd8:	200049c4 	.word	0x200049c4

08004cdc <memset>:
 8004cdc:	4402      	add	r2, r0
 8004cde:	4603      	mov	r3, r0
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d100      	bne.n	8004ce6 <memset+0xa>
 8004ce4:	4770      	bx	lr
 8004ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cea:	e7f9      	b.n	8004ce0 <memset+0x4>

08004cec <__libc_init_array>:
 8004cec:	b570      	push	{r4, r5, r6, lr}
 8004cee:	4d0d      	ldr	r5, [pc, #52]	; (8004d24 <__libc_init_array+0x38>)
 8004cf0:	4c0d      	ldr	r4, [pc, #52]	; (8004d28 <__libc_init_array+0x3c>)
 8004cf2:	1b64      	subs	r4, r4, r5
 8004cf4:	10a4      	asrs	r4, r4, #2
 8004cf6:	2600      	movs	r6, #0
 8004cf8:	42a6      	cmp	r6, r4
 8004cfa:	d109      	bne.n	8004d10 <__libc_init_array+0x24>
 8004cfc:	4d0b      	ldr	r5, [pc, #44]	; (8004d2c <__libc_init_array+0x40>)
 8004cfe:	4c0c      	ldr	r4, [pc, #48]	; (8004d30 <__libc_init_array+0x44>)
 8004d00:	f000 f826 	bl	8004d50 <_init>
 8004d04:	1b64      	subs	r4, r4, r5
 8004d06:	10a4      	asrs	r4, r4, #2
 8004d08:	2600      	movs	r6, #0
 8004d0a:	42a6      	cmp	r6, r4
 8004d0c:	d105      	bne.n	8004d1a <__libc_init_array+0x2e>
 8004d0e:	bd70      	pop	{r4, r5, r6, pc}
 8004d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d14:	4798      	blx	r3
 8004d16:	3601      	adds	r6, #1
 8004d18:	e7ee      	b.n	8004cf8 <__libc_init_array+0xc>
 8004d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d1e:	4798      	blx	r3
 8004d20:	3601      	adds	r6, #1
 8004d22:	e7f2      	b.n	8004d0a <__libc_init_array+0x1e>
 8004d24:	08004e30 	.word	0x08004e30
 8004d28:	08004e30 	.word	0x08004e30
 8004d2c:	08004e30 	.word	0x08004e30
 8004d30:	08004e34 	.word	0x08004e34

08004d34 <memcpy>:
 8004d34:	440a      	add	r2, r1
 8004d36:	4291      	cmp	r1, r2
 8004d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004d3c:	d100      	bne.n	8004d40 <memcpy+0xc>
 8004d3e:	4770      	bx	lr
 8004d40:	b510      	push	{r4, lr}
 8004d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d4a:	4291      	cmp	r1, r2
 8004d4c:	d1f9      	bne.n	8004d42 <memcpy+0xe>
 8004d4e:	bd10      	pop	{r4, pc}

08004d50 <_init>:
 8004d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d52:	bf00      	nop
 8004d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d56:	bc08      	pop	{r3}
 8004d58:	469e      	mov	lr, r3
 8004d5a:	4770      	bx	lr

08004d5c <_fini>:
 8004d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5e:	bf00      	nop
 8004d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d62:	bc08      	pop	{r3}
 8004d64:	469e      	mov	lr, r3
 8004d66:	4770      	bx	lr
